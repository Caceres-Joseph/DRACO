get_global 0 //APUNTADOR QUE QUEDERÁ GUARDADO EN TODAS LAS DECLARACIONES GLOBALES.
//RESERVO ESPACIO PARA LAS VARIABLES GLOBALES 
get_global 0 
1//Numero de declaraciones globales
add //Aumento el puntero en el heap
set_global 0 //Actualizo la posición en el heap.
//DECLARACION DE UNA ESTRUCTURA GLOBAL--------------------
get_global 0 //Posición inicial del struct en el heap
tee_global $calc //Se coloca el valor del puntero del heap en el stack
 get_global 0 //posicion del heap antes de entrar a la declaracion.
get_global 0
6
add 
set_global 0
//DECLARACION EN STRUCT***************
0//Valor inicial de la variable del struct
tee_global $calc  //asignación del valor en el heap
1
add
//DECLARACION EN STRUCT***************
-1//Valor inicial de la variable del struct
tee_global $calc  //asignación del valor en el heap
1
add
//DECLARACION EN STRUCT***************
92//Valor inicial de la variable del struct
tee_global $calc  //asignación del valor en el heap
1
add
//DECLARACION EN STRUCT***************
0//Valor inicial de la variable del struct
tee_global $calc  //asignación del valor en el heap
1
add
//DECLARACION EN STRUCT***************
0//Valor inicial de la variable del struct
tee_global $calc  //asignación del valor en el heap
1
add
//DECLARACION DE ARREGLO EN STRUCT|||||||||||||||||||
get_global 0 //Posición inicial del arreglo en el heap
tee_global $calc //Se coloca el valor del puntero del heap en el heap
 
//....RESERVAR ARREGLO....

//----DECLARACION DE LA VARAIBLE QUE LLEVARÁ EL ITERADOR: i
get_local 0   //posicion actual en el puntero de la pila
2  //posición de la variable en la pila
add   //colocar la posición de la variable en la pilita
0 //valor inicial del iterador
set_local $calc   //asignación del valor en la pila
get_local 0   //posicion actual en el puntero de la pila
3  //posición de la variable en la pila
add   //colocar la posición de la variable en la pilita
//MULTIPLICACIÓN DE LAS DIMENSIONES PARA CALCULAR SU TAMAÑO.
2
2
mult
set_local $calc   //asignación del valor en la pila
//--Guardar el valor de las dimensiones al inicio del arreglo.
get_global 0
2
set_global $calc
get_global 0
1 
add 
set_global 0
get_global 0
2
set_global $calc
get_global 0
1 
add 
set_global 0
$l1:     //Inicio del ciclo. 
//----CONDICIÓN DEL CICLO i < base: i
get_local 0
2
add
get_local $calc

get_local 0
3
add
get_local $calc

Lt
Eqz   // Se valida que la condición haya sido verdadera.
Br_if $l2   //Si es verdadera, hace un goto a la etiqueta verdadera.
Br $l3  //Si la condición es falsa, hace un goto a la etiqueta falsa.
$l2:  //Inicio de la lista de instrucciones. 
//----heap[i] el valor 
get_global 0  //Puntero actual del heap
-1  //Valor inicial en la posición h[i]
set_global $calc  //Guardar valor inicial
//---H = H+1
get_global 0 //valor actual del puntero del heap
1 //Aumenta el puntero un tamaño en uno.
add //Aumento del puntero
set_global 0 //se actualiza el valor del puntero del heap.
//----ITERADOR = ITERADOR + 1
get_local 0
2
add
get_local 0
2
add
get_local $calc

1
Add
set_local $calc
Br $l1  //Al finalizar el ciclo, se hace un goto a la etiqueta de inicio del ciclo.
$l3:  // Inicio de la etiqueta falsa o de salida del ciclo. 
1
add


//.....FIN ARREGLO.....
br_if $l4
$l4:
1 
add 
br_if $l5
$l5:
Function $principal
//DECLARACION DE UNA ESTRUCTURA--------------------
get_local 0 //Apuntador de la pila
0//Posición donde se encuentra la variable del struct
add //Posición donde se guardará en la pila
 get_global 0 //Posición inicial del struct en el heap
set_local $calc //Se coloca el valor del puntero del heap en el stack
 get_global 0 //posicion del heap antes de entrar a la declaracion.
get_global 0
6
add 
set_global 0
//DECLARACION EN STRUCT***************
0//Valor inicial de la variable del struct
tee_global $calc  //asignación del valor en el heap
1
add
//DECLARACION EN STRUCT***************
-1//Valor inicial de la variable del struct
tee_global $calc  //asignación del valor en el heap
1
add
//DECLARACION EN STRUCT***************
92//Valor inicial de la variable del struct
tee_global $calc  //asignación del valor en el heap
1
add
//DECLARACION EN STRUCT***************
0//Valor inicial de la variable del struct
tee_global $calc  //asignación del valor en el heap
1
add
//DECLARACION EN STRUCT***************
0//Valor inicial de la variable del struct
tee_global $calc  //asignación del valor en el heap
1
add
//DECLARACION DE ARREGLO EN STRUCT|||||||||||||||||||
get_global 0 //Posición inicial del arreglo en el heap
tee_global $calc //Se coloca el valor del puntero del heap en el heap
 
//....RESERVAR ARREGLO....

//----DECLARACION DE LA VARAIBLE QUE LLEVARÁ EL ITERADOR: i
get_local 0   //posicion actual en el puntero de la pila
1  //posición de la variable en la pila
add   //colocar la posición de la variable en la pilita
0 //valor inicial del iterador
set_local $calc   //asignación del valor en la pila
get_local 0   //posicion actual en el puntero de la pila
2  //posición de la variable en la pila
add   //colocar la posición de la variable en la pilita
//MULTIPLICACIÓN DE LAS DIMENSIONES PARA CALCULAR SU TAMAÑO.
2
2
mult
set_local $calc   //asignación del valor en la pila
//--Guardar el valor de las dimensiones al inicio del arreglo.
get_global 0
2
set_global $calc
get_global 0
1 
add 
set_global 0
get_global 0
2
set_global $calc
get_global 0
1 
add 
set_global 0
$l6:     //Inicio del ciclo. 
//----CONDICIÓN DEL CICLO i < base: i
get_local 0
1
add
get_local $calc

get_local 0
2
add
get_local $calc

Lt
Eqz   // Se valida que la condición haya sido verdadera.
Br_if $l7   //Si es verdadera, hace un goto a la etiqueta verdadera.
Br $l8  //Si la condición es falsa, hace un goto a la etiqueta falsa.
$l7:  //Inicio de la lista de instrucciones. 
//----heap[i] el valor 
get_global 0  //Puntero actual del heap
-1  //Valor inicial en la posición h[i]
set_global $calc  //Guardar valor inicial
//---H = H+1
get_global 0 //valor actual del puntero del heap
1 //Aumenta el puntero un tamaño en uno.
add //Aumento del puntero
set_global 0 //se actualiza el valor del puntero del heap.
//----ITERADOR = ITERADOR + 1
get_local 0
1
add
get_local 0
1
add
get_local $calc

1
Add
set_local $calc
Br $l6  //Al finalizar el ciclo, se hace un goto a la etiqueta de inicio del ciclo.
$l8:  // Inicio de la etiqueta falsa o de salida del ciclo. 
1
add


//.....FIN ARREGLO.....
br_if $l9
$l9:
//INICIO DE LA FUNCIÓN: PASO DE PARAMETROS--------------------
//CAMBIO AMBITO AUMENTO PILA---------------------------
get_local 0 //Coloca el valor del puntero al inicio de la pilita
5//Coloca el valor del tamaño de la función al inicio de la pilita.
add //Suma el valor actual del puntero el tamaño de la función.
set_local 0 //Se cambia el valor del puntero en la stack
call $llenar_estructura//se hace la llamada a la función para mover puntero IP
//REGRESAR PUNTERO PILA-------------------------------
get_local 0   //Se coloca el puntero al inicio de la pilita
5  //Coloca el valor del tamaño de la función al inicio de la pilita.
diff   //Resta el valo actual del puntero el tamaño de la función para retornar el ambito.
set_local 0  //Se regresa el valor del puntero en la stack.
get_local 0
0
add
1
get_global $calc

set_local $calc
get_local 0 //Apuntador de la pila
1//Posición donde se encuentra la variable del arreglo
add //Posición donde se guardará en la pila
 get_global 0 //Posición inicial del arreglo en el heap
set_local $calc //Se coloca el valor del puntero del heap en el stack
 
//....RESERVAR ARREGLO....

//----DECLARACION DE LA VARAIBLE QUE LLEVARÁ EL ITERADOR: i
get_local 0   //posicion actual en el puntero de la pila
2  //posición de la variable en la pila
add   //colocar la posición de la variable en la pilita
0 //valor inicial del iterador
set_local $calc   //asignación del valor en la pila
get_local 0   //posicion actual en el puntero de la pila
3  //posición de la variable en la pila
add   //colocar la posición de la variable en la pilita
//MULTIPLICACIÓN DE LAS DIMENSIONES PARA CALCULAR SU TAMAÑO.
10
set_local $calc   //asignación del valor en la pila
//--Guardar el valor de las dimensiones al inicio del arreglo.
get_global 0
10
set_global $calc
get_global 0
1 
add 
set_global 0
$l10:     //Inicio del ciclo. 
//----CONDICIÓN DEL CICLO i < base: i
get_local 0
2
add
get_local $calc

get_local 0
3
add
get_local $calc

Lt
Eqz   // Se valida que la condición haya sido verdadera.
Br_if $l11   //Si es verdadera, hace un goto a la etiqueta verdadera.
Br $l12  //Si la condición es falsa, hace un goto a la etiqueta falsa.
$l11:  //Inicio de la lista de instrucciones. 
//----heap[i] el valor 
get_global 0  //Puntero actual del heap
0  //Valor inicial en la posición h[i]
set_global $calc  //Guardar valor inicial
//---H = H+1
get_global 0 //valor actual del puntero del heap
1 //Aumenta el puntero un tamaño en uno.
add //Aumento del puntero
set_global 0 //se actualiza el valor del puntero del heap.
//----ITERADOR = ITERADOR + 1
get_local 0
2
add
get_local 0
2
add
get_local $calc

1
Add
set_local $calc
Br $l10  //Al finalizar el ciclo, se hace un goto a la etiqueta de inicio del ciclo.
$l12:  // Inicio de la etiqueta falsa o de salida del ciclo. 


//.....FIN ARREGLO.....
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
1
add
get_local $calc //Posicion donde inicia el arreglo.
1//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
0//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
2
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
1
add
get_local $calc //Posicion donde inicia el arreglo.
1//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
1//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
3
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
1
add
get_local $calc //Posicion donde inicia el arreglo.
1//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
2//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
4
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
1
add
get_local $calc //Posicion donde inicia el arreglo.
1//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
3//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
55
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
1
add
get_local $calc //Posicion donde inicia el arreglo.
1//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
4//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
6
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
1
add
get_local $calc //Posicion donde inicia el arreglo.
1//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
5//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
7
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
1
add
get_local $calc //Posicion donde inicia el arreglo.
1//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
6//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
877
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
1
add
get_local $calc //Posicion donde inicia el arreglo.
1//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
7//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
6
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
1
add
get_local $calc //Posicion donde inicia el arreglo.
1//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
8//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
5
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
1
add
get_local $calc //Posicion donde inicia el arreglo.
1//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
9//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
3
//VALOR.
set_global $calc

//--Función Imprimir

//=============LLAMADA A FUNCIÓN IMPRIMIR===========================

//PARAMETRO1
get_local 0 // me posiciono en el inicio de la función actual.
0// busco la posición del parametro que voy a pasar
add  //Me posicion en el lugar del parametro
5// se coloca el tamaño de la función para poder guardar la variable
add //Se suma el tamaño del ambito para poder pasar el parametro a la posición que lo recibe.
//--GUARDAR STRING: Se guarda el puntero del heap el numero de veces del tamaño de la cadena.
get_global 0 //Posicion que quedará hasta el final de la cadena.
get_global 0 
76 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
108 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
97 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
109 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
97 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
100 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
97 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
32 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
49 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
58 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
32 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
92//Caracter ACII final cadena
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
set_global 0 //Actualizar valor del puntero 
// Traducción del valor que se va a pasar como parametro
set_local $calc //guardo el valor en la posición calculada

//LLAMADA DE LA FUNCIÓN CONCATENAR
get_local 0 //Coloca el valor del puntero al inicio de la pilita
5 //Coloca el valor del tamaño de la función al inicio de la pilita.
add //Suma el valor actual del puntero el tamaño de la función.
set_local 0 //Se cambia el valor del puntero en la stack
call $imprimir_cadena //se hace la llamada a la función para mover puntero IP

//REGRESAR PUNTERO DEL STACK
get_local 0 //Se coloca el puntero al inicio de la pilita
5 //Coloca el valor del tamaño de la función al inicio de la pilita.
diff //Resta el valo actual del puntero el tamaño de la función para retornar el ambito.
set_local 0 //Se regresa el valor del puntero en la stack.
//========================FIN IMPRIMIR==================
%c
//Valor a imprimir...
10
Print
//INICIO DE LA FUNCIÓN: PASO DE PARAMETROS--------------------
get_local 0
0
add 
5
add 
//--------INICIO CONCATENACIÓN----------

//PARAMETRO1
get_local 0 // me posiciono en el inicio de la función actual.
0// busco la posición del parametro que voy a pasar
add  //Me posicion en el lugar del parametro
5// se coloca el tamaño de la función para poder guardar la variable
add //Se suma el tamaño del ambito para poder pasar el parametro a la posición que lo recibe.
//--GUARDAR STRING: Se guarda el puntero del heap el numero de veces del tamaño de la cadena.
get_global 0 //Posicion que quedará hasta el final de la cadena.
get_global 0 
112 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
111 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
116 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
101 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
110 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
99 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
105 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
97 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
32 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
100 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
101 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
32 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
92//Caracter ACII final cadena
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
set_global 0 //Actualizar valor del puntero 
// Traducción del valor que se va a pasar como parametro
set_local $calc //guardo el valor en la posición calculada

//PARAMETRO2
get_local 0 // me posiciono en el inicio de la función actual.
1 // busco la posición del parametro que voy a pasar
add //Me posicion en el lugar del parametro
5// se coloca el tamaño de la función para poder guardar la variable
add //Se suma el tamaño del ambito para poder pasar el parametro a la posición que lo recibe.

//=============CONVERTIR VALOR ENTERO A STRING PARA CONCATENAR===========================

//PARAMETRO1
get_local 0 // me posiciono en el inicio de la función actual.
0// busco la posición del parametro que voy a pasar
add  //Me posicion en el lugar del parametro
5// se coloca el tamaño de la función para poder guardar la variable
add //Se suma el tamaño del ambito para poder pasar el parametro a la posición que lo recibe.
1 //POR SER EL SEGUNDO OPERADOR SE SUMA UNO MÁS.
add 
2
// Traducción del valor que se va a pasar como parametro
set_local $calc //guardo el valor en la posición calculada

//LLAMADA DE LA FUNCIÓN CONCATENAR
get_local 0 //Coloca el valor del puntero al inicio de la pilita
5 //Coloca el valor del tamaño de la función al inicio de la pilita.
add //Suma el valor actual del puntero el tamaño de la función.
1 //POR SER EL SEGUNDO OPERADOR SE SUMA UNO MÁS.
add 
set_local 0 //Se cambia el valor del puntero en la stack
call $double_to_int //se hace la llamada a la función para mover puntero IP

//REGRESAR PUNTERO DEL STACK
get_local 0 //Se coloca el puntero al inicio de la pilita
5 //Coloca el valor del tamaño de la función al inicio de la pilita.
diff //Resta el valo actual del puntero el tamaño de la función para retornar el ambito.
1 //POR SER EL SEGUNDO OPERADOR SE RESTA UNO MÁS.
diff 
set_local 0 //Se regresa el valor del puntero en la stack.
//========================FIN CONVERSION==================
 // Traducción del valor que se va a pasar como parametro
set_local $calc //guardo el valor en la posición calculada

//LLAMADA DE LA FUNCIÓN CONCATENAR
get_local 0 //Coloca el valor del puntero al inicio de la pilita
5 //Coloca el valor del tamaño de la función al inicio de la pilita.
add //Suma el valor actual del puntero el tamaño de la función.
set_local 0 //Se cambia el valor del puntero en la stack
call $ConcatenarString //se hace la llamada a la función para mover puntero IP

//REGRESAR PUNTERO DEL STACK
get_local 0 //Se coloca el puntero al inicio de la pilita
5 //Coloca el valor del tamaño de la función al inicio de la pilita.
diff //Resta el valo actual del puntero el tamaño de la función para retornar el ambito.
set_local 0 //Se regresa el valor del puntero en la stack.
set_local $calc
get_local 0
1
add 
5
add 

//.....INICIO POTENCIA.....

//----DECLARACION DE LA VARAIBLE QUE LLEVARÁ EL ITERADOR: i
get_local 0   //posicion actual en el puntero de la pila
2  //posición de la variable en la pila
add   //colocar la posición de la variable en la pilita
0 //valor inicial del iterador
set_local $calc   //asignación del valor en la pila
//----DECLARACION DE LA VARAIBLE QUE LLEVARÁ EL RESULTADO: resultado
get_local 0   //posicion actual en el puntero de la pila
3  //posición de la variable en la pila
add   //colocar la posición de la variable en la pilita
1 //valor inicial del resultado
set_local $calc   //asignación del valor en la pila
$l13:     //Inicio del ciclo. 
//----CONDICIÓN DEL CICLO i < base: i
get_local 0
2
add
get_local $calc

2

Lt
Eqz   // Se valida que la condición haya sido verdadera.
Br_if $l14   //Si es verdadera, hace un goto a la etiqueta verdadera.
Br $l15  //Si la condición es falsa, hace un goto a la etiqueta falsa.
$l14:  //Inicio de la lista de instrucciones. 
//----RESULTADO = RESULTADO * BASE
get_local 0
3
add
get_local 0
3
add
get_local $calc

2

Mult
set_local $calc
//----ITERADOR = ITERADOR + 1
get_local 0
2
add
get_local 0
2
add
get_local $calc

1
Add
set_local $calc
Br $l13  //Al finalizar el ciclo, se hace un goto a la etiqueta de inicio del ciclo.
$l15:  // Inicio de la etiqueta falsa o de salida del ciclo. 
//COLOCAR VALOR DEL RESULTADO EN LA CIMA.....
get_local 0
3
add
get_local $calc



//.....FIN POTENCIA.....
set_local $calc
get_local 0
2
add 
5
add 
//INDICE.
8
//TAMAÑO.
get_local 0
1 //posicion de la variable del arreglo.
add 
get_local $calc //Obtiene el valor de la posicion del arreglo.
0//numero de dimensión
add 
get_global $calc //Obtiene el valor de la posición del heap. 
Lt //Valor_Indice < Tamaño_Dimension
Eqz //Valida si es menor
br_if $l16   //salto etiqueta verdadero
br $error_arreglo  //goto etiqueta falso
$l16:    //inicio etiqueta verdadero
get_local 0
1 //posicion de la variable del arreglo.
add 
get_local $calc //Obtiene el valor de la posicion del arreglo.
1
add 
8

add //Se suma la posicion del arreglo.
get_global $calc //Se obtiene el valor de la posición del arreglo.
set_local $calc
get_local 0
3
add 
5
add 
//--GUARDAR STRING: Se guarda el puntero del heap el numero de veces del tamaño de la cadena.
get_global 0 //Posicion que quedará hasta el final de la cadena.
get_global 0 
83 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
105 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
110 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
32 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
99 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
111 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
110 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
99 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
97 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
116 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
101 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
110 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
97 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
114 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
92//Caracter ACII final cadena
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
set_global 0 //Actualizar valor del puntero 
set_local $calc
get_local 0
4
add 
5
add 
1
get_global $calc
set_local $calc
//CAMBIO AMBITO AUMENTO PILA---------------------------
get_local 0 //Coloca el valor del puntero al inicio de la pilita
5//Coloca el valor del tamaño de la función al inicio de la pilita.
add //Suma el valor actual del puntero el tamaño de la función.
set_local 0 //Se cambia el valor del puntero en la stack
call $imprimir_potencia_STRING_INT_INT_STRING_struct_prueba//se hace la llamada a la función para mover puntero IP
//REGRESAR PUNTERO PILA-------------------------------
get_local 0   //Se coloca el puntero al inicio de la pilita
5  //Coloca el valor del tamaño de la función al inicio de la pilita.
diff   //Resta el valo actual del puntero el tamaño de la función para retornar el ambito.
set_local 0  //Se regresa el valor del puntero en la stack.
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
1
add
get_local $calc //Posicion donde inicia el arreglo.
1//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
0//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
23
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
1
add
get_local $calc //Posicion donde inicia el arreglo.
1//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
1//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
34
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
1
add
get_local $calc //Posicion donde inicia el arreglo.
1//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
2//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
4
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
1
add
get_local $calc //Posicion donde inicia el arreglo.
1//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
3//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
4
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
1
add
get_local $calc //Posicion donde inicia el arreglo.
1//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
4//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
42
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
1
add
get_local $calc //Posicion donde inicia el arreglo.
1//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
5//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
3
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
1
add
get_local $calc //Posicion donde inicia el arreglo.
1//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
6//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
59
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
1
add
get_local $calc //Posicion donde inicia el arreglo.
1//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
7//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
39
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
1
add
get_local $calc //Posicion donde inicia el arreglo.
1//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
8//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
29
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
1
add
get_local $calc //Posicion donde inicia el arreglo.
1//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
9//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
39
//VALOR.
set_global $calc
get_local 0 //Apuntador de la pila
2//Posición donde se encuentra la variable del arreglo
add //Posición donde se guardará en la pila
 get_global 0 //Posición inicial del arreglo en el heap
set_local $calc //Se coloca el valor del puntero del heap en el stack
 
//....RESERVAR ARREGLO....

//----DECLARACION DE LA VARAIBLE QUE LLEVARÁ EL ITERADOR: i
get_local 0   //posicion actual en el puntero de la pila
3  //posición de la variable en la pila
add   //colocar la posición de la variable en la pilita
0 //valor inicial del iterador
set_local $calc   //asignación del valor en la pila
get_local 0   //posicion actual en el puntero de la pila
4  //posición de la variable en la pila
add   //colocar la posición de la variable en la pilita
//MULTIPLICACIÓN DE LAS DIMENSIONES PARA CALCULAR SU TAMAÑO.
5
set_local $calc   //asignación del valor en la pila
//--Guardar el valor de las dimensiones al inicio del arreglo.
get_global 0
5
set_global $calc
get_global 0
1 
add 
set_global 0
$l17:     //Inicio del ciclo. 
//----CONDICIÓN DEL CICLO i < base: i
get_local 0
3
add
get_local $calc

get_local 0
4
add
get_local $calc

Lt
Eqz   // Se valida que la condición haya sido verdadera.
Br_if $l18   //Si es verdadera, hace un goto a la etiqueta verdadera.
Br $l19  //Si la condición es falsa, hace un goto a la etiqueta falsa.
$l18:  //Inicio de la lista de instrucciones. 
//----heap[i] el valor 
get_global 0  //Puntero actual del heap
92  //Valor inicial en la posición h[i]
set_global $calc  //Guardar valor inicial
//---H = H+1
get_global 0 //valor actual del puntero del heap
1 //Aumenta el puntero un tamaño en uno.
add //Aumento del puntero
set_global 0 //se actualiza el valor del puntero del heap.
//----ITERADOR = ITERADOR + 1
get_local 0
3
add
get_local 0
3
add
get_local $calc

1
Add
set_local $calc
Br $l17  //Al finalizar el ciclo, se hace un goto a la etiqueta de inicio del ciclo.
$l19:  // Inicio de la etiqueta falsa o de salida del ciclo. 


//.....FIN ARREGLO.....
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
1//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
0//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
109
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
1//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
1//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
117
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
1//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
2//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
110
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
1//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
3//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
100
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
1//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
4//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
111
//VALOR.
set_global $calc
get_local 0 //Apuntador de la pila
3//Posición donde se encuentra la variable del arreglo
add //Posición donde se guardará en la pila
 get_global 0 //Posición inicial del arreglo en el heap
set_local $calc //Se coloca el valor del puntero del heap en el stack
 
//....RESERVAR ARREGLO....

//----DECLARACION DE LA VARAIBLE QUE LLEVARÁ EL ITERADOR: i
get_local 0   //posicion actual en el puntero de la pila
4  //posición de la variable en la pila
add   //colocar la posición de la variable en la pilita
0 //valor inicial del iterador
set_local $calc   //asignación del valor en la pila
get_local 0   //posicion actual en el puntero de la pila
5  //posición de la variable en la pila
add   //colocar la posición de la variable en la pilita
//MULTIPLICACIÓN DE LAS DIMENSIONES PARA CALCULAR SU TAMAÑO.
2
2
mult
set_local $calc   //asignación del valor en la pila
//--Guardar el valor de las dimensiones al inicio del arreglo.
get_global 0
2
set_global $calc
get_global 0
1 
add 
set_global 0
get_global 0
2
set_global $calc
get_global 0
1 
add 
set_global 0
$l20:     //Inicio del ciclo. 
//----CONDICIÓN DEL CICLO i < base: i
get_local 0
4
add
get_local $calc

get_local 0
5
add
get_local $calc

Lt
Eqz   // Se valida que la condición haya sido verdadera.
Br_if $l21   //Si es verdadera, hace un goto a la etiqueta verdadera.
Br $l22  //Si la condición es falsa, hace un goto a la etiqueta falsa.
$l21:  //Inicio de la lista de instrucciones. 
//----heap[i] el valor 
get_global 0  //Puntero actual del heap
-1  //Valor inicial en la posición h[i]
set_global $calc  //Guardar valor inicial
//---H = H+1
get_global 0 //valor actual del puntero del heap
1 //Aumenta el puntero un tamaño en uno.
add //Aumento del puntero
set_global 0 //se actualiza el valor del puntero del heap.
//----ITERADOR = ITERADOR + 1
get_local 0
4
add
get_local 0
4
add
get_local $calc

1
Add
set_local $calc
Br $l20  //Al finalizar el ciclo, se hace un goto a la etiqueta de inicio del ciclo.
$l22:  // Inicio de la etiqueta falsa o de salida del ciclo. 


//.....FIN ARREGLO.....
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
3
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
0//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
//--GUARDAR STRING: Se guarda el puntero del heap el numero de veces del tamaño de la cadena.
get_global 0 //Posicion que quedará hasta el final de la cadena.
get_global 0 
120 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
120 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
92//Caracter ACII final cadena
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
set_global 0 //Actualizar valor del puntero 
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
3
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
1//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
//--GUARDAR STRING: Se guarda el puntero del heap el numero de veces del tamaño de la cadena.
get_global 0 //Posicion que quedará hasta el final de la cadena.
get_global 0 
121 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
121 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
92//Caracter ACII final cadena
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
set_global 0 //Actualizar valor del puntero 
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
3
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
2//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
//--GUARDAR STRING: Se guarda el puntero del heap el numero de veces del tamaño de la cadena.
get_global 0 //Posicion que quedará hasta el final de la cadena.
get_global 0 
122 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
122 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
92//Caracter ACII final cadena
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
set_global 0 //Actualizar valor del puntero 
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
3
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
3//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
//--GUARDAR STRING: Se guarda el puntero del heap el numero de veces del tamaño de la cadena.
get_global 0 //Posicion que quedará hasta el final de la cadena.
get_global 0 
119 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
119 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
92//Caracter ACII final cadena
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
set_global 0 //Actualizar valor del puntero 
//VALOR.
set_global $calc
get_local 0 //puntero actual del stck
0//posición del objeto en el stack
add
get_local $calc //Se obtiene la posición del struct en el heap.
5  //Posición del atributo en el struct
add //Se coloca en la pilita la posición del atributo, listo para asingar.
get_local 0
3
add
get_local $calc

set_global $calc

//--Función Imprimir

//=============LLAMADA A FUNCIÓN IMPRIMIR===========================

//PARAMETRO1
get_local 0 // me posiciono en el inicio de la función actual.
0// busco la posición del parametro que voy a pasar
add  //Me posicion en el lugar del parametro
5// se coloca el tamaño de la función para poder guardar la variable
add //Se suma el tamaño del ambito para poder pasar el parametro a la posición que lo recibe.
//--GUARDAR STRING: Se guarda el puntero del heap el numero de veces del tamaño de la cadena.
get_global 0 //Posicion que quedará hasta el final de la cadena.
get_global 0 
76 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
108 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
97 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
109 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
97 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
100 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
97 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
32 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
50 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
58 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
32 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
92//Caracter ACII final cadena
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
set_global 0 //Actualizar valor del puntero 
// Traducción del valor que se va a pasar como parametro
set_local $calc //guardo el valor en la posición calculada

//LLAMADA DE LA FUNCIÓN CONCATENAR
get_local 0 //Coloca el valor del puntero al inicio de la pilita
5 //Coloca el valor del tamaño de la función al inicio de la pilita.
add //Suma el valor actual del puntero el tamaño de la función.
set_local 0 //Se cambia el valor del puntero en la stack
call $imprimir_cadena //se hace la llamada a la función para mover puntero IP

//REGRESAR PUNTERO DEL STACK
get_local 0 //Se coloca el puntero al inicio de la pilita
5 //Coloca el valor del tamaño de la función al inicio de la pilita.
diff //Resta el valo actual del puntero el tamaño de la función para retornar el ambito.
set_local 0 //Se regresa el valor del puntero en la stack.
//========================FIN IMPRIMIR==================
%c
//Valor a imprimir...
10
Print
//INICIO DE LA FUNCIÓN: PASO DE PARAMETROS--------------------
get_local 0
0
add 
5
add 
//--------INICIO CONCATENACIÓN----------

//PARAMETRO1
get_local 0 // me posiciono en el inicio de la función actual.
0// busco la posición del parametro que voy a pasar
add  //Me posicion en el lugar del parametro
5// se coloca el tamaño de la función para poder guardar la variable
add //Se suma el tamaño del ambito para poder pasar el parametro a la posición que lo recibe.
//--GUARDAR STRING: Se guarda el puntero del heap el numero de veces del tamaño de la cadena.
get_global 0 //Posicion que quedará hasta el final de la cadena.
get_global 0 
112 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
111 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
116 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
101 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
110 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
99 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
105 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
97 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
32 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
100 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
101 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
32 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
92//Caracter ACII final cadena
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
set_global 0 //Actualizar valor del puntero 
// Traducción del valor que se va a pasar como parametro
set_local $calc //guardo el valor en la posición calculada

//PARAMETRO2
get_local 0 // me posiciono en el inicio de la función actual.
1 // busco la posición del parametro que voy a pasar
add //Me posicion en el lugar del parametro
5// se coloca el tamaño de la función para poder guardar la variable
add //Se suma el tamaño del ambito para poder pasar el parametro a la posición que lo recibe.

//=============CONVERTIR VALOR ENTERO A STRING PARA CONCATENAR===========================

//PARAMETRO1
get_local 0 // me posiciono en el inicio de la función actual.
0// busco la posición del parametro que voy a pasar
add  //Me posicion en el lugar del parametro
5// se coloca el tamaño de la función para poder guardar la variable
add //Se suma el tamaño del ambito para poder pasar el parametro a la posición que lo recibe.
1 //POR SER EL SEGUNDO OPERADOR SE SUMA UNO MÁS.
add 
3
// Traducción del valor que se va a pasar como parametro
set_local $calc //guardo el valor en la posición calculada

//LLAMADA DE LA FUNCIÓN CONCATENAR
get_local 0 //Coloca el valor del puntero al inicio de la pilita
5 //Coloca el valor del tamaño de la función al inicio de la pilita.
add //Suma el valor actual del puntero el tamaño de la función.
1 //POR SER EL SEGUNDO OPERADOR SE SUMA UNO MÁS.
add 
set_local 0 //Se cambia el valor del puntero en la stack
call $double_to_int //se hace la llamada a la función para mover puntero IP

//REGRESAR PUNTERO DEL STACK
get_local 0 //Se coloca el puntero al inicio de la pilita
5 //Coloca el valor del tamaño de la función al inicio de la pilita.
diff //Resta el valo actual del puntero el tamaño de la función para retornar el ambito.
1 //POR SER EL SEGUNDO OPERADOR SE RESTA UNO MÁS.
diff 
set_local 0 //Se regresa el valor del puntero en la stack.
//========================FIN CONVERSION==================
 // Traducción del valor que se va a pasar como parametro
set_local $calc //guardo el valor en la posición calculada

//LLAMADA DE LA FUNCIÓN CONCATENAR
get_local 0 //Coloca el valor del puntero al inicio de la pilita
5 //Coloca el valor del tamaño de la función al inicio de la pilita.
add //Suma el valor actual del puntero el tamaño de la función.
set_local 0 //Se cambia el valor del puntero en la stack
call $ConcatenarString //se hace la llamada a la función para mover puntero IP

//REGRESAR PUNTERO DEL STACK
get_local 0 //Se coloca el puntero al inicio de la pilita
5 //Coloca el valor del tamaño de la función al inicio de la pilita.
diff //Resta el valo actual del puntero el tamaño de la función para retornar el ambito.
set_local 0 //Se regresa el valor del puntero en la stack.
set_local $calc
get_local 0
1
add 
5
add 

//.....INICIO POTENCIA.....

//----DECLARACION DE LA VARAIBLE QUE LLEVARÁ EL ITERADOR: i
get_local 0   //posicion actual en el puntero de la pila
4  //posición de la variable en la pila
add   //colocar la posición de la variable en la pilita
0 //valor inicial del iterador
set_local $calc   //asignación del valor en la pila
//----DECLARACION DE LA VARAIBLE QUE LLEVARÁ EL RESULTADO: resultado
get_local 0   //posicion actual en el puntero de la pila
5  //posición de la variable en la pila
add   //colocar la posición de la variable en la pilita
1 //valor inicial del resultado
set_local $calc   //asignación del valor en la pila
$l23:     //Inicio del ciclo. 
//----CONDICIÓN DEL CICLO i < base: i
get_local 0
4
add
get_local $calc

2

Lt
Eqz   // Se valida que la condición haya sido verdadera.
Br_if $l24   //Si es verdadera, hace un goto a la etiqueta verdadera.
Br $l25  //Si la condición es falsa, hace un goto a la etiqueta falsa.
$l24:  //Inicio de la lista de instrucciones. 
//----RESULTADO = RESULTADO * BASE
get_local 0
5
add
get_local 0
5
add
get_local $calc

3

Mult
set_local $calc
//----ITERADOR = ITERADOR + 1
get_local 0
4
add
get_local 0
4
add
get_local $calc

1
Add
set_local $calc
Br $l23  //Al finalizar el ciclo, se hace un goto a la etiqueta de inicio del ciclo.
$l25:  // Inicio de la etiqueta falsa o de salida del ciclo. 
//COLOCAR VALOR DEL RESULTADO EN LA CIMA.....
get_local 0
5
add
get_local $calc



//.....FIN POTENCIA.....
set_local $calc
get_local 0
2
add 
5
add 
//INDICE.
8
//TAMAÑO.
get_local 0
1 //posicion de la variable del arreglo.
add 
get_local $calc //Obtiene el valor de la posicion del arreglo.
0//numero de dimensión
add 
get_global $calc //Obtiene el valor de la posición del heap. 
Lt //Valor_Indice < Tamaño_Dimension
Eqz //Valida si es menor
br_if $l26   //salto etiqueta verdadero
br $error_arreglo  //goto etiqueta falso
$l26:    //inicio etiqueta verdadero
get_local 0
1 //posicion de la variable del arreglo.
add 
get_local $calc //Obtiene el valor de la posicion del arreglo.
1
add 
8

add //Se suma la posicion del arreglo.
get_global $calc //Se obtiene el valor de la posición del arreglo.
set_local $calc
get_local 0
3
add 
5
add 
//ESTO ES UNA LLAMADA QUE VA COMO PARAMETRO-----------......]]]]]]]]]]
//INICIO DE LA FUNCIÓN: PASO DE PARAMETROS--------------------
get_local 0
0
add 
5
add 
5
add 
get_local 0
2
add
get_local $calc
set_local $calc
get_local 0
1
add 
5
add 
5
add 
//--GUARDAR STRING: Se guarda el puntero del heap el numero de veces del tamaño de la cadena.
get_global 0 //Posicion que quedará hasta el final de la cadena.
get_global 0 
67 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
111 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
110 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
99 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
97 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
116 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
101 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
110 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
97 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
114 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
32 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
72 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
111 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
108 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
97 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
32 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
77 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
117 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
110 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
100 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
111 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
92//Caracter ACII final cadena
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
set_global 0 //Actualizar valor del puntero 
set_local $calc
//CAMBIO AMBITO AUMENTO PILA---------------------------
get_local 0 //Coloca el valor del puntero al inicio de la pilita
5//Coloca el valor del tamaño de la función al inicio de la pilita.
add //Suma el valor actual del puntero el tamaño de la función.
5
add
set_local 0 //Se cambia el valor del puntero en la stack
call $concatenar_CHAR_STRING//se hace la llamada a la función para mover puntero IP
//RETORNO DE LA FUNCION-------------
get_local 0 //Se coloca el puntero al inicio de la pilita
4
add  //se suma el valor que corresponde a la posición del retorno
get_local $calc  //Coloca el valor del retorno en la pilita
//REGRESAR PUNTERO PILA-------------------------------
get_local 0   //Se coloca el puntero al inicio de la pilita
5  //Coloca el valor del tamaño de la función al inicio de la pilita.
diff   //Resta el valo actual del puntero el tamaño de la función para retornar el ambito.
5
diff 
set_local 0  //Se regresa el valor del puntero en la stack.
set_local $calc
get_local 0
4
add 
5
add 
get_local 0
0
add
get_local $calc
set_local $calc
//CAMBIO AMBITO AUMENTO PILA---------------------------
get_local 0 //Coloca el valor del puntero al inicio de la pilita
5//Coloca el valor del tamaño de la función al inicio de la pilita.
add //Suma el valor actual del puntero el tamaño de la función.
set_local 0 //Se cambia el valor del puntero en la stack
call $imprimir_potencia_STRING_INT_INT_STRING_struct_prueba//se hace la llamada a la función para mover puntero IP
//REGRESAR PUNTERO PILA-------------------------------
get_local 0   //Se coloca el puntero al inicio de la pilita
5  //Coloca el valor del tamaño de la función al inicio de la pilita.
diff   //Resta el valo actual del puntero el tamaño de la función para retornar el ambito.
set_local 0  //Se regresa el valor del puntero en la stack.
get_local 0 //Apuntador de la pila
4//Posición donde se encuentra la variable del arreglo
add //Posición donde se guardará en la pila
 get_global 0 //Posición inicial del arreglo en el heap
set_local $calc //Se coloca el valor del puntero del heap en el stack
 
//....RESERVAR ARREGLO....

//----DECLARACION DE LA VARAIBLE QUE LLEVARÁ EL ITERADOR: i
get_local 0   //posicion actual en el puntero de la pila
5  //posición de la variable en la pila
add   //colocar la posición de la variable en la pilita
0 //valor inicial del iterador
set_local $calc   //asignación del valor en la pila
get_local 0   //posicion actual en el puntero de la pila
6  //posición de la variable en la pila
add   //colocar la posición de la variable en la pilita
//MULTIPLICACIÓN DE LAS DIMENSIONES PARA CALCULAR SU TAMAÑO.
2
2
mult
set_local $calc   //asignación del valor en la pila
//--Guardar el valor de las dimensiones al inicio del arreglo.
get_global 0
2
set_global $calc
get_global 0
1 
add 
set_global 0
get_global 0
2
set_global $calc
get_global 0
1 
add 
set_global 0
$l27:     //Inicio del ciclo. 
//----CONDICIÓN DEL CICLO i < base: i
get_local 0
5
add
get_local $calc

get_local 0
6
add
get_local $calc

Lt
Eqz   // Se valida que la condición haya sido verdadera.
Br_if $l28   //Si es verdadera, hace un goto a la etiqueta verdadera.
Br $l29  //Si la condición es falsa, hace un goto a la etiqueta falsa.
$l28:  //Inicio de la lista de instrucciones. 
//----heap[i] el valor 
get_global 0  //Puntero actual del heap
-1  //Valor inicial en la posición h[i]
set_global $calc  //Guardar valor inicial
//---H = H+1
get_global 0 //valor actual del puntero del heap
1 //Aumenta el puntero un tamaño en uno.
add //Aumento del puntero
set_global 0 //se actualiza el valor del puntero del heap.
//----ITERADOR = ITERADOR + 1
get_local 0
5
add
get_local 0
5
add
get_local $calc

1
Add
set_local $calc
Br $l27  //Al finalizar el ciclo, se hace un goto a la etiqueta de inicio del ciclo.
$l29:  // Inicio de la etiqueta falsa o de salida del ciclo. 


//.....FIN ARREGLO.....
get_local 0 //Apuntador de la pila
4//Posición donde se encuentra la variable del arreglo
add //Posición donde se guardará en la pila
 1
get_global $calc
5  //Posición del atributo en el struct
add
get_global $calc //Obtener el valor de la posición del heap.
set_local $calc //Se coloca el valor del puntero del heap en el stack
 
//--Función Imprimir

//=============LLAMADA A FUNCIÓN IMPRIMIR===========================

//PARAMETRO1
get_local 0 // me posiciono en el inicio de la función actual.
0// busco la posición del parametro que voy a pasar
add  //Me posicion en el lugar del parametro
5// se coloca el tamaño de la función para poder guardar la variable
add //Se suma el tamaño del ambito para poder pasar el parametro a la posición que lo recibe.
//--------INICIO CONCATENACIÓN----------

//PARAMETRO1
get_local 0 // me posiciono en el inicio de la función actual.
0// busco la posición del parametro que voy a pasar
add  //Me posicion en el lugar del parametro
5// se coloca el tamaño de la función para poder guardar la variable
add //Se suma el tamaño del ambito para poder pasar el parametro a la posición que lo recibe.
//--GUARDAR STRING: Se guarda el puntero del heap el numero de veces del tamaño de la cadena.
get_global 0 //Posicion que quedará hasta el final de la cadena.
get_global 0 
97 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
114 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
114 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
101 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
103 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
108 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
111 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
51 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
91 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
48 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
93 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
91 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
48 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
93 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
58 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
92//Caracter ACII final cadena
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
set_global 0 //Actualizar valor del puntero 
// Traducción del valor que se va a pasar como parametro
set_local $calc //guardo el valor en la posición calculada

//PARAMETRO2
get_local 0 // me posiciono en el inicio de la función actual.
1 // busco la posición del parametro que voy a pasar
add //Me posicion en el lugar del parametro
5// se coloca el tamaño de la función para poder guardar la variable
add //Se suma el tamaño del ambito para poder pasar el parametro a la posición que lo recibe.
//INDICE.
0
//TAMAÑO.
get_local 0
4 //posicion de la variable del arreglo.
add 
get_local $calc //Obtiene el valor de la posicion del arreglo.
0//numero de dimensión
add 
get_global $calc //Obtiene el valor de la posición del heap. 
Lt //Valor_Indice < Tamaño_Dimension
Eqz //Valida si es menor
br_if $l30   //salto etiqueta verdadero
br $error_arreglo  //goto etiqueta falso
$l30:    //inicio etiqueta verdadero
//INDICE.
0
//TAMAÑO.
get_local 0
4 //posicion de la variable del arreglo.
add 
get_local $calc //Obtiene el valor de la posicion del arreglo.
1//numero de dimensión
add 
get_global $calc //Obtiene el valor de la posición del heap. 
Lt //Valor_Indice < Tamaño_Dimension
Eqz //Valida si es menor
br_if $l31   //salto etiqueta verdadero
br $error_arreglo  //goto etiqueta falso
$l31:    //inicio etiqueta verdadero

 //-------------------CALCULO DE LA POSICIÓN DEL ARREGLO----------------------------

0

get_local 0
4 //posicion de la variable del arreglo.
add 
get_local $calc //Obtiene el valor de la posicion del arreglo.
1//numero de dimensión
add 
get_global $calc //Obtiene el valor de la posición del heap. 
mult 
0

add 
2//SE SUMA EL NUMERO DE DIMENSIONES + 1, ES DONDE INICIAN LOS VALORES DEL ARREGLO.
add 
get_local 0
4 //posicion de la variable del arreglo.
add 
get_local $calc //Obtiene el valor de la posicion del arreglo.
add 
get_global $calc
 // Traducción del valor que se va a pasar como parametro
set_local $calc //guardo el valor en la posición calculada

//LLAMADA DE LA FUNCIÓN CONCATENAR
get_local 0 //Coloca el valor del puntero al inicio de la pilita
5 //Coloca el valor del tamaño de la función al inicio de la pilita.
add //Suma el valor actual del puntero el tamaño de la función.
set_local 0 //Se cambia el valor del puntero en la stack
call $ConcatenarString //se hace la llamada a la función para mover puntero IP

//REGRESAR PUNTERO DEL STACK
get_local 0 //Se coloca el puntero al inicio de la pilita
5 //Coloca el valor del tamaño de la función al inicio de la pilita.
diff //Resta el valo actual del puntero el tamaño de la función para retornar el ambito.
set_local 0 //Se regresa el valor del puntero en la stack.
// Traducción del valor que se va a pasar como parametro
set_local $calc //guardo el valor en la posición calculada

//LLAMADA DE LA FUNCIÓN CONCATENAR
get_local 0 //Coloca el valor del puntero al inicio de la pilita
5 //Coloca el valor del tamaño de la función al inicio de la pilita.
add //Suma el valor actual del puntero el tamaño de la función.
set_local 0 //Se cambia el valor del puntero en la stack
call $imprimir_cadena //se hace la llamada a la función para mover puntero IP

//REGRESAR PUNTERO DEL STACK
get_local 0 //Se coloca el puntero al inicio de la pilita
5 //Coloca el valor del tamaño de la función al inicio de la pilita.
diff //Resta el valo actual del puntero el tamaño de la función para retornar el ambito.
set_local 0 //Se regresa el valor del puntero en la stack.
//========================FIN IMPRIMIR==================
%c
//Valor a imprimir...
10
Print

//--Función Imprimir

//=============LLAMADA A FUNCIÓN IMPRIMIR===========================

//PARAMETRO1
get_local 0 // me posiciono en el inicio de la función actual.
0// busco la posición del parametro que voy a pasar
add  //Me posicion en el lugar del parametro
5// se coloca el tamaño de la función para poder guardar la variable
add //Se suma el tamaño del ambito para poder pasar el parametro a la posición que lo recibe.
//--------INICIO CONCATENACIÓN----------

//PARAMETRO1
get_local 0 // me posiciono en el inicio de la función actual.
0// busco la posición del parametro que voy a pasar
add  //Me posicion en el lugar del parametro
5// se coloca el tamaño de la función para poder guardar la variable
add //Se suma el tamaño del ambito para poder pasar el parametro a la posición que lo recibe.
//--GUARDAR STRING: Se guarda el puntero del heap el numero de veces del tamaño de la cadena.
get_global 0 //Posicion que quedará hasta el final de la cadena.
get_global 0 
97 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
114 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
114 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
101 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
103 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
108 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
111 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
51 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
91 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
48 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
93 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
91 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
49 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
93 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
58 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
92//Caracter ACII final cadena
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
set_global 0 //Actualizar valor del puntero 
// Traducción del valor que se va a pasar como parametro
set_local $calc //guardo el valor en la posición calculada

//PARAMETRO2
get_local 0 // me posiciono en el inicio de la función actual.
1 // busco la posición del parametro que voy a pasar
add //Me posicion en el lugar del parametro
5// se coloca el tamaño de la función para poder guardar la variable
add //Se suma el tamaño del ambito para poder pasar el parametro a la posición que lo recibe.
//INDICE.
0
//TAMAÑO.
get_local 0
4 //posicion de la variable del arreglo.
add 
get_local $calc //Obtiene el valor de la posicion del arreglo.
0//numero de dimensión
add 
get_global $calc //Obtiene el valor de la posición del heap. 
Lt //Valor_Indice < Tamaño_Dimension
Eqz //Valida si es menor
br_if $l32   //salto etiqueta verdadero
br $error_arreglo  //goto etiqueta falso
$l32:    //inicio etiqueta verdadero
//INDICE.
1
//TAMAÑO.
get_local 0
4 //posicion de la variable del arreglo.
add 
get_local $calc //Obtiene el valor de la posicion del arreglo.
1//numero de dimensión
add 
get_global $calc //Obtiene el valor de la posición del heap. 
Lt //Valor_Indice < Tamaño_Dimension
Eqz //Valida si es menor
br_if $l33   //salto etiqueta verdadero
br $error_arreglo  //goto etiqueta falso
$l33:    //inicio etiqueta verdadero

 //-------------------CALCULO DE LA POSICIÓN DEL ARREGLO----------------------------

0

get_local 0
4 //posicion de la variable del arreglo.
add 
get_local $calc //Obtiene el valor de la posicion del arreglo.
1//numero de dimensión
add 
get_global $calc //Obtiene el valor de la posición del heap. 
mult 
1

add 
2//SE SUMA EL NUMERO DE DIMENSIONES + 1, ES DONDE INICIAN LOS VALORES DEL ARREGLO.
add 
get_local 0
4 //posicion de la variable del arreglo.
add 
get_local $calc //Obtiene el valor de la posicion del arreglo.
add 
get_global $calc
 // Traducción del valor que se va a pasar como parametro
set_local $calc //guardo el valor en la posición calculada

//LLAMADA DE LA FUNCIÓN CONCATENAR
get_local 0 //Coloca el valor del puntero al inicio de la pilita
5 //Coloca el valor del tamaño de la función al inicio de la pilita.
add //Suma el valor actual del puntero el tamaño de la función.
set_local 0 //Se cambia el valor del puntero en la stack
call $ConcatenarString //se hace la llamada a la función para mover puntero IP

//REGRESAR PUNTERO DEL STACK
get_local 0 //Se coloca el puntero al inicio de la pilita
5 //Coloca el valor del tamaño de la función al inicio de la pilita.
diff //Resta el valo actual del puntero el tamaño de la función para retornar el ambito.
set_local 0 //Se regresa el valor del puntero en la stack.
// Traducción del valor que se va a pasar como parametro
set_local $calc //guardo el valor en la posición calculada

//LLAMADA DE LA FUNCIÓN CONCATENAR
get_local 0 //Coloca el valor del puntero al inicio de la pilita
5 //Coloca el valor del tamaño de la función al inicio de la pilita.
add //Suma el valor actual del puntero el tamaño de la función.
set_local 0 //Se cambia el valor del puntero en la stack
call $imprimir_cadena //se hace la llamada a la función para mover puntero IP

//REGRESAR PUNTERO DEL STACK
get_local 0 //Se coloca el puntero al inicio de la pilita
5 //Coloca el valor del tamaño de la función al inicio de la pilita.
diff //Resta el valo actual del puntero el tamaño de la función para retornar el ambito.
set_local 0 //Se regresa el valor del puntero en la stack.
//========================FIN IMPRIMIR==================
%c
//Valor a imprimir...
10
Print

//--Función Imprimir

//=============LLAMADA A FUNCIÓN IMPRIMIR===========================

//PARAMETRO1
get_local 0 // me posiciono en el inicio de la función actual.
0// busco la posición del parametro que voy a pasar
add  //Me posicion en el lugar del parametro
5// se coloca el tamaño de la función para poder guardar la variable
add //Se suma el tamaño del ambito para poder pasar el parametro a la posición que lo recibe.
//--------INICIO CONCATENACIÓN----------

//PARAMETRO1
get_local 0 // me posiciono en el inicio de la función actual.
0// busco la posición del parametro que voy a pasar
add  //Me posicion en el lugar del parametro
5// se coloca el tamaño de la función para poder guardar la variable
add //Se suma el tamaño del ambito para poder pasar el parametro a la posición que lo recibe.
//--GUARDAR STRING: Se guarda el puntero del heap el numero de veces del tamaño de la cadena.
get_global 0 //Posicion que quedará hasta el final de la cadena.
get_global 0 
97 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
114 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
114 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
101 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
103 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
108 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
111 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
51 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
91 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
49 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
93 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
91 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
48 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
93 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
58 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
92//Caracter ACII final cadena
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
set_global 0 //Actualizar valor del puntero 
// Traducción del valor que se va a pasar como parametro
set_local $calc //guardo el valor en la posición calculada

//PARAMETRO2
get_local 0 // me posiciono en el inicio de la función actual.
1 // busco la posición del parametro que voy a pasar
add //Me posicion en el lugar del parametro
5// se coloca el tamaño de la función para poder guardar la variable
add //Se suma el tamaño del ambito para poder pasar el parametro a la posición que lo recibe.
//INDICE.
1
//TAMAÑO.
get_local 0
4 //posicion de la variable del arreglo.
add 
get_local $calc //Obtiene el valor de la posicion del arreglo.
0//numero de dimensión
add 
get_global $calc //Obtiene el valor de la posición del heap. 
Lt //Valor_Indice < Tamaño_Dimension
Eqz //Valida si es menor
br_if $l34   //salto etiqueta verdadero
br $error_arreglo  //goto etiqueta falso
$l34:    //inicio etiqueta verdadero
//INDICE.
0
//TAMAÑO.
get_local 0
4 //posicion de la variable del arreglo.
add 
get_local $calc //Obtiene el valor de la posicion del arreglo.
1//numero de dimensión
add 
get_global $calc //Obtiene el valor de la posición del heap. 
Lt //Valor_Indice < Tamaño_Dimension
Eqz //Valida si es menor
br_if $l35   //salto etiqueta verdadero
br $error_arreglo  //goto etiqueta falso
$l35:    //inicio etiqueta verdadero

 //-------------------CALCULO DE LA POSICIÓN DEL ARREGLO----------------------------

1

get_local 0
4 //posicion de la variable del arreglo.
add 
get_local $calc //Obtiene el valor de la posicion del arreglo.
1//numero de dimensión
add 
get_global $calc //Obtiene el valor de la posición del heap. 
mult 
0

add 
2//SE SUMA EL NUMERO DE DIMENSIONES + 1, ES DONDE INICIAN LOS VALORES DEL ARREGLO.
add 
get_local 0
4 //posicion de la variable del arreglo.
add 
get_local $calc //Obtiene el valor de la posicion del arreglo.
add 
get_global $calc
 // Traducción del valor que se va a pasar como parametro
set_local $calc //guardo el valor en la posición calculada

//LLAMADA DE LA FUNCIÓN CONCATENAR
get_local 0 //Coloca el valor del puntero al inicio de la pilita
5 //Coloca el valor del tamaño de la función al inicio de la pilita.
add //Suma el valor actual del puntero el tamaño de la función.
set_local 0 //Se cambia el valor del puntero en la stack
call $ConcatenarString //se hace la llamada a la función para mover puntero IP

//REGRESAR PUNTERO DEL STACK
get_local 0 //Se coloca el puntero al inicio de la pilita
5 //Coloca el valor del tamaño de la función al inicio de la pilita.
diff //Resta el valo actual del puntero el tamaño de la función para retornar el ambito.
set_local 0 //Se regresa el valor del puntero en la stack.
// Traducción del valor que se va a pasar como parametro
set_local $calc //guardo el valor en la posición calculada

//LLAMADA DE LA FUNCIÓN CONCATENAR
get_local 0 //Coloca el valor del puntero al inicio de la pilita
5 //Coloca el valor del tamaño de la función al inicio de la pilita.
add //Suma el valor actual del puntero el tamaño de la función.
set_local 0 //Se cambia el valor del puntero en la stack
call $imprimir_cadena //se hace la llamada a la función para mover puntero IP

//REGRESAR PUNTERO DEL STACK
get_local 0 //Se coloca el puntero al inicio de la pilita
5 //Coloca el valor del tamaño de la función al inicio de la pilita.
diff //Resta el valo actual del puntero el tamaño de la función para retornar el ambito.
set_local 0 //Se regresa el valor del puntero en la stack.
//========================FIN IMPRIMIR==================
%c
//Valor a imprimir...
10
Print

//--Función Imprimir

//=============LLAMADA A FUNCIÓN IMPRIMIR===========================

//PARAMETRO1
get_local 0 // me posiciono en el inicio de la función actual.
0// busco la posición del parametro que voy a pasar
add  //Me posicion en el lugar del parametro
5// se coloca el tamaño de la función para poder guardar la variable
add //Se suma el tamaño del ambito para poder pasar el parametro a la posición que lo recibe.
//--------INICIO CONCATENACIÓN----------

//PARAMETRO1
get_local 0 // me posiciono en el inicio de la función actual.
0// busco la posición del parametro que voy a pasar
add  //Me posicion en el lugar del parametro
5// se coloca el tamaño de la función para poder guardar la variable
add //Se suma el tamaño del ambito para poder pasar el parametro a la posición que lo recibe.
//--GUARDAR STRING: Se guarda el puntero del heap el numero de veces del tamaño de la cadena.
get_global 0 //Posicion que quedará hasta el final de la cadena.
get_global 0 
97 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
114 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
114 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
101 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
103 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
108 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
111 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
51 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
91 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
49 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
93 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
91 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
49 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
93 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
58 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
92//Caracter ACII final cadena
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
set_global 0 //Actualizar valor del puntero 
// Traducción del valor que se va a pasar como parametro
set_local $calc //guardo el valor en la posición calculada

//PARAMETRO2
get_local 0 // me posiciono en el inicio de la función actual.
1 // busco la posición del parametro que voy a pasar
add //Me posicion en el lugar del parametro
5// se coloca el tamaño de la función para poder guardar la variable
add //Se suma el tamaño del ambito para poder pasar el parametro a la posición que lo recibe.
//INDICE.
1
//TAMAÑO.
get_local 0
4 //posicion de la variable del arreglo.
add 
get_local $calc //Obtiene el valor de la posicion del arreglo.
0//numero de dimensión
add 
get_global $calc //Obtiene el valor de la posición del heap. 
Lt //Valor_Indice < Tamaño_Dimension
Eqz //Valida si es menor
br_if $l36   //salto etiqueta verdadero
br $error_arreglo  //goto etiqueta falso
$l36:    //inicio etiqueta verdadero
//INDICE.
1
//TAMAÑO.
get_local 0
4 //posicion de la variable del arreglo.
add 
get_local $calc //Obtiene el valor de la posicion del arreglo.
1//numero de dimensión
add 
get_global $calc //Obtiene el valor de la posición del heap. 
Lt //Valor_Indice < Tamaño_Dimension
Eqz //Valida si es menor
br_if $l37   //salto etiqueta verdadero
br $error_arreglo  //goto etiqueta falso
$l37:    //inicio etiqueta verdadero

 //-------------------CALCULO DE LA POSICIÓN DEL ARREGLO----------------------------

1

get_local 0
4 //posicion de la variable del arreglo.
add 
get_local $calc //Obtiene el valor de la posicion del arreglo.
1//numero de dimensión
add 
get_global $calc //Obtiene el valor de la posición del heap. 
mult 
1

add 
2//SE SUMA EL NUMERO DE DIMENSIONES + 1, ES DONDE INICIAN LOS VALORES DEL ARREGLO.
add 
get_local 0
4 //posicion de la variable del arreglo.
add 
get_local $calc //Obtiene el valor de la posicion del arreglo.
add 
get_global $calc
 // Traducción del valor que se va a pasar como parametro
set_local $calc //guardo el valor en la posición calculada

//LLAMADA DE LA FUNCIÓN CONCATENAR
get_local 0 //Coloca el valor del puntero al inicio de la pilita
5 //Coloca el valor del tamaño de la función al inicio de la pilita.
add //Suma el valor actual del puntero el tamaño de la función.
set_local 0 //Se cambia el valor del puntero en la stack
call $ConcatenarString //se hace la llamada a la función para mover puntero IP

//REGRESAR PUNTERO DEL STACK
get_local 0 //Se coloca el puntero al inicio de la pilita
5 //Coloca el valor del tamaño de la función al inicio de la pilita.
diff //Resta el valo actual del puntero el tamaño de la función para retornar el ambito.
set_local 0 //Se regresa el valor del puntero en la stack.
// Traducción del valor que se va a pasar como parametro
set_local $calc //guardo el valor en la posición calculada

//LLAMADA DE LA FUNCIÓN CONCATENAR
get_local 0 //Coloca el valor del puntero al inicio de la pilita
5 //Coloca el valor del tamaño de la función al inicio de la pilita.
add //Suma el valor actual del puntero el tamaño de la función.
set_local 0 //Se cambia el valor del puntero en la stack
call $imprimir_cadena //se hace la llamada a la función para mover puntero IP

//REGRESAR PUNTERO DEL STACK
get_local 0 //Se coloca el puntero al inicio de la pilita
5 //Coloca el valor del tamaño de la función al inicio de la pilita.
diff //Resta el valo actual del puntero el tamaño de la función para retornar el ambito.
set_local 0 //Se regresa el valor del puntero en la stack.
//========================FIN IMPRIMIR==================
%c
//Valor a imprimir...
10
Print
End
Function $imprimir_potencia_STRING_INT_INT_STRING_struct_prueba

//--Función Imprimir

//=============LLAMADA A FUNCIÓN IMPRIMIR===========================

//PARAMETRO1
get_local 0 // me posiciono en el inicio de la función actual.
0// busco la posición del parametro que voy a pasar
add  //Me posicion en el lugar del parametro
5// se coloca el tamaño de la función para poder guardar la variable
add //Se suma el tamaño del ambito para poder pasar el parametro a la posición que lo recibe.
//--------INICIO CONCATENACIÓN----------

//PARAMETRO1
get_local 0 // me posiciono en el inicio de la función actual.
0// busco la posición del parametro que voy a pasar
add  //Me posicion en el lugar del parametro
5// se coloca el tamaño de la función para poder guardar la variable
add //Se suma el tamaño del ambito para poder pasar el parametro a la posición que lo recibe.
//--GUARDAR STRING: Se guarda el puntero del heap el numero de veces del tamaño de la cadena.
get_global 0 //Posicion que quedará hasta el final de la cadena.
get_global 0 
86 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
97 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
108 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
111 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
114 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
32 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
99 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
111 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
110 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
99 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
97 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
116 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
101 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
110 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
100 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
97 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
100 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
111 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
58 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
32 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
92//Caracter ACII final cadena
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
set_global 0 //Actualizar valor del puntero 
// Traducción del valor que se va a pasar como parametro
set_local $calc //guardo el valor en la posición calculada

//PARAMETRO2
get_local 0 // me posiciono en el inicio de la función actual.
1 // busco la posición del parametro que voy a pasar
add //Me posicion en el lugar del parametro
5// se coloca el tamaño de la función para poder guardar la variable
add //Se suma el tamaño del ambito para poder pasar el parametro a la posición que lo recibe.
get_local 0
3
add
get_local $calc
 // Traducción del valor que se va a pasar como parametro
set_local $calc //guardo el valor en la posición calculada

//LLAMADA DE LA FUNCIÓN CONCATENAR
get_local 0 //Coloca el valor del puntero al inicio de la pilita
5 //Coloca el valor del tamaño de la función al inicio de la pilita.
add //Suma el valor actual del puntero el tamaño de la función.
set_local 0 //Se cambia el valor del puntero en la stack
call $ConcatenarString //se hace la llamada a la función para mover puntero IP

//REGRESAR PUNTERO DEL STACK
get_local 0 //Se coloca el puntero al inicio de la pilita
5 //Coloca el valor del tamaño de la función al inicio de la pilita.
diff //Resta el valo actual del puntero el tamaño de la función para retornar el ambito.
set_local 0 //Se regresa el valor del puntero en la stack.
// Traducción del valor que se va a pasar como parametro
set_local $calc //guardo el valor en la posición calculada

//LLAMADA DE LA FUNCIÓN CONCATENAR
get_local 0 //Coloca el valor del puntero al inicio de la pilita
5 //Coloca el valor del tamaño de la función al inicio de la pilita.
add //Suma el valor actual del puntero el tamaño de la función.
set_local 0 //Se cambia el valor del puntero en la stack
call $imprimir_cadena //se hace la llamada a la función para mover puntero IP

//REGRESAR PUNTERO DEL STACK
get_local 0 //Se coloca el puntero al inicio de la pilita
5 //Coloca el valor del tamaño de la función al inicio de la pilita.
diff //Resta el valo actual del puntero el tamaño de la función para retornar el ambito.
set_local 0 //Se regresa el valor del puntero en la stack.
//========================FIN IMPRIMIR==================
%c
//Valor a imprimir...
10
Print

//--Función Imprimir

//=============LLAMADA A FUNCIÓN IMPRIMIR===========================

//PARAMETRO1
get_local 0 // me posiciono en el inicio de la función actual.
0// busco la posición del parametro que voy a pasar
add  //Me posicion en el lugar del parametro
5// se coloca el tamaño de la función para poder guardar la variable
add //Se suma el tamaño del ambito para poder pasar el parametro a la posición que lo recibe.
//--------INICIO CONCATENACIÓN----------

//PARAMETRO1
get_local 0 // me posiciono en el inicio de la función actual.
0// busco la posición del parametro que voy a pasar
add  //Me posicion en el lugar del parametro
5// se coloca el tamaño de la función para poder guardar la variable
add //Se suma el tamaño del ambito para poder pasar el parametro a la posición que lo recibe.
//--------INICIO CONCATENACIÓN----------

//PARAMETRO1
get_local 0 // me posiciono en el inicio de la función actual.
0// busco la posición del parametro que voy a pasar
add  //Me posicion en el lugar del parametro
5// se coloca el tamaño de la función para poder guardar la variable
add //Se suma el tamaño del ambito para poder pasar el parametro a la posición que lo recibe.
get_local 0
0
add
get_local $calc
// Traducción del valor que se va a pasar como parametro
set_local $calc //guardo el valor en la posición calculada

//PARAMETRO2
get_local 0 // me posiciono en el inicio de la función actual.
1 // busco la posición del parametro que voy a pasar
add //Me posicion en el lugar del parametro
5// se coloca el tamaño de la función para poder guardar la variable
add //Se suma el tamaño del ambito para poder pasar el parametro a la posición que lo recibe.
//--GUARDAR STRING: Se guarda el puntero del heap el numero de veces del tamaño de la cadena.
get_global 0 //Posicion que quedará hasta el final de la cadena.
get_global 0 
32 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
58 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
92//Caracter ACII final cadena
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
set_global 0 //Actualizar valor del puntero 
 // Traducción del valor que se va a pasar como parametro
set_local $calc //guardo el valor en la posición calculada

//LLAMADA DE LA FUNCIÓN CONCATENAR
get_local 0 //Coloca el valor del puntero al inicio de la pilita
5 //Coloca el valor del tamaño de la función al inicio de la pilita.
add //Suma el valor actual del puntero el tamaño de la función.
set_local 0 //Se cambia el valor del puntero en la stack
call $ConcatenarString //se hace la llamada a la función para mover puntero IP

//REGRESAR PUNTERO DEL STACK
get_local 0 //Se coloca el puntero al inicio de la pilita
5 //Coloca el valor del tamaño de la función al inicio de la pilita.
diff //Resta el valo actual del puntero el tamaño de la función para retornar el ambito.
set_local 0 //Se regresa el valor del puntero en la stack.
// Traducción del valor que se va a pasar como parametro
set_local $calc //guardo el valor en la posición calculada

//PARAMETRO2
get_local 0 // me posiciono en el inicio de la función actual.
1 // busco la posición del parametro que voy a pasar
add //Me posicion en el lugar del parametro
5// se coloca el tamaño de la función para poder guardar la variable
add //Se suma el tamaño del ambito para poder pasar el parametro a la posición que lo recibe.

//=============CONVERTIR VALOR ENTERO A STRING PARA CONCATENAR===========================

//PARAMETRO1
get_local 0 // me posiciono en el inicio de la función actual.
0// busco la posición del parametro que voy a pasar
add  //Me posicion en el lugar del parametro
5// se coloca el tamaño de la función para poder guardar la variable
add //Se suma el tamaño del ambito para poder pasar el parametro a la posición que lo recibe.
1 //POR SER EL SEGUNDO OPERADOR SE SUMA UNO MÁS.
add 
get_local 0
1
add
get_local $calc
// Traducción del valor que se va a pasar como parametro
set_local $calc //guardo el valor en la posición calculada

//LLAMADA DE LA FUNCIÓN CONCATENAR
get_local 0 //Coloca el valor del puntero al inicio de la pilita
5 //Coloca el valor del tamaño de la función al inicio de la pilita.
add //Suma el valor actual del puntero el tamaño de la función.
1 //POR SER EL SEGUNDO OPERADOR SE SUMA UNO MÁS.
add 
set_local 0 //Se cambia el valor del puntero en la stack
call $double_to_int //se hace la llamada a la función para mover puntero IP

//REGRESAR PUNTERO DEL STACK
get_local 0 //Se coloca el puntero al inicio de la pilita
5 //Coloca el valor del tamaño de la función al inicio de la pilita.
diff //Resta el valo actual del puntero el tamaño de la función para retornar el ambito.
1 //POR SER EL SEGUNDO OPERADOR SE RESTA UNO MÁS.
diff 
set_local 0 //Se regresa el valor del puntero en la stack.
//========================FIN CONVERSION==================
 // Traducción del valor que se va a pasar como parametro
set_local $calc //guardo el valor en la posición calculada

//LLAMADA DE LA FUNCIÓN CONCATENAR
get_local 0 //Coloca el valor del puntero al inicio de la pilita
5 //Coloca el valor del tamaño de la función al inicio de la pilita.
add //Suma el valor actual del puntero el tamaño de la función.
set_local 0 //Se cambia el valor del puntero en la stack
call $ConcatenarString //se hace la llamada a la función para mover puntero IP

//REGRESAR PUNTERO DEL STACK
get_local 0 //Se coloca el puntero al inicio de la pilita
5 //Coloca el valor del tamaño de la función al inicio de la pilita.
diff //Resta el valo actual del puntero el tamaño de la función para retornar el ambito.
set_local 0 //Se regresa el valor del puntero en la stack.
// Traducción del valor que se va a pasar como parametro
set_local $calc //guardo el valor en la posición calculada

//LLAMADA DE LA FUNCIÓN CONCATENAR
get_local 0 //Coloca el valor del puntero al inicio de la pilita
5 //Coloca el valor del tamaño de la función al inicio de la pilita.
add //Suma el valor actual del puntero el tamaño de la función.
set_local 0 //Se cambia el valor del puntero en la stack
call $imprimir_cadena //se hace la llamada a la función para mover puntero IP

//REGRESAR PUNTERO DEL STACK
get_local 0 //Se coloca el puntero al inicio de la pilita
5 //Coloca el valor del tamaño de la función al inicio de la pilita.
diff //Resta el valo actual del puntero el tamaño de la función para retornar el ambito.
set_local 0 //Se regresa el valor del puntero en la stack.
//========================FIN IMPRIMIR==================
%c
//Valor a imprimir...
10
Print

//--Función Imprimir

//=============LLAMADA A FUNCIÓN IMPRIMIR===========================

//PARAMETRO1
get_local 0 // me posiciono en el inicio de la función actual.
0// busco la posición del parametro que voy a pasar
add  //Me posicion en el lugar del parametro
5// se coloca el tamaño de la función para poder guardar la variable
add //Se suma el tamaño del ambito para poder pasar el parametro a la posición que lo recibe.
//--------INICIO CONCATENACIÓN----------

//PARAMETRO1
get_local 0 // me posiciono en el inicio de la función actual.
0// busco la posición del parametro que voy a pasar
add  //Me posicion en el lugar del parametro
5// se coloca el tamaño de la función para poder guardar la variable
add //Se suma el tamaño del ambito para poder pasar el parametro a la posición que lo recibe.
//--GUARDAR STRING: Se guarda el puntero del heap el numero de veces del tamaño de la cadena.
get_global 0 //Posicion que quedará hasta el final de la cadena.
get_global 0 
118 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
97 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
108 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
111 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
114 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
95 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
97 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
103 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
114 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
101 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
103 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
97 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
100 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
111 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
58 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
32 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
92//Caracter ACII final cadena
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
set_global 0 //Actualizar valor del puntero 
// Traducción del valor que se va a pasar como parametro
set_local $calc //guardo el valor en la posición calculada

//PARAMETRO2
get_local 0 // me posiciono en el inicio de la función actual.
1 // busco la posición del parametro que voy a pasar
add //Me posicion en el lugar del parametro
5// se coloca el tamaño de la función para poder guardar la variable
add //Se suma el tamaño del ambito para poder pasar el parametro a la posición que lo recibe.

//=============CONVERTIR VALOR ENTERO A STRING PARA CONCATENAR===========================

//PARAMETRO1
get_local 0 // me posiciono en el inicio de la función actual.
0// busco la posición del parametro que voy a pasar
add  //Me posicion en el lugar del parametro
5// se coloca el tamaño de la función para poder guardar la variable
add //Se suma el tamaño del ambito para poder pasar el parametro a la posición que lo recibe.
1 //POR SER EL SEGUNDO OPERADOR SE SUMA UNO MÁS.
add 
get_local 0
2
add
get_local $calc
// Traducción del valor que se va a pasar como parametro
set_local $calc //guardo el valor en la posición calculada

//LLAMADA DE LA FUNCIÓN CONCATENAR
get_local 0 //Coloca el valor del puntero al inicio de la pilita
5 //Coloca el valor del tamaño de la función al inicio de la pilita.
add //Suma el valor actual del puntero el tamaño de la función.
1 //POR SER EL SEGUNDO OPERADOR SE SUMA UNO MÁS.
add 
set_local 0 //Se cambia el valor del puntero en la stack
call $double_to_int //se hace la llamada a la función para mover puntero IP

//REGRESAR PUNTERO DEL STACK
get_local 0 //Se coloca el puntero al inicio de la pilita
5 //Coloca el valor del tamaño de la función al inicio de la pilita.
diff //Resta el valo actual del puntero el tamaño de la función para retornar el ambito.
1 //POR SER EL SEGUNDO OPERADOR SE RESTA UNO MÁS.
diff 
set_local 0 //Se regresa el valor del puntero en la stack.
//========================FIN CONVERSION==================
 // Traducción del valor que se va a pasar como parametro
set_local $calc //guardo el valor en la posición calculada

//LLAMADA DE LA FUNCIÓN CONCATENAR
get_local 0 //Coloca el valor del puntero al inicio de la pilita
5 //Coloca el valor del tamaño de la función al inicio de la pilita.
add //Suma el valor actual del puntero el tamaño de la función.
set_local 0 //Se cambia el valor del puntero en la stack
call $ConcatenarString //se hace la llamada a la función para mover puntero IP

//REGRESAR PUNTERO DEL STACK
get_local 0 //Se coloca el puntero al inicio de la pilita
5 //Coloca el valor del tamaño de la función al inicio de la pilita.
diff //Resta el valo actual del puntero el tamaño de la función para retornar el ambito.
set_local 0 //Se regresa el valor del puntero en la stack.
// Traducción del valor que se va a pasar como parametro
set_local $calc //guardo el valor en la posición calculada

//LLAMADA DE LA FUNCIÓN CONCATENAR
get_local 0 //Coloca el valor del puntero al inicio de la pilita
5 //Coloca el valor del tamaño de la función al inicio de la pilita.
add //Suma el valor actual del puntero el tamaño de la función.
set_local 0 //Se cambia el valor del puntero en la stack
call $imprimir_cadena //se hace la llamada a la función para mover puntero IP

//REGRESAR PUNTERO DEL STACK
get_local 0 //Se coloca el puntero al inicio de la pilita
5 //Coloca el valor del tamaño de la función al inicio de la pilita.
diff //Resta el valo actual del puntero el tamaño de la función para retornar el ambito.
set_local 0 //Se regresa el valor del puntero en la stack.
//========================FIN IMPRIMIR==================
%c
//Valor a imprimir...
10
Print
//INICIO DE LA FUNCIÓN: PASO DE PARAMETROS--------------------
get_local 0
0
add 
5
add 
get_local 0
4
add
get_local $calc
set_local $calc
//CAMBIO AMBITO AUMENTO PILA---------------------------
get_local 0 //Coloca el valor del puntero al inicio de la pilita
5//Coloca el valor del tamaño de la función al inicio de la pilita.
add //Suma el valor actual del puntero el tamaño de la función.
set_local 0 //Se cambia el valor del puntero en la stack
call $imprimir_estructura_struct_prueba//se hace la llamada a la función para mover puntero IP
//REGRESAR PUNTERO PILA-------------------------------
get_local 0   //Se coloca el puntero al inicio de la pilita
5  //Coloca el valor del tamaño de la función al inicio de la pilita.
diff   //Resta el valo actual del puntero el tamaño de la función para retornar el ambito.
set_local 0  //Se regresa el valor del puntero en la stack.
End
Function $concatenar_CHAR_STRING
//...Inicio declaracion
get_local 0   //posicion actual en el puntero de la pila
2  //posición de la variable en la pila
add   //colocar la posición de la variable en la pilita
//--GUARDAR STRING: Se guarda el puntero del heap el numero de veces del tamaño de la cadena.
get_global 0 //Posicion que quedará hasta el final de la cadena.
get_global 0 
104 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
111 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
108 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
97 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
92//Caracter ACII final cadena
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
set_global 0 //Actualizar valor del puntero 
  //valor inicial de la variable
set_local $calc   //asignación del valor en la pila
//...Fin Declaración

//--Función Imprimir

//=============LLAMADA A FUNCIÓN IMPRIMIR===========================

//PARAMETRO1
get_local 0 // me posiciono en el inicio de la función actual.
0// busco la posición del parametro que voy a pasar
add  //Me posicion en el lugar del parametro
5// se coloca el tamaño de la función para poder guardar la variable
add //Se suma el tamaño del ambito para poder pasar el parametro a la posición que lo recibe.
get_local 0
1
add
get_local $calc
// Traducción del valor que se va a pasar como parametro
set_local $calc //guardo el valor en la posición calculada

//LLAMADA DE LA FUNCIÓN CONCATENAR
get_local 0 //Coloca el valor del puntero al inicio de la pilita
5 //Coloca el valor del tamaño de la función al inicio de la pilita.
add //Suma el valor actual del puntero el tamaño de la función.
set_local 0 //Se cambia el valor del puntero en la stack
call $imprimir_cadena //se hace la llamada a la función para mover puntero IP

//REGRESAR PUNTERO DEL STACK
get_local 0 //Se coloca el puntero al inicio de la pilita
5 //Coloca el valor del tamaño de la función al inicio de la pilita.
diff //Resta el valo actual del puntero el tamaño de la función para retornar el ambito.
set_local 0 //Se regresa el valor del puntero en la stack.
//========================FIN IMPRIMIR==================
%c
//Valor a imprimir...
10
Print

//....Ciclo For....
//...Inicio declaracion
get_local 0 //posicion actual en el puntero de la pila
3 //posición de la variable en la pila
add    //colocar la posición de la variable en la pilita
0
set_local $calc    //asignación del valor en la pila
//...Fin Declaración
  //inicializador del iterador.
$l38:     //Inicio del ciclo. 
get_local 0
3
add
get_local $calc

5

Lt
    //Codigo de la condición, se asume que el valor de la condición ya está en la pilita.
Eqz   // Se valida que la condición haya sido verdadera.
Br_if $l39   //Si es verdadera, hace un goto a la etiqueta verdadera.
Br $l40  //Si la condición es falsa, hace un goto a la etiqueta falsa.
$l39:  //Inicio de la lista de instrucciones. 
get_local 0
2
add
//--------INICIO CONCATENACIÓN----------

//PARAMETRO1
get_local 0 // me posiciono en el inicio de la función actual.
0// busco la posición del parametro que voy a pasar
add  //Me posicion en el lugar del parametro
5// se coloca el tamaño de la función para poder guardar la variable
add //Se suma el tamaño del ambito para poder pasar el parametro a la posición que lo recibe.
get_local 0
2
add
get_local $calc
// Traducción del valor que se va a pasar como parametro
set_local $calc //guardo el valor en la posición calculada

//PARAMETRO2
get_local 0 // me posiciono en el inicio de la función actual.
1 // busco la posición del parametro que voy a pasar
add //Me posicion en el lugar del parametro
5// se coloca el tamaño de la función para poder guardar la variable
add //Se suma el tamaño del ambito para poder pasar el parametro a la posición que lo recibe.
//PASAR CHAR A STRING
 get_global 0
get_global 0
//INDICE.
get_local 0
3
add
get_local $calc
//TAMAÑO.
get_local 0
0 //posicion de la variable del arreglo.
add 
get_local $calc //Obtiene el valor de la posicion del arreglo.
0//numero de dimensión
add 
get_global $calc //Obtiene el valor de la posición del heap. 
Lt //Valor_Indice < Tamaño_Dimension
Eqz //Valida si es menor
br_if $l41   //salto etiqueta verdadero
br $error_arreglo  //goto etiqueta falso
$l41:    //inicio etiqueta verdadero
get_local 0
0 //posicion de la variable del arreglo.
add 
get_local $calc //Obtiene el valor de la posicion del arreglo.
1
add 
get_local 0
3
add
get_local $calc

add //Se suma la posicion del arreglo.
get_global $calc //Se obtiene el valor de la posición del arreglo.

set_global $calc
get_global 0 
1 
add 
set_global 0
get_global 0
92
set_global $calc
get_global 0 
1 
add 
set_global 0
 // Traducción del valor que se va a pasar como parametro
set_local $calc //guardo el valor en la posición calculada

//LLAMADA DE LA FUNCIÓN CONCATENAR
get_local 0 //Coloca el valor del puntero al inicio de la pilita
5 //Coloca el valor del tamaño de la función al inicio de la pilita.
add //Suma el valor actual del puntero el tamaño de la función.
set_local 0 //Se cambia el valor del puntero en la stack
call $ConcatenarString //se hace la llamada a la función para mover puntero IP

//REGRESAR PUNTERO DEL STACK
get_local 0 //Se coloca el puntero al inicio de la pilita
5 //Coloca el valor del tamaño de la función al inicio de la pilita.
diff //Resta el valo actual del puntero el tamaño de la función para retornar el ambito.
set_local 0 //Se regresa el valor del puntero en la stack.

set_local $calc
get_local 0 
 3
add 
get_local 0
3
add
get_local $calc

1
add 
set_local $calc
 //Incremento del iterador. 
Br $l38  //Al finalizar el ciclo, se hace un goto a la etiqueta de inicio del ciclo.
$l40:  // Inicio de la etiqueta falsa o de salida del ciclo. 
//.......fin For.....
//....INICIO RETORNO....
get_local 0
4
add 
get_local 0
2
add
get_local $calc
set_local $calc
br $l42//Salida de la función.
//.....FIN RETORNO....
$l42:
End
Function $imprimir_estructura_struct_prueba

//--Función Imprimir

//=============LLAMADA A FUNCIÓN IMPRIMIR===========================

//PARAMETRO1
get_local 0 // me posiciono en el inicio de la función actual.
0// busco la posición del parametro que voy a pasar
add  //Me posicion en el lugar del parametro
1// se coloca el tamaño de la función para poder guardar la variable
add //Se suma el tamaño del ambito para poder pasar el parametro a la posición que lo recibe.
//--------INICIO CONCATENACIÓN----------

//PARAMETRO1
get_local 0 // me posiciono en el inicio de la función actual.
0// busco la posición del parametro que voy a pasar
add  //Me posicion en el lugar del parametro
1// se coloca el tamaño de la función para poder guardar la variable
add //Se suma el tamaño del ambito para poder pasar el parametro a la posición que lo recibe.
//--GUARDAR STRING: Se guarda el puntero del heap el numero de veces del tamaño de la cadena.
get_global 0 //Posicion que quedará hasta el final de la cadena.
get_global 0 
97 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
58 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
92//Caracter ACII final cadena
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
set_global 0 //Actualizar valor del puntero 
// Traducción del valor que se va a pasar como parametro
set_local $calc //guardo el valor en la posición calculada

//PARAMETRO2
get_local 0 // me posiciono en el inicio de la función actual.
1 // busco la posición del parametro que voy a pasar
add //Me posicion en el lugar del parametro
1// se coloca el tamaño de la función para poder guardar la variable
add //Se suma el tamaño del ambito para poder pasar el parametro a la posición que lo recibe.

//=============CONVERTIR VALOR ENTERO A STRING PARA CONCATENAR===========================

//PARAMETRO1
get_local 0 // me posiciono en el inicio de la función actual.
0// busco la posición del parametro que voy a pasar
add  //Me posicion en el lugar del parametro
1// se coloca el tamaño de la función para poder guardar la variable
add //Se suma el tamaño del ambito para poder pasar el parametro a la posición que lo recibe.
1 //POR SER EL SEGUNDO OPERADOR SE SUMA UNO MÁS.
add 
get_local 0 
0  //Posición del objeto en la pila.
add //Posición del inicio del struct en el stack
get_local $calc //Obtener valor del apuntador del heap.
0  //Posición del atributo en el struct
add
get_global $calc //Obtener el valor de la posición del heap.
// Traducción del valor que se va a pasar como parametro
set_local $calc //guardo el valor en la posición calculada

//LLAMADA DE LA FUNCIÓN CONCATENAR
get_local 0 //Coloca el valor del puntero al inicio de la pilita
1 //Coloca el valor del tamaño de la función al inicio de la pilita.
add //Suma el valor actual del puntero el tamaño de la función.
1 //POR SER EL SEGUNDO OPERADOR SE SUMA UNO MÁS.
add 
set_local 0 //Se cambia el valor del puntero en la stack
call $double_to_int //se hace la llamada a la función para mover puntero IP

//REGRESAR PUNTERO DEL STACK
get_local 0 //Se coloca el puntero al inicio de la pilita
1 //Coloca el valor del tamaño de la función al inicio de la pilita.
diff //Resta el valo actual del puntero el tamaño de la función para retornar el ambito.
1 //POR SER EL SEGUNDO OPERADOR SE RESTA UNO MÁS.
diff 
set_local 0 //Se regresa el valor del puntero en la stack.
//========================FIN CONVERSION==================
 // Traducción del valor que se va a pasar como parametro
set_local $calc //guardo el valor en la posición calculada

//LLAMADA DE LA FUNCIÓN CONCATENAR
get_local 0 //Coloca el valor del puntero al inicio de la pilita
1 //Coloca el valor del tamaño de la función al inicio de la pilita.
add //Suma el valor actual del puntero el tamaño de la función.
set_local 0 //Se cambia el valor del puntero en la stack
call $ConcatenarString //se hace la llamada a la función para mover puntero IP

//REGRESAR PUNTERO DEL STACK
get_local 0 //Se coloca el puntero al inicio de la pilita
1 //Coloca el valor del tamaño de la función al inicio de la pilita.
diff //Resta el valo actual del puntero el tamaño de la función para retornar el ambito.
set_local 0 //Se regresa el valor del puntero en la stack.
// Traducción del valor que se va a pasar como parametro
set_local $calc //guardo el valor en la posición calculada

//LLAMADA DE LA FUNCIÓN CONCATENAR
get_local 0 //Coloca el valor del puntero al inicio de la pilita
1 //Coloca el valor del tamaño de la función al inicio de la pilita.
add //Suma el valor actual del puntero el tamaño de la función.
set_local 0 //Se cambia el valor del puntero en la stack
call $imprimir_cadena //se hace la llamada a la función para mover puntero IP

//REGRESAR PUNTERO DEL STACK
get_local 0 //Se coloca el puntero al inicio de la pilita
1 //Coloca el valor del tamaño de la función al inicio de la pilita.
diff //Resta el valo actual del puntero el tamaño de la función para retornar el ambito.
set_local 0 //Se regresa el valor del puntero en la stack.
//========================FIN IMPRIMIR==================
%c
//Valor a imprimir...
10
Print

//--Función Imprimir

//=============LLAMADA A FUNCIÓN IMPRIMIR===========================

//PARAMETRO1
get_local 0 // me posiciono en el inicio de la función actual.
0// busco la posición del parametro que voy a pasar
add  //Me posicion en el lugar del parametro
1// se coloca el tamaño de la función para poder guardar la variable
add //Se suma el tamaño del ambito para poder pasar el parametro a la posición que lo recibe.
//--------INICIO CONCATENACIÓN----------

//PARAMETRO1
get_local 0 // me posiciono en el inicio de la función actual.
0// busco la posición del parametro que voy a pasar
add  //Me posicion en el lugar del parametro
1// se coloca el tamaño de la función para poder guardar la variable
add //Se suma el tamaño del ambito para poder pasar el parametro a la posición que lo recibe.
//--GUARDAR STRING: Se guarda el puntero del heap el numero de veces del tamaño de la cadena.
get_global 0 //Posicion que quedará hasta el final de la cadena.
get_global 0 
98 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
58 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
92//Caracter ACII final cadena
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
set_global 0 //Actualizar valor del puntero 
// Traducción del valor que se va a pasar como parametro
set_local $calc //guardo el valor en la posición calculada

//PARAMETRO2
get_local 0 // me posiciono en el inicio de la función actual.
1 // busco la posición del parametro que voy a pasar
add //Me posicion en el lugar del parametro
1// se coloca el tamaño de la función para poder guardar la variable
add //Se suma el tamaño del ambito para poder pasar el parametro a la posición que lo recibe.
get_local 0 
0  //Posición del objeto en la pila.
add //Posición del inicio del struct en el stack
get_local $calc //Obtener valor del apuntador del heap.
1  //Posición del atributo en el struct
add
get_global $calc //Obtener el valor de la posición del heap.
 // Traducción del valor que se va a pasar como parametro
set_local $calc //guardo el valor en la posición calculada

//LLAMADA DE LA FUNCIÓN CONCATENAR
get_local 0 //Coloca el valor del puntero al inicio de la pilita
1 //Coloca el valor del tamaño de la función al inicio de la pilita.
add //Suma el valor actual del puntero el tamaño de la función.
set_local 0 //Se cambia el valor del puntero en la stack
call $ConcatenarString //se hace la llamada a la función para mover puntero IP

//REGRESAR PUNTERO DEL STACK
get_local 0 //Se coloca el puntero al inicio de la pilita
1 //Coloca el valor del tamaño de la función al inicio de la pilita.
diff //Resta el valo actual del puntero el tamaño de la función para retornar el ambito.
set_local 0 //Se regresa el valor del puntero en la stack.
// Traducción del valor que se va a pasar como parametro
set_local $calc //guardo el valor en la posición calculada

//LLAMADA DE LA FUNCIÓN CONCATENAR
get_local 0 //Coloca el valor del puntero al inicio de la pilita
1 //Coloca el valor del tamaño de la función al inicio de la pilita.
add //Suma el valor actual del puntero el tamaño de la función.
set_local 0 //Se cambia el valor del puntero en la stack
call $imprimir_cadena //se hace la llamada a la función para mover puntero IP

//REGRESAR PUNTERO DEL STACK
get_local 0 //Se coloca el puntero al inicio de la pilita
1 //Coloca el valor del tamaño de la función al inicio de la pilita.
diff //Resta el valo actual del puntero el tamaño de la función para retornar el ambito.
set_local 0 //Se regresa el valor del puntero en la stack.
//========================FIN IMPRIMIR==================
%c
//Valor a imprimir...
10
Print

//--Función Imprimir

//=============LLAMADA A FUNCIÓN IMPRIMIR===========================

//PARAMETRO1
get_local 0 // me posiciono en el inicio de la función actual.
0// busco la posición del parametro que voy a pasar
add  //Me posicion en el lugar del parametro
1// se coloca el tamaño de la función para poder guardar la variable
add //Se suma el tamaño del ambito para poder pasar el parametro a la posición que lo recibe.
//--------INICIO CONCATENACIÓN----------

//PARAMETRO1
get_local 0 // me posiciono en el inicio de la función actual.
0// busco la posición del parametro que voy a pasar
add  //Me posicion en el lugar del parametro
1// se coloca el tamaño de la función para poder guardar la variable
add //Se suma el tamaño del ambito para poder pasar el parametro a la posición que lo recibe.
//--GUARDAR STRING: Se guarda el puntero del heap el numero de veces del tamaño de la cadena.
get_global 0 //Posicion que quedará hasta el final de la cadena.
get_global 0 
99 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
58 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
92//Caracter ACII final cadena
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
set_global 0 //Actualizar valor del puntero 
// Traducción del valor que se va a pasar como parametro
set_local $calc //guardo el valor en la posición calculada

//PARAMETRO2
get_local 0 // me posiciono en el inicio de la función actual.
1 // busco la posición del parametro que voy a pasar
add //Me posicion en el lugar del parametro
1// se coloca el tamaño de la función para poder guardar la variable
add //Se suma el tamaño del ambito para poder pasar el parametro a la posición que lo recibe.
//PASAR CHAR A STRING
 get_global 0
get_global 0
get_local 0 
0  //Posición del objeto en la pila.
add //Posición del inicio del struct en el stack
get_local $calc //Obtener valor del apuntador del heap.
2  //Posición del atributo en el struct
add
get_global $calc //Obtener el valor de la posición del heap.

set_global $calc
get_global 0 
1 
add 
set_global 0
get_global 0
92
set_global $calc
get_global 0 
1 
add 
set_global 0
 // Traducción del valor que se va a pasar como parametro
set_local $calc //guardo el valor en la posición calculada

//LLAMADA DE LA FUNCIÓN CONCATENAR
get_local 0 //Coloca el valor del puntero al inicio de la pilita
1 //Coloca el valor del tamaño de la función al inicio de la pilita.
add //Suma el valor actual del puntero el tamaño de la función.
set_local 0 //Se cambia el valor del puntero en la stack
call $ConcatenarString //se hace la llamada a la función para mover puntero IP

//REGRESAR PUNTERO DEL STACK
get_local 0 //Se coloca el puntero al inicio de la pilita
1 //Coloca el valor del tamaño de la función al inicio de la pilita.
diff //Resta el valo actual del puntero el tamaño de la función para retornar el ambito.
set_local 0 //Se regresa el valor del puntero en la stack.
// Traducción del valor que se va a pasar como parametro
set_local $calc //guardo el valor en la posición calculada

//LLAMADA DE LA FUNCIÓN CONCATENAR
get_local 0 //Coloca el valor del puntero al inicio de la pilita
1 //Coloca el valor del tamaño de la función al inicio de la pilita.
add //Suma el valor actual del puntero el tamaño de la función.
set_local 0 //Se cambia el valor del puntero en la stack
call $imprimir_cadena //se hace la llamada a la función para mover puntero IP

//REGRESAR PUNTERO DEL STACK
get_local 0 //Se coloca el puntero al inicio de la pilita
1 //Coloca el valor del tamaño de la función al inicio de la pilita.
diff //Resta el valo actual del puntero el tamaño de la función para retornar el ambito.
set_local 0 //Se regresa el valor del puntero en la stack.
//========================FIN IMPRIMIR==================
%c
//Valor a imprimir...
10
Print

//--Función Imprimir

//--Función Imprimir

//=============LLAMADA A FUNCIÓN IMPRIMIR===========================

//PARAMETRO1
get_local 0 // me posiciono en el inicio de la función actual.
0// busco la posición del parametro que voy a pasar
add  //Me posicion en el lugar del parametro
1// se coloca el tamaño de la función para poder guardar la variable
add //Se suma el tamaño del ambito para poder pasar el parametro a la posición que lo recibe.
//--------INICIO CONCATENACIÓN----------

//PARAMETRO1
get_local 0 // me posiciono en el inicio de la función actual.
0// busco la posición del parametro que voy a pasar
add  //Me posicion en el lugar del parametro
1// se coloca el tamaño de la función para poder guardar la variable
add //Se suma el tamaño del ambito para poder pasar el parametro a la posición que lo recibe.
//--GUARDAR STRING: Se guarda el puntero del heap el numero de veces del tamaño de la cadena.
get_global 0 //Posicion que quedará hasta el final de la cadena.
get_global 0 
101 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
58 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
92//Caracter ACII final cadena
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
set_global 0 //Actualizar valor del puntero 
// Traducción del valor que se va a pasar como parametro
set_local $calc //guardo el valor en la posición calculada

//PARAMETRO2
get_local 0 // me posiciono en el inicio de la función actual.
1 // busco la posición del parametro que voy a pasar
add //Me posicion en el lugar del parametro
1// se coloca el tamaño de la función para poder guardar la variable
add //Se suma el tamaño del ambito para poder pasar el parametro a la posición que lo recibe.

//=============CONVERTIR VALOR ENTERO A STRING PARA CONCATENAR===========================

//PARAMETRO1
get_local 0 // me posiciono en el inicio de la función actual.
0// busco la posición del parametro que voy a pasar
add  //Me posicion en el lugar del parametro
1// se coloca el tamaño de la función para poder guardar la variable
add //Se suma el tamaño del ambito para poder pasar el parametro a la posición que lo recibe.
1 //POR SER EL SEGUNDO OPERADOR SE SUMA UNO MÁS.
add 
get_local 0 
0  //Posición del objeto en la pila.
add //Posición del inicio del struct en el stack
get_local $calc //Obtener valor del apuntador del heap.
4  //Posición del atributo en el struct
add
get_global $calc //Obtener el valor de la posición del heap.
// Traducción del valor que se va a pasar como parametro
set_local $calc //guardo el valor en la posición calculada

//LLAMADA DE LA FUNCIÓN CONCATENAR
get_local 0 //Coloca el valor del puntero al inicio de la pilita
1 //Coloca el valor del tamaño de la función al inicio de la pilita.
add //Suma el valor actual del puntero el tamaño de la función.
1 //POR SER EL SEGUNDO OPERADOR SE SUMA UNO MÁS.
add 
set_local 0 //Se cambia el valor del puntero en la stack
call $double_to_int //se hace la llamada a la función para mover puntero IP

//REGRESAR PUNTERO DEL STACK
get_local 0 //Se coloca el puntero al inicio de la pilita
1 //Coloca el valor del tamaño de la función al inicio de la pilita.
diff //Resta el valo actual del puntero el tamaño de la función para retornar el ambito.
1 //POR SER EL SEGUNDO OPERADOR SE RESTA UNO MÁS.
diff 
set_local 0 //Se regresa el valor del puntero en la stack.
//========================FIN CONVERSION==================
 // Traducción del valor que se va a pasar como parametro
set_local $calc //guardo el valor en la posición calculada

//LLAMADA DE LA FUNCIÓN CONCATENAR
get_local 0 //Coloca el valor del puntero al inicio de la pilita
1 //Coloca el valor del tamaño de la función al inicio de la pilita.
add //Suma el valor actual del puntero el tamaño de la función.
set_local 0 //Se cambia el valor del puntero en la stack
call $ConcatenarString //se hace la llamada a la función para mover puntero IP

//REGRESAR PUNTERO DEL STACK
get_local 0 //Se coloca el puntero al inicio de la pilita
1 //Coloca el valor del tamaño de la función al inicio de la pilita.
diff //Resta el valo actual del puntero el tamaño de la función para retornar el ambito.
set_local 0 //Se regresa el valor del puntero en la stack.
// Traducción del valor que se va a pasar como parametro
set_local $calc //guardo el valor en la posición calculada

//LLAMADA DE LA FUNCIÓN CONCATENAR
get_local 0 //Coloca el valor del puntero al inicio de la pilita
1 //Coloca el valor del tamaño de la función al inicio de la pilita.
add //Suma el valor actual del puntero el tamaño de la función.
set_local 0 //Se cambia el valor del puntero en la stack
call $imprimir_cadena //se hace la llamada a la función para mover puntero IP

//REGRESAR PUNTERO DEL STACK
get_local 0 //Se coloca el puntero al inicio de la pilita
1 //Coloca el valor del tamaño de la función al inicio de la pilita.
diff //Resta el valo actual del puntero el tamaño de la función para retornar el ambito.
set_local 0 //Se regresa el valor del puntero en la stack.
//========================FIN IMPRIMIR==================
%c
//Valor a imprimir...
10
Print

//--Función Imprimir

//=============LLAMADA A FUNCIÓN IMPRIMIR===========================

//PARAMETRO1
get_local 0 // me posiciono en el inicio de la función actual.
0// busco la posición del parametro que voy a pasar
add  //Me posicion en el lugar del parametro
1// se coloca el tamaño de la función para poder guardar la variable
add //Se suma el tamaño del ambito para poder pasar el parametro a la posición que lo recibe.
//--------INICIO CONCATENACIÓN----------

//PARAMETRO1
get_local 0 // me posiciono en el inicio de la función actual.
0// busco la posición del parametro que voy a pasar
add  //Me posicion en el lugar del parametro
1// se coloca el tamaño de la función para poder guardar la variable
add //Se suma el tamaño del ambito para poder pasar el parametro a la posición que lo recibe.
//--GUARDAR STRING: Se guarda el puntero del heap el numero de veces del tamaño de la cadena.
get_global 0 //Posicion que quedará hasta el final de la cadena.
get_global 0 
102 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
91 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
48 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
93 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
91 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
48 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
93 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
58 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
92//Caracter ACII final cadena
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
set_global 0 //Actualizar valor del puntero 
// Traducción del valor que se va a pasar como parametro
set_local $calc //guardo el valor en la posición calculada

//PARAMETRO2
get_local 0 // me posiciono en el inicio de la función actual.
1 // busco la posición del parametro que voy a pasar
add //Me posicion en el lugar del parametro
1// se coloca el tamaño de la función para poder guardar la variable
add //Se suma el tamaño del ambito para poder pasar el parametro a la posición que lo recibe.
//ASIGNACION DE UN ARREGLO EN UN STRUCT-----------
//POSICION DEL ARREGLO EN STRUCT. ----
//INDICE.
0
//TAMAÑO.
get_local 0 //puntero actual del stck
0//posición del objeto en el stack
add
get_local $calc //Se obtiene la posición del struct en el heap.
5  //Posición del atributo en el struct
add //Se coloca en la pilita la posición del atributo, listo para asingar.
get_global $calc //Tengo el valor donde inicia el arreglo.
0//numero de dimensión
add 
get_global $calc //Obtiene el valor de la posición del heap. 
Lt //Valor_Indice < Tamaño_Dimension
Eqz //Valida si es menor
br_if $l43   //salto etiqueta verdadero
br $error_arreglo  //goto etiqueta falso
$l43:    //inicio etiqueta verdadero
//INDICE.
0
//TAMAÑO.
get_local 0 //puntero actual del stck
0//posición del objeto en el stack
add
get_local $calc //Se obtiene la posición del struct en el heap.
5  //Posición del atributo en el struct
add //Se coloca en la pilita la posición del atributo, listo para asingar.
get_global $calc //Tengo el valor donde inicia el arreglo.
1//numero de dimensión
add 
get_global $calc //Obtiene el valor de la posición del heap. 
Lt //Valor_Indice < Tamaño_Dimension
Eqz //Valida si es menor
br_if $l44   //salto etiqueta verdadero
br $error_arreglo  //goto etiqueta falso
$l44:    //inicio etiqueta verdadero

 //-------------------CALCULO DE LA POSICIÓN DEL ARREGLO----------------------------

0

get_local 0 //puntero actual del stck
0//posición del objeto en el stack
add
get_local $calc //Se obtiene la posición del struct en el heap.
5  //Posición del atributo en el struct
add //Se coloca en la pilita la posición del atributo, listo para asingar.
get_global $calc //Tengo el valor donde inicia el arreglo.
1//numero de dimensión
add 
get_global $calc //Obtiene el valor de la posición del heap. 
mult 
0

add 
2//SE SUMA EL NUMERO DE DIMENSIONES + 1, ES DONDE INICIAN LOS VALORES DEL ARREGLO.
add 
get_local 0 //puntero actual del stck
0//posición del objeto en el stack
add
get_local $calc //Se obtiene la posición del struct en el heap.
5  //Posición del atributo en el struct
add //Se coloca en la pilita la posición del atributo, listo para asingar.
get_global $calc //Tengo el valor donde inicia el arreglo.
add
get_global $calc
 // Traducción del valor que se va a pasar como parametro
set_local $calc //guardo el valor en la posición calculada

//LLAMADA DE LA FUNCIÓN CONCATENAR
get_local 0 //Coloca el valor del puntero al inicio de la pilita
1 //Coloca el valor del tamaño de la función al inicio de la pilita.
add //Suma el valor actual del puntero el tamaño de la función.
set_local 0 //Se cambia el valor del puntero en la stack
call $ConcatenarString //se hace la llamada a la función para mover puntero IP

//REGRESAR PUNTERO DEL STACK
get_local 0 //Se coloca el puntero al inicio de la pilita
1 //Coloca el valor del tamaño de la función al inicio de la pilita.
diff //Resta el valo actual del puntero el tamaño de la función para retornar el ambito.
set_local 0 //Se regresa el valor del puntero en la stack.
// Traducción del valor que se va a pasar como parametro
set_local $calc //guardo el valor en la posición calculada

//LLAMADA DE LA FUNCIÓN CONCATENAR
get_local 0 //Coloca el valor del puntero al inicio de la pilita
1 //Coloca el valor del tamaño de la función al inicio de la pilita.
add //Suma el valor actual del puntero el tamaño de la función.
set_local 0 //Se cambia el valor del puntero en la stack
call $imprimir_cadena //se hace la llamada a la función para mover puntero IP

//REGRESAR PUNTERO DEL STACK
get_local 0 //Se coloca el puntero al inicio de la pilita
1 //Coloca el valor del tamaño de la función al inicio de la pilita.
diff //Resta el valo actual del puntero el tamaño de la función para retornar el ambito.
set_local 0 //Se regresa el valor del puntero en la stack.
//========================FIN IMPRIMIR==================
%c
//Valor a imprimir...
10
Print

//--Función Imprimir

//=============LLAMADA A FUNCIÓN IMPRIMIR===========================

//PARAMETRO1
get_local 0 // me posiciono en el inicio de la función actual.
0// busco la posición del parametro que voy a pasar
add  //Me posicion en el lugar del parametro
1// se coloca el tamaño de la función para poder guardar la variable
add //Se suma el tamaño del ambito para poder pasar el parametro a la posición que lo recibe.
//--------INICIO CONCATENACIÓN----------

//PARAMETRO1
get_local 0 // me posiciono en el inicio de la función actual.
0// busco la posición del parametro que voy a pasar
add  //Me posicion en el lugar del parametro
1// se coloca el tamaño de la función para poder guardar la variable
add //Se suma el tamaño del ambito para poder pasar el parametro a la posición que lo recibe.
//--GUARDAR STRING: Se guarda el puntero del heap el numero de veces del tamaño de la cadena.
get_global 0 //Posicion que quedará hasta el final de la cadena.
get_global 0 
102 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
91 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
48 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
93 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
91 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
49 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
93 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
58 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
92//Caracter ACII final cadena
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
set_global 0 //Actualizar valor del puntero 
// Traducción del valor que se va a pasar como parametro
set_local $calc //guardo el valor en la posición calculada

//PARAMETRO2
get_local 0 // me posiciono en el inicio de la función actual.
1 // busco la posición del parametro que voy a pasar
add //Me posicion en el lugar del parametro
1// se coloca el tamaño de la función para poder guardar la variable
add //Se suma el tamaño del ambito para poder pasar el parametro a la posición que lo recibe.
//ASIGNACION DE UN ARREGLO EN UN STRUCT-----------
//POSICION DEL ARREGLO EN STRUCT. ----
//INDICE.
0
//TAMAÑO.
get_local 0 //puntero actual del stck
0//posición del objeto en el stack
add
get_local $calc //Se obtiene la posición del struct en el heap.
5  //Posición del atributo en el struct
add //Se coloca en la pilita la posición del atributo, listo para asingar.
get_global $calc //Tengo el valor donde inicia el arreglo.
0//numero de dimensión
add 
get_global $calc //Obtiene el valor de la posición del heap. 
Lt //Valor_Indice < Tamaño_Dimension
Eqz //Valida si es menor
br_if $l45   //salto etiqueta verdadero
br $error_arreglo  //goto etiqueta falso
$l45:    //inicio etiqueta verdadero
//INDICE.
1
//TAMAÑO.
get_local 0 //puntero actual del stck
0//posición del objeto en el stack
add
get_local $calc //Se obtiene la posición del struct en el heap.
5  //Posición del atributo en el struct
add //Se coloca en la pilita la posición del atributo, listo para asingar.
get_global $calc //Tengo el valor donde inicia el arreglo.
1//numero de dimensión
add 
get_global $calc //Obtiene el valor de la posición del heap. 
Lt //Valor_Indice < Tamaño_Dimension
Eqz //Valida si es menor
br_if $l46   //salto etiqueta verdadero
br $error_arreglo  //goto etiqueta falso
$l46:    //inicio etiqueta verdadero

 //-------------------CALCULO DE LA POSICIÓN DEL ARREGLO----------------------------

0

get_local 0 //puntero actual del stck
0//posición del objeto en el stack
add
get_local $calc //Se obtiene la posición del struct en el heap.
5  //Posición del atributo en el struct
add //Se coloca en la pilita la posición del atributo, listo para asingar.
get_global $calc //Tengo el valor donde inicia el arreglo.
1//numero de dimensión
add 
get_global $calc //Obtiene el valor de la posición del heap. 
mult 
1

add 
2//SE SUMA EL NUMERO DE DIMENSIONES + 1, ES DONDE INICIAN LOS VALORES DEL ARREGLO.
add 
get_local 0 //puntero actual del stck
0//posición del objeto en el stack
add
get_local $calc //Se obtiene la posición del struct en el heap.
5  //Posición del atributo en el struct
add //Se coloca en la pilita la posición del atributo, listo para asingar.
get_global $calc //Tengo el valor donde inicia el arreglo.
add
get_global $calc
 // Traducción del valor que se va a pasar como parametro
set_local $calc //guardo el valor en la posición calculada

//LLAMADA DE LA FUNCIÓN CONCATENAR
get_local 0 //Coloca el valor del puntero al inicio de la pilita
1 //Coloca el valor del tamaño de la función al inicio de la pilita.
add //Suma el valor actual del puntero el tamaño de la función.
set_local 0 //Se cambia el valor del puntero en la stack
call $ConcatenarString //se hace la llamada a la función para mover puntero IP

//REGRESAR PUNTERO DEL STACK
get_local 0 //Se coloca el puntero al inicio de la pilita
1 //Coloca el valor del tamaño de la función al inicio de la pilita.
diff //Resta el valo actual del puntero el tamaño de la función para retornar el ambito.
set_local 0 //Se regresa el valor del puntero en la stack.
// Traducción del valor que se va a pasar como parametro
set_local $calc //guardo el valor en la posición calculada

//LLAMADA DE LA FUNCIÓN CONCATENAR
get_local 0 //Coloca el valor del puntero al inicio de la pilita
1 //Coloca el valor del tamaño de la función al inicio de la pilita.
add //Suma el valor actual del puntero el tamaño de la función.
set_local 0 //Se cambia el valor del puntero en la stack
call $imprimir_cadena //se hace la llamada a la función para mover puntero IP

//REGRESAR PUNTERO DEL STACK
get_local 0 //Se coloca el puntero al inicio de la pilita
1 //Coloca el valor del tamaño de la función al inicio de la pilita.
diff //Resta el valo actual del puntero el tamaño de la función para retornar el ambito.
set_local 0 //Se regresa el valor del puntero en la stack.
//========================FIN IMPRIMIR==================
%c
//Valor a imprimir...
10
Print

//--Función Imprimir

//=============LLAMADA A FUNCIÓN IMPRIMIR===========================

//PARAMETRO1
get_local 0 // me posiciono en el inicio de la función actual.
0// busco la posición del parametro que voy a pasar
add  //Me posicion en el lugar del parametro
1// se coloca el tamaño de la función para poder guardar la variable
add //Se suma el tamaño del ambito para poder pasar el parametro a la posición que lo recibe.
//--------INICIO CONCATENACIÓN----------

//PARAMETRO1
get_local 0 // me posiciono en el inicio de la función actual.
0// busco la posición del parametro que voy a pasar
add  //Me posicion en el lugar del parametro
1// se coloca el tamaño de la función para poder guardar la variable
add //Se suma el tamaño del ambito para poder pasar el parametro a la posición que lo recibe.
//--GUARDAR STRING: Se guarda el puntero del heap el numero de veces del tamaño de la cadena.
get_global 0 //Posicion que quedará hasta el final de la cadena.
get_global 0 
102 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
91 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
49 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
93 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
91 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
48 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
93 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
58 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
92//Caracter ACII final cadena
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
set_global 0 //Actualizar valor del puntero 
// Traducción del valor que se va a pasar como parametro
set_local $calc //guardo el valor en la posición calculada

//PARAMETRO2
get_local 0 // me posiciono en el inicio de la función actual.
1 // busco la posición del parametro que voy a pasar
add //Me posicion en el lugar del parametro
1// se coloca el tamaño de la función para poder guardar la variable
add //Se suma el tamaño del ambito para poder pasar el parametro a la posición que lo recibe.
//ASIGNACION DE UN ARREGLO EN UN STRUCT-----------
//POSICION DEL ARREGLO EN STRUCT. ----
//INDICE.
1
//TAMAÑO.
get_local 0 //puntero actual del stck
0//posición del objeto en el stack
add
get_local $calc //Se obtiene la posición del struct en el heap.
5  //Posición del atributo en el struct
add //Se coloca en la pilita la posición del atributo, listo para asingar.
get_global $calc //Tengo el valor donde inicia el arreglo.
0//numero de dimensión
add 
get_global $calc //Obtiene el valor de la posición del heap. 
Lt //Valor_Indice < Tamaño_Dimension
Eqz //Valida si es menor
br_if $l47   //salto etiqueta verdadero
br $error_arreglo  //goto etiqueta falso
$l47:    //inicio etiqueta verdadero
//INDICE.
0
//TAMAÑO.
get_local 0 //puntero actual del stck
0//posición del objeto en el stack
add
get_local $calc //Se obtiene la posición del struct en el heap.
5  //Posición del atributo en el struct
add //Se coloca en la pilita la posición del atributo, listo para asingar.
get_global $calc //Tengo el valor donde inicia el arreglo.
1//numero de dimensión
add 
get_global $calc //Obtiene el valor de la posición del heap. 
Lt //Valor_Indice < Tamaño_Dimension
Eqz //Valida si es menor
br_if $l48   //salto etiqueta verdadero
br $error_arreglo  //goto etiqueta falso
$l48:    //inicio etiqueta verdadero

 //-------------------CALCULO DE LA POSICIÓN DEL ARREGLO----------------------------

1

get_local 0 //puntero actual del stck
0//posición del objeto en el stack
add
get_local $calc //Se obtiene la posición del struct en el heap.
5  //Posición del atributo en el struct
add //Se coloca en la pilita la posición del atributo, listo para asingar.
get_global $calc //Tengo el valor donde inicia el arreglo.
1//numero de dimensión
add 
get_global $calc //Obtiene el valor de la posición del heap. 
mult 
0

add 
2//SE SUMA EL NUMERO DE DIMENSIONES + 1, ES DONDE INICIAN LOS VALORES DEL ARREGLO.
add 
get_local 0 //puntero actual del stck
0//posición del objeto en el stack
add
get_local $calc //Se obtiene la posición del struct en el heap.
5  //Posición del atributo en el struct
add //Se coloca en la pilita la posición del atributo, listo para asingar.
get_global $calc //Tengo el valor donde inicia el arreglo.
add
get_global $calc
 // Traducción del valor que se va a pasar como parametro
set_local $calc //guardo el valor en la posición calculada

//LLAMADA DE LA FUNCIÓN CONCATENAR
get_local 0 //Coloca el valor del puntero al inicio de la pilita
1 //Coloca el valor del tamaño de la función al inicio de la pilita.
add //Suma el valor actual del puntero el tamaño de la función.
set_local 0 //Se cambia el valor del puntero en la stack
call $ConcatenarString //se hace la llamada a la función para mover puntero IP

//REGRESAR PUNTERO DEL STACK
get_local 0 //Se coloca el puntero al inicio de la pilita
1 //Coloca el valor del tamaño de la función al inicio de la pilita.
diff //Resta el valo actual del puntero el tamaño de la función para retornar el ambito.
set_local 0 //Se regresa el valor del puntero en la stack.
// Traducción del valor que se va a pasar como parametro
set_local $calc //guardo el valor en la posición calculada

//LLAMADA DE LA FUNCIÓN CONCATENAR
get_local 0 //Coloca el valor del puntero al inicio de la pilita
1 //Coloca el valor del tamaño de la función al inicio de la pilita.
add //Suma el valor actual del puntero el tamaño de la función.
set_local 0 //Se cambia el valor del puntero en la stack
call $imprimir_cadena //se hace la llamada a la función para mover puntero IP

//REGRESAR PUNTERO DEL STACK
get_local 0 //Se coloca el puntero al inicio de la pilita
1 //Coloca el valor del tamaño de la función al inicio de la pilita.
diff //Resta el valo actual del puntero el tamaño de la función para retornar el ambito.
set_local 0 //Se regresa el valor del puntero en la stack.
//========================FIN IMPRIMIR==================
%c
//Valor a imprimir...
10
Print

//--Función Imprimir

//=============LLAMADA A FUNCIÓN IMPRIMIR===========================

//PARAMETRO1
get_local 0 // me posiciono en el inicio de la función actual.
0// busco la posición del parametro que voy a pasar
add  //Me posicion en el lugar del parametro
1// se coloca el tamaño de la función para poder guardar la variable
add //Se suma el tamaño del ambito para poder pasar el parametro a la posición que lo recibe.
//--------INICIO CONCATENACIÓN----------

//PARAMETRO1
get_local 0 // me posiciono en el inicio de la función actual.
0// busco la posición del parametro que voy a pasar
add  //Me posicion en el lugar del parametro
1// se coloca el tamaño de la función para poder guardar la variable
add //Se suma el tamaño del ambito para poder pasar el parametro a la posición que lo recibe.
//--GUARDAR STRING: Se guarda el puntero del heap el numero de veces del tamaño de la cadena.
get_global 0 //Posicion que quedará hasta el final de la cadena.
get_global 0 
102 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
91 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
49 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
93 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
91 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
49 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
93 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
58 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
92//Caracter ACII final cadena
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
set_global 0 //Actualizar valor del puntero 
// Traducción del valor que se va a pasar como parametro
set_local $calc //guardo el valor en la posición calculada

//PARAMETRO2
get_local 0 // me posiciono en el inicio de la función actual.
1 // busco la posición del parametro que voy a pasar
add //Me posicion en el lugar del parametro
1// se coloca el tamaño de la función para poder guardar la variable
add //Se suma el tamaño del ambito para poder pasar el parametro a la posición que lo recibe.
//ASIGNACION DE UN ARREGLO EN UN STRUCT-----------
//POSICION DEL ARREGLO EN STRUCT. ----
//INDICE.
1
//TAMAÑO.
get_local 0 //puntero actual del stck
0//posición del objeto en el stack
add
get_local $calc //Se obtiene la posición del struct en el heap.
5  //Posición del atributo en el struct
add //Se coloca en la pilita la posición del atributo, listo para asingar.
get_global $calc //Tengo el valor donde inicia el arreglo.
0//numero de dimensión
add 
get_global $calc //Obtiene el valor de la posición del heap. 
Lt //Valor_Indice < Tamaño_Dimension
Eqz //Valida si es menor
br_if $l49   //salto etiqueta verdadero
br $error_arreglo  //goto etiqueta falso
$l49:    //inicio etiqueta verdadero
//INDICE.
1
//TAMAÑO.
get_local 0 //puntero actual del stck
0//posición del objeto en el stack
add
get_local $calc //Se obtiene la posición del struct en el heap.
5  //Posición del atributo en el struct
add //Se coloca en la pilita la posición del atributo, listo para asingar.
get_global $calc //Tengo el valor donde inicia el arreglo.
1//numero de dimensión
add 
get_global $calc //Obtiene el valor de la posición del heap. 
Lt //Valor_Indice < Tamaño_Dimension
Eqz //Valida si es menor
br_if $l50   //salto etiqueta verdadero
br $error_arreglo  //goto etiqueta falso
$l50:    //inicio etiqueta verdadero

 //-------------------CALCULO DE LA POSICIÓN DEL ARREGLO----------------------------

1

get_local 0 //puntero actual del stck
0//posición del objeto en el stack
add
get_local $calc //Se obtiene la posición del struct en el heap.
5  //Posición del atributo en el struct
add //Se coloca en la pilita la posición del atributo, listo para asingar.
get_global $calc //Tengo el valor donde inicia el arreglo.
1//numero de dimensión
add 
get_global $calc //Obtiene el valor de la posición del heap. 
mult 
1

add 
2//SE SUMA EL NUMERO DE DIMENSIONES + 1, ES DONDE INICIAN LOS VALORES DEL ARREGLO.
add 
get_local 0 //puntero actual del stck
0//posición del objeto en el stack
add
get_local $calc //Se obtiene la posición del struct en el heap.
5  //Posición del atributo en el struct
add //Se coloca en la pilita la posición del atributo, listo para asingar.
get_global $calc //Tengo el valor donde inicia el arreglo.
add
get_global $calc
 // Traducción del valor que se va a pasar como parametro
set_local $calc //guardo el valor en la posición calculada

//LLAMADA DE LA FUNCIÓN CONCATENAR
get_local 0 //Coloca el valor del puntero al inicio de la pilita
1 //Coloca el valor del tamaño de la función al inicio de la pilita.
add //Suma el valor actual del puntero el tamaño de la función.
set_local 0 //Se cambia el valor del puntero en la stack
call $ConcatenarString //se hace la llamada a la función para mover puntero IP

//REGRESAR PUNTERO DEL STACK
get_local 0 //Se coloca el puntero al inicio de la pilita
1 //Coloca el valor del tamaño de la función al inicio de la pilita.
diff //Resta el valo actual del puntero el tamaño de la función para retornar el ambito.
set_local 0 //Se regresa el valor del puntero en la stack.
// Traducción del valor que se va a pasar como parametro
set_local $calc //guardo el valor en la posición calculada

//LLAMADA DE LA FUNCIÓN CONCATENAR
get_local 0 //Coloca el valor del puntero al inicio de la pilita
1 //Coloca el valor del tamaño de la función al inicio de la pilita.
add //Suma el valor actual del puntero el tamaño de la función.
set_local 0 //Se cambia el valor del puntero en la stack
call $imprimir_cadena //se hace la llamada a la función para mover puntero IP

//REGRESAR PUNTERO DEL STACK
get_local 0 //Se coloca el puntero al inicio de la pilita
1 //Coloca el valor del tamaño de la función al inicio de la pilita.
diff //Resta el valo actual del puntero el tamaño de la función para retornar el ambito.
set_local 0 //Se regresa el valor del puntero en la stack.
//========================FIN IMPRIMIR==================
%c
//Valor a imprimir...
10
Print
End
Function $llenar_estructura
1
get_global $calc
0  //Posición del atributo en el struct
add //Se coloca en la pilita la posición del atributo, listo para asingar.
999

set_global $calc
1
get_global $calc
1  //Posición del atributo en el struct
add //Se coloca en la pilita la posición del atributo, listo para asingar.
//--GUARDAR STRING: Se guarda el puntero del heap el numero de veces del tamaño de la cadena.
get_global 0 //Posicion que quedará hasta el final de la cadena.
get_global 0 
69 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
115 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
116 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
114 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
117 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
99 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
116 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
117 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
114 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
97 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
32 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
108 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
108 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
101 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
110 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
97 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
92//Caracter ACII final cadena
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
set_global 0 //Actualizar valor del puntero 

set_global $calc
1
get_global $calc
2  //Posición del atributo en el struct
add //Se coloca en la pilita la posición del atributo, listo para asingar.
85

set_global $calc
1
get_global $calc
3  //Posición del atributo en el struct
add //Se coloca en la pilita la posición del atributo, listo para asingar.
1

set_global $calc
1
get_global $calc
4  //Posición del atributo en el struct
add //Se coloca en la pilita la posición del atributo, listo para asingar.
99999.99

set_global $calc
1
get_global $calc
5  //Posición del atributo en el struct
add //Se coloca en la pilita la posición del atributo, listo para asingar.
get_global $calc
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE PARA ATRIBUTO{}{}{}{}------------------.....------
//--GUARDAR STRING: Se guarda el puntero del heap el numero de veces del tamaño de la cadena.
get_global 0 //Posicion que quedará hasta el final de la cadena.
get_global 0 
97 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
97 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
92//Caracter ACII final cadena
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
set_global 0 //Actualizar valor del puntero 
//VALOR.
tee_global $calc
1//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE PARA ATRIBUTO{}{}{}{}------------------.....------
//--GUARDAR STRING: Se guarda el puntero del heap el numero de veces del tamaño de la cadena.
get_global 0 //Posicion que quedará hasta el final de la cadena.
get_global 0 
98 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
98 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
92//Caracter ACII final cadena
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
set_global 0 //Actualizar valor del puntero 
//VALOR.
tee_global $calc
1//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE PARA ATRIBUTO{}{}{}{}------------------.....------
//--GUARDAR STRING: Se guarda el puntero del heap el numero de veces del tamaño de la cadena.
get_global 0 //Posicion que quedará hasta el final de la cadena.
get_global 0 
99 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
99 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
92//Caracter ACII final cadena
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
set_global 0 //Actualizar valor del puntero 
//VALOR.
tee_global $calc
1//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE PARA ATRIBUTO{}{}{}{}------------------.....------
//--GUARDAR STRING: Se guarda el puntero del heap el numero de veces del tamaño de la cadena.
get_global 0 //Posicion que quedará hasta el final de la cadena.
get_global 0 
100 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
100 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
92//Caracter ACII final cadena
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
set_global 0 //Actualizar valor del puntero 
//VALOR.
tee_global $calc
1//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
br_if $l51
$l51:
End
Function $ConcatenarString
get_global 0 //VALOR DONDE INICIA LA CONCATENACIÓN.
get_local 0   //posicion actual en el puntero de la pila
2  //posición de la variable en la pila
add   //colocar la posición de la variable en la pilita
0 //valor inicial del iterador
set_local $calc   //asignación del valor en la pila
$l54:
get_local 0 //Posición del primer parametro
get_local $calc 
get_local 0
2
add
get_local $calc

add //Valor de la posición del caracter actual
get_global $calc //obtengo el valor del caracter
92 //valor del caracter del final de cadena
diff 
eqz  //verifica que los caracteres sean iguales
br_if $l52   //salto etiqueta verdadero
br $l53  //goto etiqueta falso
$l52:    //inicio etiqueta verdadero
get_global 0 //valor actual del apuntador del heap
get_local 0 //Posición del primer parametro en el heap
get_local $calc 
get_local 0
2
add
get_local $calc

add //Valor de la posición del caracter actual
get_global $calc //Obtengo el valor del caracter
set_global $calc //Guardo el valor del caracter en la posicion actual del heap
get_global 0
1 
add 
set_global 0 //Aumente el valor del puntero del heap.
 //----ITERADOR = ITERADOR + 1
get_local 0
2
add
get_local 0
2
add
get_local $calc

1
Add
set_local $calc
br $l54
$l53:
get_local 0   //posicion actual en el puntero de la pila
2  //posición de la variable en la pila
add   //colocar la posición de la variable en la pilita
0 //valor inicial del iterador
set_local $calc   //asignación del valor en la pila
$l55:
get_local 0 //Posición del primer parametro
1 
add 
get_local $calc
get_local 0
2
add
get_local $calc

add //Valor de la posición del caracter actual
get_global $calc //obtengo el valor del caracter
92 //valor del caracter del final de cadena
diff 
eqz  //verifica que los caracteres sean iguales
br_if $l56   //salto etiqueta verdadero
br $l57  //goto etiqueta falso
$l56:    //inicio etiqueta verdadero
get_global 0 //valor actual del apuntador del heap
get_local 0 //Posición del primer parametro
1 
add 
get_local $calc
get_local 0
2
add
get_local $calc

add //Valor de la posición del caracter actual
get_global $calc //Obtengo el valor del caracter
set_global $calc //Guardo el valor del caracter en la posicion actual del heap
get_global 0
1 
add 
set_global 0 //Aumente el valor del puntero del heap.
 //----ITERADOR = ITERADOR + 1
get_local 0
2
add
get_local 0
2
add
get_local $calc

1
Add
set_local $calc
br $l55
$l57:
get_global 0 //valor actual del heap
92 //caracter final de la concatenación
set_global $calc //Se copia el final de cadena
get_global 0 //valor actual del heap 
1 
add 
set_global 0 
End



Function $double_to_int
get_global 0 //POSICION DONDE INICIA EL VALOR EN STRING 

//VALIDAR QUE EL NUMERO A CONVERTIR SEA NEGATIVO.
get_local 0 //Coloca el valor del puntero al inicio de la pilita
get_local $calc
0
Lt //numero<0
eqz 
br_if $l58
br $l59
$l58:
get_local 0 //POSICION PARA ACTUALIZAR VALOR.
get_local 0 //Coloca el valor del puntero al inicio de la pilita
get_local $calc
-1
mult 
set_local $calc
get_global 0
45
set_global $calc
get_global 0
1 
add 
set_global 0
$l59:
//========================INICIO LLAMADA A INT_TO_STRING==================

//PARAMETRO1
get_local 0 // me posiciono en el inicio de la función actual.
0// busco la posición del parametro que voy a pasar
add  //Me posicion en el lugar del parametro
1// se coloca el tamaño de la función para poder guardar la variable
add //Se suma el tamaño del ambito para poder pasar el parametro a la posición que lo recibe.
get_local 0
get_local $calc
// Traducción del valor que se va a pasar como parametro
get_local 0
get_local $calc
// VALOR DEL PARAMETRO
1 
mod
diff //RESTA: VALOR-(VALOR%1) = PARTE ENTERA.
set_local $calc //guardo el valor en la posición calculada

//LLAMADA DE LA FUNCIÓN INT_TOSTRING
get_local 0 //Coloca el valor del puntero al inicio de la pilita
1 //Coloca el valor del tamaño de la función al inicio de la pilita.
add //Suma el valor actual del puntero el tamaño de la función.
set_local 0 //Se cambia el valor del puntero en la stack
call $int_to_string //se hace la llamada a la función para mover puntero IP

//REGRESAR PUNTERO DEL STACK
get_local 0 //Se coloca el puntero al inicio de la pilita
1 //Coloca el valor del tamaño de la función al inicio de la pilita.
diff //Resta el valo actual del puntero el tamaño de la función para retornar el ambito.
set_local 0 //Se regresa el valor del puntero en la stack.
//========================FIN CONVERSION ENTERA.==================
get_local 0 
get_local $calc //VALOR DEL PARAMETRO
1 
mod
br_if $l60
br $l61
$l61:

 //SE CONCATENA EL PUNTO PARA SEPARAR ENTERO DE DECIMAL
get_global 0
46 //ASCII DEL PUNTO
set_global $calc
get_global 0 //valor actual del heap 
1 
add 
set_global 0 
//========================OBTENER LA PARTE DECIMAL DEL NUMERO.==================
get_local 0 
get_local 0 
get_local $calc //VALOR DEL PARAMETRO
1 
mod
100
mult //multiplico el decimal * 100 y lo convierto a cadena.
set_local $calc //Actualizo el valor del parametro.
//========================INICIO LLAMADA A INT_TO_STRING==================

//PARAMETRO1
get_local 0 // me posiciono en el inicio de la función actual.
0// busco la posición del parametro que voy a pasar
add  //Me posicion en el lugar del parametro
1// se coloca el tamaño de la función para poder guardar la variable
add //Se suma el tamaño del ambito para poder pasar el parametro a la posición que lo recibe.
get_local 0
get_local $calc
// Traducción del valor que se va a pasar como parametro
set_local $calc //guardo el valor en la posición calculada

//LLAMADA DE LA FUNCIÓN INT_TOSTRING
get_local 0 //Coloca el valor del puntero al inicio de la pilita
1 //Coloca el valor del tamaño de la función al inicio de la pilita.
add //Suma el valor actual del puntero el tamaño de la función.
set_local 0 //Se cambia el valor del puntero en la stack
call $int_to_string //se hace la llamada a la función para mover puntero IP

//REGRESAR PUNTERO DEL STACK
get_local 0 //Se coloca el puntero al inicio de la pilita
1 //Coloca el valor del tamaño de la función al inicio de la pilita.
diff //Resta el valo actual del puntero el tamaño de la función para retornar el ambito.
set_local 0 //Se regresa el valor del puntero en la stack.
//========================FIN CONVERSION DECIMAL.==================
$l60:
get_global 0 //valor actual del heap
92 //caracter final de la concatenación
set_global $calc //Se copia el final de cadena
get_global 0 //valor actual del heap 
1 
add 
set_global 0 
End



Function $int_to_string
//VALOR DE Y
get_local 0   //posicion actual en el puntero de la pila
1  //posición de la variable en la pila
add   //colocar la posición de la variable en la pilita
0 //valor inicial del iterador
set_local $calc   //asignación del valor en la pila
//VALOR DE r
get_local 0   //posicion actual en el puntero de la pila
2  //posición de la variable en la pila
add   //colocar la posición de la variable en la pilita
get_local 0  //puntero de la pila donde inicia la función
get_local $calc //Valor del parametro.
set_local $calc   //asignación del valor en la pila

//---------------INICIO DE CICLO-----------------
//-----VALIDAR SI EL VALOR ES > 9
get_local 0
2
add
get_local $calc

10
Lt
eqz 
br_if $l65
br $l66
$l66:
$l62:
get_local 0
2
add
get_local $calc
//Valor del numero de repeticiones: r
1 //cuando sea igual a cero se termina
Gte 
eqz  //verifica que sea mayor que 1
br_if $l63   //salto etiqueta verdadero
br $l64  //goto etiqueta falso
$l63:    //inicio etiqueta verdadero
//=============|r=
get_local 0 
2 //Pos de r
add //Obtengo la posición de r para asignar nuevo valor.
//==============|r / 10
get_local 0
2
add
get_local $calc
10
div 
set_local $calc //R = R/10
$l65:
//----Y = Y + 1
get_local 0
1
add
get_local 0
1
add
get_local $calc

1
Add
set_local $calc //Y = Y+1
br $l62
$l64:
get_local 0   //posicion actual en el puntero de la pila
3  //posición de la variable en la pila
add   //colocar la posición de la variable en la pilita
//========================INICIO POTENCIA==================

//PARAMETRO1
get_local 0 // me posiciono en el inicio de la función actual.
0// busco la posición del parametro que voy a pasar
add  //Me posicion en el lugar del parametro
3// se coloca el tamaño de la función para poder guardar la variable
add //Se suma el tamaño del ambito para poder pasar el parametro a la posición que lo recibe.
get_local 0
1
add
get_local $calc
// Traducción del valor que se va a pasar como parametro
1
diff
set_local $calc //guardo el valor en la posición calculada

//LLAMADA DE LA FUNCIÓN CONCATENAR
get_local 0 //Coloca el valor del puntero al inicio de la pilita
3 //Coloca el valor del tamaño de la función al inicio de la pilita.
add //Suma el valor actual del puntero el tamaño de la función.
set_local 0 //Se cambia el valor del puntero en la stack
call $Potencia //se hace la llamada a la función para mover puntero IP

//REGRESAR PUNTERO DEL STACK
get_local 0 //Se coloca el puntero al inicio de la pilita
3 //Coloca el valor del tamaño de la función al inicio de la pilita.
diff //Resta el valo actual del puntero el tamaño de la función para retornar el ambito.
set_local 0 //Se regresa el valor del puntero en la stack.
//========================FIN POTENCIA==================
set_local $calc   //asignación del valor DE LA PONTENCIA

//---------------INICIO DE CICLO-----------------
$l67:
get_local 0
1
add
get_local $calc
//Valor del numero de repeticiones: r
0 //cuando sea igual a cero se termina
Gt 
eqz  //verifica que sea mayor que 1
br_if $l68   //salto etiqueta verdadero
br $l69  //goto etiqueta falso
$l68:    //inicio etiqueta verdadero
//NUMERO_ENTRADA / POTENCIA
get_global 0 //obtengo el puntero del heap.
 get_local 0 
get_local $calc //obtengo el valor del parametro que es el digito a convertir.
get_local 0
3
add
get_local $calc
//TENGO EL VALOR DE LA POTENCIA
div 
//TENGO EL VALOR EN NUMERO ENTERO.
48
add //LO CONVERTÍ EN ASCII.
set_global $calc //COLOCO EL ASCII EN EL HEAP.
get_global 0 //valor actual del heap PARA AUMENTAR.
1 
add 
set_global 0 

//===============valor = valor % inicial;=============
get_local 0 //posicion actual del parametro
get_local 0 //valor actual del parametro
get_local $calc //valor
get_local 0
3
add
get_local $calc

mod
set_local $calc //actualizo el valor del parametro.

//===============inicial = inicial / 10;==============
get_local 0
3//POSICION DE LA POTENCIA.
add
get_local 0
3
add
get_local $calc

10
div //Potencia / 10
set_local $calc //Actualizo el valor de la potencia.

//===============num--;==============
get_local 0
1//NUMERO DE DIGITOS.
add
get_local 0
1
add
get_local $calc

1
diff
set_local $calc
br $l67
$l69:
End



Function $Potencia

//.....INICIO POTENCIA.....

//----DECLARACION DE LA VARAIBLE QUE LLEVARÁ EL ITERADOR: i
get_local 0   //posicion actual en el puntero de la pila
1  //posición de la variable en la pila
add   //colocar la posición de la variable en la pilita
0 //valor inicial del iterador
set_local $calc   //asignación del valor en la pila
//----DECLARACION DE LA VARAIBLE QUE LLEVARÁ EL RESULTADO: resultado
get_local 0   //posicion actual en el puntero de la pila
2  //posición de la variable en la pila
add   //colocar la posición de la variable en la pilita
1 //valor inicial del resultado
set_local $calc   //asignación del valor en la pila
$l70:     //Inicio del ciclo. 
//----CONDICIÓN DEL CICLO i < base: i
get_local 0
1
add
get_local $calc

get_local 0 //Posición del primer parametro
get_local $calc

Lt
Eqz   // Se valida que la condición haya sido verdadera.
Br_if $l71   //Si es verdadera, hace un goto a la etiqueta verdadera.
Br $l72  //Si la condición es falsa, hace un goto a la etiqueta falsa.
$l71:  //Inicio de la lista de instrucciones. 
//----RESULTADO = RESULTADO * BASE
get_local 0
2
add
get_local 0
2
add
get_local $calc

10
Mult
set_local $calc
//----ITERADOR = ITERADOR + 1
get_local 0
1
add
get_local 0
1
add
get_local $calc

1
Add
set_local $calc
Br $l70  //Al finalizar el ciclo, se hace un goto a la etiqueta de inicio del ciclo.
$l72:  // Inicio de la etiqueta falsa o de salida del ciclo. 
//COLOCAR VALOR DEL RESULTADO EN LA CIMA.....
get_local 0
2
add
get_local $calc



//.....FIN POTENCIA.....
End
Function $imprimir_cadena
get_local 0   //posicion actual en el puntero de la pila
1  //posición de la variable en la pila
add   //colocar la posición de la variable en la pilita
0 //valor inicial del iterador
set_local $calc   //asignación del valor en la pila
$l75:
get_local 0 //Posición del primer parametro
get_local $calc 
get_local 0
1
add
get_local $calc

add //Valor de la posición del caracter actual
get_global $calc //obtengo el valor del caracter
92 //valor del caracter del final de cadena
diff 
eqz  //verifica que los caracteres sean iguales
br_if $l73   //salto etiqueta verdadero
br $l74  //goto etiqueta falso
$l73:    //inicio etiqueta verdadero
%c
get_local 0 //Posición del primer parametro
get_local $calc 
get_local 0
1
add
get_local $calc

add //Valor de la posición del caracter actual
get_global $calc //obtengo el valor del caracter
Print
//----ITERADOR = ITERADOR + 1
get_local 0
1
add
get_local 0
1
add
get_local $calc

1
Add
set_local $calc
br $l75
$l74:
End
Function $CompararString
get_local 0   //posicion actual en el puntero de la pila
2  //posición de la variable en la pila
add   //colocar la posición de la variable en la pilita
0 //valor inicial del iterador
set_local $calc   //asignación del valor en la pila
$l78:
get_local 0 //Posición del primer parametro
get_local $calc 
get_local 0
2
add
get_local $calc

add //Valor de la posición del caracter actual
get_global $calc //obtengo el valor del caracter
get_local 0 //Posición del primer parametro
1
add
get_local $calc 
get_local 0
2
add
get_local $calc

add //Valor de la posición del caracter actual
get_global $calc //obtengo el valor del caracter
diff 
eqz  //verifica que los caracteres sean iguales
eqz  //verifica que los caracteres sean iguales
br_if $l76   //salto etiqueta verdadero
br $l77  //goto etiqueta falso
$l76:    //inicio etiqueta verdadero
get_local 0 //Posición del primer parametro
get_local $calc 
get_local 0
2
add
get_local $calc

add //Valor de la posición del caracter actual
get_global $calc //obtengo el valor del caracter
92 //valor del caracter del final de cadena
diff 
eqz  //verifica que los caracteres sean iguales
br_if $l79   //salto etiqueta verdadero
br $l80  //goto etiqueta falso
$l79:    //inicio etiqueta verdadero
//----ITERADOR = ITERADOR + 1
get_local 0
2
add
get_local 0
2
add
get_local $calc

1
Add
set_local $calc
br $l78
$l80:
1 //AL SER IGUALES RETORNO UN UNO EN LA PILITA
br $l81
$l77:
0 //AL SER DIFERENTES RETORNO UN CERO EN LA PILITA
$l81:
End
Function $CalcularPesoString
get_local 0   //posicion actual en el puntero de la pila
2  //posición de la variable en la pila
add   //colocar la posición de la variable en la pilita
0 //valor inicial del iterador
set_local $calc   //asignación del valor en la pila
0 //VALOR DE INICIO DE LA SUMA.
$l84:
get_local 0 //Posición del primer parametro
get_local $calc 
get_local 0
2
add
get_local $calc

add //Valor de la posición del caracter actual
get_global $calc //obtengo el valor del caracter
92 //valor del caracter del final de cadena
diff 
eqz  //verifica que los caracteres sean iguales
br_if $l82   //salto etiqueta verdadero
br $l83  //goto etiqueta falso
$l82:    //inicio etiqueta verdadero
get_local 0 //Posición del primer parametro en el heap
get_local $calc 
get_local 0
2
add
get_local $calc

add //Valor de la posición del caracter actual
get_global $calc //Obtengo el valor del caracter
add //VOY SUMANDO EL VALOR DE LOS CARACTERES.
//----ITERADOR = ITERADOR + 1
get_local 0
2
add
get_local 0
2
add
get_local $calc

1
Add
set_local $calc
br $l84
$l83:
End
