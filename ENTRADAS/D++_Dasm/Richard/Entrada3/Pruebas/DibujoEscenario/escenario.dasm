get_global 0 //APUNTADOR QUE QUEDERÁ GUARDADO EN TODAS LAS DECLARACIONES GLOBALES.
//RESERVO ESPACIO PARA LAS VARIABLES GLOBALES 
get_global 0 
0//Numero de declaraciones globales
add //Aumento el puntero en el heap
set_global 0 //Actualizo la posición en el heap.
br_if $l1
$l1:
Function $principal
//INICIO DE LA FUNCIÓN: PASO DE PARAMETROS--------------------
//CAMBIO AMBITO AUMENTO PILA---------------------------
get_local 0 //Coloca el valor del puntero al inicio de la pilita
0//Coloca el valor del tamaño de la función al inicio de la pilita.
add //Suma el valor actual del puntero el tamaño de la función.
set_local 0 //Se cambia el valor del puntero en la stack
call $cargar_escenario//se hace la llamada a la función para mover puntero IP
//REGRESAR PUNTERO PILA-------------------------------
get_local 0   //Se coloca el puntero al inicio de la pilita
0  //Coloca el valor del tamaño de la función al inicio de la pilita.
diff   //Resta el valo actual del puntero el tamaño de la función para retornar el ambito.
set_local 0  //Se regresa el valor del puntero en la stack.
End
Function $cargar_escenario
//INICIO DE LA FUNCIÓN: PASO DE PARAMETROS--------------------
//CAMBIO AMBITO AUMENTO PILA---------------------------
get_local 0 //Coloca el valor del puntero al inicio de la pilita
1//Coloca el valor del tamaño de la función al inicio de la pilita.
add //Suma el valor actual del puntero el tamaño de la función.
set_local 0 //Se cambia el valor del puntero en la stack
call $dibujar_Cielo//se hace la llamada a la función para mover puntero IP
//REGRESAR PUNTERO PILA-------------------------------
get_local 0   //Se coloca el puntero al inicio de la pilita
1  //Coloca el valor del tamaño de la función al inicio de la pilita.
diff   //Resta el valo actual del puntero el tamaño de la función para retornar el ambito.
set_local 0  //Se regresa el valor del puntero en la stack.
//INICIO DE LA FUNCIÓN: PASO DE PARAMETROS--------------------
get_local 0
0
add 
1
add 
700
set_local $calc
get_local 0
1
add 
1
add 
650
set_local $calc
//CAMBIO AMBITO AUMENTO PILA---------------------------
get_local 0 //Coloca el valor del puntero al inicio de la pilita
1//Coloca el valor del tamaño de la función al inicio de la pilita.
add //Suma el valor actual del puntero el tamaño de la función.
set_local 0 //Se cambia el valor del puntero en la stack
call $dibujar_Montanas_INT_INT//se hace la llamada a la función para mover puntero IP
//RETORNO DE LA FUNCION-------------
get_local 0 //Se coloca el puntero al inicio de la pilita
2
add  //se suma el valor que corresponde a la posición del retorno
get_local $calc  //Coloca el valor del retorno en la pilita
//REGRESAR PUNTERO PILA-------------------------------
get_local 0   //Se coloca el puntero al inicio de la pilita
1  //Coloca el valor del tamaño de la función al inicio de la pilita.
diff   //Resta el valo actual del puntero el tamaño de la función para retornar el ambito.
set_local 0  //Se regresa el valor del puntero en la stack.
//INICIO DE LA FUNCIÓN: PASO DE PARAMETROS--------------------
get_local 0
0
add 
1
add 
100
set_local $calc
get_local 0
1
add 
1
add 
650
set_local $calc
get_local 0
2
add 
1
add 
200
set_local $calc
//CAMBIO AMBITO AUMENTO PILA---------------------------
get_local 0 //Coloca el valor del puntero al inicio de la pilita
1//Coloca el valor del tamaño de la función al inicio de la pilita.
add //Suma el valor actual del puntero el tamaño de la función.
set_local 0 //Se cambia el valor del puntero en la stack
call $seleccion_INT_INT_INT//se hace la llamada a la función para mover puntero IP
//RETORNO DE LA FUNCION-------------
get_local 0 //Se coloca el puntero al inicio de la pilita
3
add  //se suma el valor que corresponde a la posición del retorno
get_local $calc  //Coloca el valor del retorno en la pilita
//REGRESAR PUNTERO PILA-------------------------------
get_local 0   //Se coloca el puntero al inicio de la pilita
1  //Coloca el valor del tamaño de la función al inicio de la pilita.
diff   //Resta el valo actual del puntero el tamaño de la función para retornar el ambito.
set_local 0  //Se regresa el valor del puntero en la stack.
//INICIO DE LA FUNCIÓN: PASO DE PARAMETROS--------------------
get_local 0
0
add 
1
add 
300
set_local $calc
get_local 0
1
add 
1
add 
650
set_local $calc
get_local 0
2
add 
1
add 
100
set_local $calc
//CAMBIO AMBITO AUMENTO PILA---------------------------
get_local 0 //Coloca el valor del puntero al inicio de la pilita
1//Coloca el valor del tamaño de la función al inicio de la pilita.
add //Suma el valor actual del puntero el tamaño de la función.
set_local 0 //Se cambia el valor del puntero en la stack
call $seleccion_INT_INT_INT//se hace la llamada a la función para mover puntero IP
//RETORNO DE LA FUNCION-------------
get_local 0 //Se coloca el puntero al inicio de la pilita
3
add  //se suma el valor que corresponde a la posición del retorno
get_local $calc  //Coloca el valor del retorno en la pilita
//REGRESAR PUNTERO PILA-------------------------------
get_local 0   //Se coloca el puntero al inicio de la pilita
1  //Coloca el valor del tamaño de la función al inicio de la pilita.
diff   //Resta el valo actual del puntero el tamaño de la función para retornar el ambito.
set_local 0  //Se regresa el valor del puntero en la stack.
//INICIO DE LA FUNCIÓN: PASO DE PARAMETROS--------------------
get_local 0
0
add 
1
add 
450
set_local $calc
get_local 0
1
add 
1
add 
700
set_local $calc
//CAMBIO AMBITO AUMENTO PILA---------------------------
get_local 0 //Coloca el valor del puntero al inicio de la pilita
1//Coloca el valor del tamaño de la función al inicio de la pilita.
add //Suma el valor actual del puntero el tamaño de la función.
set_local 0 //Se cambia el valor del puntero en la stack
call $dibujar_Camino_INT_INT//se hace la llamada a la función para mover puntero IP
//RETORNO DE LA FUNCION-------------
get_local 0 //Se coloca el puntero al inicio de la pilita
5
add  //se suma el valor que corresponde a la posición del retorno
get_local $calc  //Coloca el valor del retorno en la pilita
//REGRESAR PUNTERO PILA-------------------------------
get_local 0   //Se coloca el puntero al inicio de la pilita
1  //Coloca el valor del tamaño de la función al inicio de la pilita.
diff   //Resta el valo actual del puntero el tamaño de la función para retornar el ambito.
set_local 0  //Se regresa el valor del puntero en la stack.
get_local 0 //Apuntador de la pila
0//Posición donde se encuentra la variable del arreglo
add //Posición donde se guardará en la pila
 get_global 0 //Posición inicial del arreglo en el heap
set_local $calc //Se coloca el valor del puntero del heap en el stack
 
//....RESERVAR ARREGLO....

//----DECLARACION DE LA VARAIBLE QUE LLEVARÁ EL ITERADOR: i
get_local 0   //posicion actual en el puntero de la pila
1  //posición de la variable en la pila
add   //colocar la posición de la variable en la pilita
0 //valor inicial del iterador
set_local $calc   //asignación del valor en la pila
get_local 0   //posicion actual en el puntero de la pila
2  //posición de la variable en la pila
add   //colocar la posición de la variable en la pilita
//MULTIPLICACIÓN DE LAS DIMENSIONES PARA CALCULAR SU TAMAÑO.
2
set_local $calc   //asignación del valor en la pila
//--Guardar el valor de las dimensiones al inicio del arreglo.
get_global 0
2
set_global $calc
get_global 0
1 
add 
set_global 0
$l2:     //Inicio del ciclo. 
//----CONDICIÓN DEL CICLO i < base: i
get_local 0
1
add
get_local $calc

get_local 0
2
add
get_local $calc

Lt
Eqz   // Se valida que la condición haya sido verdadera.
Br_if $l3   //Si es verdadera, hace un goto a la etiqueta verdadera.
Br $l4  //Si la condición es falsa, hace un goto a la etiqueta falsa.
$l3:  //Inicio de la lista de instrucciones. 
//----heap[i] el valor 
get_global 0  //Puntero actual del heap
0  //Valor inicial en la posición h[i]
set_global $calc  //Guardar valor inicial
//---H = H+1
get_global 0 //valor actual del puntero del heap
1 //Aumenta el puntero un tamaño en uno.
add //Aumento del puntero
set_global 0 //se actualiza el valor del puntero del heap.
//----ITERADOR = ITERADOR + 1
get_local 0
1
add
get_local 0
1
add
get_local $calc

1
Add
set_local $calc
Br $l2  //Al finalizar el ciclo, se hace un goto a la etiqueta de inicio del ciclo.
$l4:  // Inicio de la etiqueta falsa o de salida del ciclo. 


//.....FIN ARREGLO.....
//INICIO DE LA FUNCIÓN: PASO DE PARAMETROS--------------------
get_local 0
0
add 
1
add 
get_local 0
0
add
get_local $calc
set_local $calc
get_local 0
1
add 
1
add 
400
set_local $calc
get_local 0
2
add 
1
add 
670
set_local $calc
//CAMBIO AMBITO AUMENTO PILA---------------------------
get_local 0 //Coloca el valor del puntero al inicio de la pilita
1//Coloca el valor del tamaño de la función al inicio de la pilita.
add //Suma el valor actual del puntero el tamaño de la función.
set_local 0 //Se cambia el valor del puntero en la stack
call $dibujar_Tubos_INT_INT_INT//se hace la llamada a la función para mover puntero IP
//REGRESAR PUNTERO PILA-------------------------------
get_local 0   //Se coloca el puntero al inicio de la pilita
1  //Coloca el valor del tamaño de la función al inicio de la pilita.
diff   //Resta el valo actual del puntero el tamaño de la función para retornar el ambito.
set_local 0  //Se regresa el valor del puntero en la stack.
//INICIO DE LA FUNCIÓN: PASO DE PARAMETROS--------------------
get_local 0
0
add 
1
add 
//INDICE.
0
//TAMAÑO.
get_local 0
0 //posicion de la variable del arreglo.
add 
get_local $calc //Obtiene el valor de la posicion del arreglo.
0//numero de dimensión
add 
get_global $calc //Obtiene el valor de la posición del heap. 
Lt //Valor_Indice < Tamaño_Dimension
Eqz //Valida si es menor
br_if $l5   //salto etiqueta verdadero
br $error_arreglo  //goto etiqueta falso
$l5:    //inicio etiqueta verdadero
get_local 0
0 //posicion de la variable del arreglo.
add 
get_local $calc //Obtiene el valor de la posicion del arreglo.
1
add 
0

add //Se suma la posicion del arreglo.
get_global $calc //Se obtiene el valor de la posición del arreglo.

90

Diff
set_local $calc
get_local 0
1
add 
1
add 
//INDICE.
1
//TAMAÑO.
get_local 0
0 //posicion de la variable del arreglo.
add 
get_local $calc //Obtiene el valor de la posicion del arreglo.
0//numero de dimensión
add 
get_global $calc //Obtiene el valor de la posición del heap. 
Lt //Valor_Indice < Tamaño_Dimension
Eqz //Valida si es menor
br_if $l6   //salto etiqueta verdadero
br $error_arreglo  //goto etiqueta falso
$l6:    //inicio etiqueta verdadero
get_local 0
0 //posicion de la variable del arreglo.
add 
get_local $calc //Obtiene el valor de la posicion del arreglo.
1
add 
1

add //Se suma la posicion del arreglo.
get_global $calc //Se obtiene el valor de la posición del arreglo.

225

Diff
set_local $calc
//CAMBIO AMBITO AUMENTO PILA---------------------------
get_local 0 //Coloca el valor del puntero al inicio de la pilita
1//Coloca el valor del tamaño de la función al inicio de la pilita.
add //Suma el valor actual del puntero el tamaño de la función.
set_local 0 //Se cambia el valor del puntero en la stack
call $dibujar_Planta_INT_INT//se hace la llamada a la función para mover puntero IP
//RETORNO DE LA FUNCION-------------
get_local 0 //Se coloca el puntero al inicio de la pilita
7
add  //se suma el valor que corresponde a la posición del retorno
get_local $calc  //Coloca el valor del retorno en la pilita
//REGRESAR PUNTERO PILA-------------------------------
get_local 0   //Se coloca el puntero al inicio de la pilita
1  //Coloca el valor del tamaño de la función al inicio de la pilita.
diff   //Resta el valo actual del puntero el tamaño de la función para retornar el ambito.
set_local 0  //Se regresa el valor del puntero en la stack.
//INICIO DE LA FUNCIÓN: PASO DE PARAMETROS--------------------
get_local 0
0
add 
1
add 
200
set_local $calc
get_local 0
1
add 
1
add 
100
set_local $calc
get_local 0
2
add 
1
add 
300
set_local $calc
//CAMBIO AMBITO AUMENTO PILA---------------------------
get_local 0 //Coloca el valor del puntero al inicio de la pilita
1//Coloca el valor del tamaño de la función al inicio de la pilita.
add //Suma el valor actual del puntero el tamaño de la función.
set_local 0 //Se cambia el valor del puntero en la stack
call $seleccion_INT_INT_INT//se hace la llamada a la función para mover puntero IP
//RETORNO DE LA FUNCION-------------
get_local 0 //Se coloca el puntero al inicio de la pilita
3
add  //se suma el valor que corresponde a la posición del retorno
get_local $calc  //Coloca el valor del retorno en la pilita
//REGRESAR PUNTERO PILA-------------------------------
get_local 0   //Se coloca el puntero al inicio de la pilita
1  //Coloca el valor del tamaño de la función al inicio de la pilita.
diff   //Resta el valo actual del puntero el tamaño de la función para retornar el ambito.
set_local 0  //Se regresa el valor del puntero en la stack.
//INICIO DE LA FUNCIÓN: PASO DE PARAMETROS--------------------
get_local 0
0
add 
1
add 
550
set_local $calc
get_local 0
1
add 
1
add 
100
set_local $calc
get_local 0
2
add 
1
add 
300
set_local $calc
//CAMBIO AMBITO AUMENTO PILA---------------------------
get_local 0 //Coloca el valor del puntero al inicio de la pilita
1//Coloca el valor del tamaño de la función al inicio de la pilita.
add //Suma el valor actual del puntero el tamaño de la función.
set_local 0 //Se cambia el valor del puntero en la stack
call $seleccion_INT_INT_INT//se hace la llamada a la función para mover puntero IP
//RETORNO DE LA FUNCION-------------
get_local 0 //Se coloca el puntero al inicio de la pilita
3
add  //se suma el valor que corresponde a la posición del retorno
get_local $calc  //Coloca el valor del retorno en la pilita
//REGRESAR PUNTERO PILA-------------------------------
get_local 0   //Se coloca el puntero al inicio de la pilita
1  //Coloca el valor del tamaño de la función al inicio de la pilita.
diff   //Resta el valo actual del puntero el tamaño de la función para retornar el ambito.
set_local 0  //Se regresa el valor del puntero en la stack.
End
Function $dibujar_Cielo
//-----INICIO PINTAR CUADRADO ----
//X
0
//Y
0
//COLOR
10092543 //COLOR EN HEXA.
//ANCHO
900
//ALTO
900
$Quadrate
End
Function $dibujar_Montanas_INT_INT
//-----INICIO PINTAR OVALO ----
//X
get_local 0
0
add
get_local $calc

100

Diff
//Y
get_local 0
1
add
get_local $calc

50

Add
//COLOR
38992 //COLOR EN HEXA.
//ANCHO
205
//ALTO
305
$Oval
//-----INICIO PINTAR OVALO ----
//X
get_local 0
0
add
get_local $calc

100

Diff
//Y
get_local 0
1
add
get_local $calc

50

Add
//COLOR
44880 //COLOR EN HEXA.
//ANCHO
200
//ALTO
300
$Oval
//-----INICIO PINTAR OVALO ----
//X
get_local 0
0
add
get_local $calc
//Y
get_local 0
1
add
get_local $calc
//COLOR
0 //COLOR EN HEXA.
//ANCHO
205
//ALTO
405
$Oval
//-----INICIO PINTAR OVALO ----
//X
get_local 0
0
add
get_local $calc
//Y
get_local 0
1
add
get_local $calc
//COLOR
44880 //COLOR EN HEXA.
//ANCHO
200
//ALTO
400
$Oval
//-----INICIO PINTAR OVALO ----
//X
get_local 0
0
add
get_local $calc

100

Add
//Y
get_local 0
1
add
get_local $calc
//COLOR
0 //COLOR EN HEXA.
//ANCHO
205
//ALTO
355
$Oval
//-----INICIO PINTAR OVALO ----
//X
get_local 0
0
add
get_local $calc

100

Add
//Y
get_local 0
1
add
get_local $calc
//COLOR
44880 //COLOR EN HEXA.
//ANCHO
200
//ALTO
350
$Oval
End
Function $seleccion_INT_INT_INT
//........Inicio If
get_local 0
2
add
get_local $calc

200

Diff
Eqz
eqz   //Validación if
br_if $l7   //salto etiqueta verdadero
br $l8  //goto etiqueta falso
$l7:    //inicio etiqueta verdadero

//--Función Imprimir

//=============LLAMADA A FUNCIÓN IMPRIMIR===========================

//PARAMETRO1
get_local 0 // me posiciono en el inicio de la función actual.
0// busco la posición del parametro que voy a pasar
add  //Me posicion en el lugar del parametro
4// se coloca el tamaño de la función para poder guardar la variable
add //Se suma el tamaño del ambito para poder pasar el parametro a la posición que lo recibe.
//--GUARDAR STRING: Se guarda el puntero del heap el numero de veces del tamaño de la cadena.
get_global 0 //Posicion que quedará hasta el final de la cadena.
get_global 0 
65 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
82 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
98 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
117 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
115 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
116 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
111 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
115 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
92//Caracter ACII final cadena
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
set_global 0 //Actualizar valor del puntero 
// Traducción del valor que se va a pasar como parametro
set_local $calc //guardo el valor en la posición calculada

//LLAMADA DE LA FUNCIÓN CONCATENAR
get_local 0 //Coloca el valor del puntero al inicio de la pilita
4 //Coloca el valor del tamaño de la función al inicio de la pilita.
add //Suma el valor actual del puntero el tamaño de la función.
set_local 0 //Se cambia el valor del puntero en la stack
call $imprimir_cadena //se hace la llamada a la función para mover puntero IP

//REGRESAR PUNTERO DEL STACK
get_local 0 //Se coloca el puntero al inicio de la pilita
4 //Coloca el valor del tamaño de la función al inicio de la pilita.
diff //Resta el valo actual del puntero el tamaño de la función para retornar el ambito.
set_local 0 //Se regresa el valor del puntero en la stack.
//========================FIN IMPRIMIR==================
%c
//Valor a imprimir...
10
Print
//INICIO DE LA FUNCIÓN: PASO DE PARAMETROS--------------------
get_local 0
0
add 
4
add 
get_local 0
0
add
get_local $calc
set_local $calc
get_local 0
1
add 
4
add 
get_local 0
1
add
get_local $calc
set_local $calc
//CAMBIO AMBITO AUMENTO PILA---------------------------
get_local 0 //Coloca el valor del puntero al inicio de la pilita
4//Coloca el valor del tamaño de la función al inicio de la pilita.
add //Suma el valor actual del puntero el tamaño de la función.
set_local 0 //Se cambia el valor del puntero en la stack
call $dibujar_Arbustos_INT_INT//se hace la llamada a la función para mover puntero IP
//REGRESAR PUNTERO PILA-------------------------------
get_local 0   //Se coloca el puntero al inicio de la pilita
4  //Coloca el valor del tamaño de la función al inicio de la pilita.
diff   //Resta el valo actual del puntero el tamaño de la función para retornar el ambito.
set_local 0  //Se regresa el valor del puntero en la stack.
br $l9   //salto etiqueta salida
$l8:    //inicio de la etiqueta falsa
//.........Fin If
//........Inicio If
get_local 0
2
add
get_local $calc

300

Diff
Eqz
eqz   //Validación if
br_if $l10   //salto etiqueta verdadero
br $l11  //goto etiqueta falso
$l10:    //inicio etiqueta verdadero

//--Función Imprimir

//=============LLAMADA A FUNCIÓN IMPRIMIR===========================

//PARAMETRO1
get_local 0 // me posiciono en el inicio de la función actual.
0// busco la posición del parametro que voy a pasar
add  //Me posicion en el lugar del parametro
4// se coloca el tamaño de la función para poder guardar la variable
add //Se suma el tamaño del ambito para poder pasar el parametro a la posición que lo recibe.
//--GUARDAR STRING: Se guarda el puntero del heap el numero de veces del tamaño de la cadena.
get_global 0 //Posicion que quedará hasta el final de la cadena.
get_global 0 
78 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
117 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
98 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
101 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
115 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
92//Caracter ACII final cadena
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
set_global 0 //Actualizar valor del puntero 
// Traducción del valor que se va a pasar como parametro
set_local $calc //guardo el valor en la posición calculada

//LLAMADA DE LA FUNCIÓN CONCATENAR
get_local 0 //Coloca el valor del puntero al inicio de la pilita
4 //Coloca el valor del tamaño de la función al inicio de la pilita.
add //Suma el valor actual del puntero el tamaño de la función.
set_local 0 //Se cambia el valor del puntero en la stack
call $imprimir_cadena //se hace la llamada a la función para mover puntero IP

//REGRESAR PUNTERO DEL STACK
get_local 0 //Se coloca el puntero al inicio de la pilita
4 //Coloca el valor del tamaño de la función al inicio de la pilita.
diff //Resta el valo actual del puntero el tamaño de la función para retornar el ambito.
set_local 0 //Se regresa el valor del puntero en la stack.
//========================FIN IMPRIMIR==================
%c
//Valor a imprimir...
10
Print
//INICIO DE LA FUNCIÓN: PASO DE PARAMETROS--------------------
get_local 0
0
add 
4
add 
get_local 0
0
add
get_local $calc
set_local $calc
get_local 0
1
add 
4
add 
get_local 0
1
add
get_local $calc
set_local $calc
//CAMBIO AMBITO AUMENTO PILA---------------------------
get_local 0 //Coloca el valor del puntero al inicio de la pilita
4//Coloca el valor del tamaño de la función al inicio de la pilita.
add //Suma el valor actual del puntero el tamaño de la función.
set_local 0 //Se cambia el valor del puntero en la stack
call $dibujar_Nubes_INT_INT//se hace la llamada a la función para mover puntero IP
//REGRESAR PUNTERO PILA-------------------------------
get_local 0   //Se coloca el puntero al inicio de la pilita
4  //Coloca el valor del tamaño de la función al inicio de la pilita.
diff   //Resta el valo actual del puntero el tamaño de la función para retornar el ambito.
set_local 0  //Se regresa el valor del puntero en la stack.
br $l12   //salto etiqueta salida
$l11:    //inicio de la etiqueta falsa
//.........Fin If
//.........Inicio If

//--Función Imprimir

//=============LLAMADA A FUNCIÓN IMPRIMIR===========================

//PARAMETRO1
get_local 0 // me posiciono en el inicio de la función actual.
0// busco la posición del parametro que voy a pasar
add  //Me posicion en el lugar del parametro
4// se coloca el tamaño de la función para poder guardar la variable
add //Se suma el tamaño del ambito para poder pasar el parametro a la posición que lo recibe.
//--GUARDAR STRING: Se guarda el puntero del heap el numero de veces del tamaño de la cadena.
get_global 0 //Posicion que quedará hasta el final de la cadena.
get_global 0 
65 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
114 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
98 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
117 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
115 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
116 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
111 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
115 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
32 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
83 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
73 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
78 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
79 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
92//Caracter ACII final cadena
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
set_global 0 //Actualizar valor del puntero 
// Traducción del valor que se va a pasar como parametro
set_local $calc //guardo el valor en la posición calculada

//LLAMADA DE LA FUNCIÓN CONCATENAR
get_local 0 //Coloca el valor del puntero al inicio de la pilita
4 //Coloca el valor del tamaño de la función al inicio de la pilita.
add //Suma el valor actual del puntero el tamaño de la función.
set_local 0 //Se cambia el valor del puntero en la stack
call $imprimir_cadena //se hace la llamada a la función para mover puntero IP

//REGRESAR PUNTERO DEL STACK
get_local 0 //Se coloca el puntero al inicio de la pilita
4 //Coloca el valor del tamaño de la función al inicio de la pilita.
diff //Resta el valo actual del puntero el tamaño de la función para retornar el ambito.
set_local 0 //Se regresa el valor del puntero en la stack.
//========================FIN IMPRIMIR==================
%c
//Valor a imprimir...
10
Print
//INICIO DE LA FUNCIÓN: PASO DE PARAMETROS--------------------
get_local 0
0
add 
4
add 
get_local 0
0
add
get_local $calc
set_local $calc
get_local 0
1
add 
4
add 
get_local 0
1
add
get_local $calc
set_local $calc
//CAMBIO AMBITO AUMENTO PILA---------------------------
get_local 0 //Coloca el valor del puntero al inicio de la pilita
4//Coloca el valor del tamaño de la función al inicio de la pilita.
add //Suma el valor actual del puntero el tamaño de la función.
set_local 0 //Se cambia el valor del puntero en la stack
call $dibujar_Arbustos_INT_INT//se hace la llamada a la función para mover puntero IP
//REGRESAR PUNTERO PILA-------------------------------
get_local 0   //Se coloca el puntero al inicio de la pilita
4  //Coloca el valor del tamaño de la función al inicio de la pilita.
diff   //Resta el valo actual del puntero el tamaño de la función para retornar el ambito.
set_local 0  //Se regresa el valor del puntero en la stack.
br $l14  //salto etiqueta salida
//.........Fin If
$l9:
$l12:
$l14:
End
Function $dibujar_Camino_INT_INT
//...Inicio declaracion
get_local 0   //posicion actual en el puntero de la pila
2  //posición de la variable en la pila
add   //colocar la posición de la variable en la pilita
0
  //valor inicial de la variable
set_local $calc   //asignación del valor en la pila
//...Fin Declaración
get_local 0
2
add
get_local 0
2
add
get_local $calc

get_local 0
1
add
get_local $calc

Add

60

Add

set_local $calc
//-----INICIO PINTAR CUADRADO ----
//X
get_local 0
0
add
get_local $calc

1600

2

Div

Diff
//Y
get_local 0
2
add
get_local $calc

150

2

Div

Diff
//COLOR
14813963 //COLOR EN HEXA.
//ANCHO
1600
//ALTO
150
$Quadrate
//...Inicio declaracion
get_local 0   //posicion actual en el puntero de la pila
3  //posición de la variable en la pila
add   //colocar la posición de la variable en la pilita
900
  //valor inicial de la variable
set_local $calc   //asignación del valor en la pila
//...Fin Declaración
//...Inicio declaracion
get_local 0   //posicion actual en el puntero de la pila
4  //posición de la variable en la pila
add   //colocar la posición de la variable en la pilita
0
  //valor inicial de la variable
set_local $calc   //asignación del valor en la pila
//...Fin Declaración
//...........Inicio While
$l15:     //Inicio del ciclo. 
get_local 0
3
add
get_local $calc

0

Gt
    //Codigo de la condición, se asume que el valor de la condición ya está en la pilita.
Eqz   // Se valida que la condición haya sido verdadera.
Br_if $l16   //Si es verdadera, hace un goto a la etiqueta verdadera.
Br $l17  //Si la condición es falsa, hace un goto a la etiqueta falsa.
$l16:  //Inicio de la lista de instrucciones. 
get_local 0
3
add
get_local 0
3
add
get_local $calc

30

Diff

set_local $calc
get_local 0
4
add
get_local 0
3
add
get_local $calc

set_local $calc
get_local 0
2
add
get_local 0
1
add
get_local $calc

set_local $calc
//...........Inicio While
$l18:     //Inicio del ciclo. 
get_local 0
2
add
get_local $calc

800

Lt
    //Codigo de la condición, se asume que el valor de la condición ya está en la pilita.
Eqz   // Se valida que la condición haya sido verdadera.
Br_if $l19   //Si es verdadera, hace un goto a la etiqueta verdadera.
Br $l20  //Si la condición es falsa, hace un goto a la etiqueta falsa.
$l19:  //Inicio de la lista de instrucciones. 
//-----INICIO PINTAR PUNTO ----
//X
get_local 0
4
add
get_local $calc
//Y
get_local 0
2
add
get_local $calc
//COLOR
15783308 //COLOR EN HEXA.
//DIAMETRO
15
$Point
get_local 0
2
add
get_local 0
2
add
get_local $calc

5

Add

set_local $calc
get_local 0
4
add
get_local 0
4
add
get_local $calc

5

Add

set_local $calc
Br $l18  //Al finalizar el ciclo, se hace un goto a la etiqueta de inicio del ciclo.
$l20:  // Inicio de la etiqueta falsa o de salida del ciclo. 
//.......fin while
Br $l15  //Al finalizar el ciclo, se hace un goto a la etiqueta de inicio del ciclo.
$l17:  // Inicio de la etiqueta falsa o de salida del ciclo. 
//.......fin while
get_local 0
1
add
get_local 0
1
add
get_local $calc

10

Diff

set_local $calc
//-----INICIO PINTAR CUADRADO ----
//X
get_local 0
0
add
get_local $calc

1600

2

Div

Diff
//Y
get_local 0
1
add
get_local $calc

35

2

Div

Diff
//COLOR
0 //COLOR EN HEXA.
//ANCHO
1600
//ALTO
35
$Quadrate
//-----INICIO PINTAR CUADRADO ----
//X
get_local 0
0
add
get_local $calc

1600

2

Div

Diff
//Y
get_local 0
1
add
get_local $calc

25

2

Div

Diff
//COLOR
15524550 //COLOR EN HEXA.
//ANCHO
1600
//ALTO
25
$Quadrate
End
Function $dibujar_Tubos_INT_INT_INT
//...........Inicio While
$l21:     //Inicio del ciclo. 
get_local 0
2
add
get_local $calc

600

Gt
    //Codigo de la condición, se asume que el valor de la condición ya está en la pilita.
Eqz   // Se valida que la condición haya sido verdadera.
Br_if $l22   //Si es verdadera, hace un goto a la etiqueta verdadera.
Br $l23  //Si la condición es falsa, hace un goto a la etiqueta falsa.
$l22:  //Inicio de la lista de instrucciones. 
//-----INICIO PINTAR CUADRADO ----
//X
get_local 0
1
add
get_local $calc

135

2

Div

Diff
//Y
get_local 0
2
add
get_local $calc

10

2

Div

Diff
//COLOR
0 //COLOR EN HEXA.
//ANCHO
135
//ALTO
10
$Quadrate
//-----INICIO PINTAR CUADRADO ----
//X
get_local 0
1
add
get_local $calc

125

2

Div

Diff
//Y
get_local 0
2
add
get_local $calc

10

2

Div

Diff
//COLOR
3394611 //COLOR EN HEXA.
//ANCHO
125
//ALTO
10
$Quadrate
//-----INICIO PINTAR CUADRADO ----
//X
get_local 0
1
add
get_local $calc

50

Diff

10

2

Div

Diff
//Y
get_local 0
2
add
get_local $calc

10

2

Div

Diff
//COLOR
16777215 //COLOR EN HEXA.
//ANCHO
10
//ALTO
10
$Quadrate
get_local 0
2
add
get_local 0
2
add
get_local $calc

100

Diff

90

Diff

set_local $calc
Br $l21  //Al finalizar el ciclo, se hace un goto a la etiqueta de inicio del ciclo.
$l23:  // Inicio de la etiqueta falsa o de salida del ciclo. 
//.......fin while
//-----INICIO PINTAR CUADRADO ----
//X
get_local 0
1
add
get_local $calc

165

2

Div

Diff
//Y
get_local 0
2
add
get_local $calc

20

Diff

60

2

Div

Diff
//COLOR
0 //COLOR EN HEXA.
//ANCHO
165
//ALTO
60
$Quadrate
//-----INICIO PINTAR CUADRADO ----
//X
get_local 0
1
add
get_local $calc

155

2

Div

Diff
//Y
get_local 0
2
add
get_local $calc

20

Diff

50

2

Div

Diff
//COLOR
3394611 //COLOR EN HEXA.
//ANCHO
155
//ALTO
50
$Quadrate
//-----INICIO PINTAR CUADRADO ----
//X
get_local 0
1
add
get_local $calc

60

Diff

10

2

Div

Diff
//Y
get_local 0
2
add
get_local $calc

20

Diff

50

2

Div

Diff
//COLOR
16777215 //COLOR EN HEXA.
//ANCHO
10
//ALTO
50
$Quadrate
get_local 0
1
add
get_local 0
1
add
get_local $calc

63

2

Mult

Add

set_local $calc
//-----INICIO PINTAR CUADRADO ----
//X
get_local 0
1
add
get_local $calc

165

2

Div

Diff
//Y
get_local 0
2
add
get_local $calc

100

Diff

60

2

Div

Diff
//COLOR
0 //COLOR EN HEXA.
//ANCHO
165
//ALTO
60
$Quadrate
//-----INICIO PINTAR CUADRADO ----
//X
get_local 0
1
add
get_local $calc

155

2

Div

Diff
//Y
get_local 0
2
add
get_local $calc

100

Diff

50

2

Div

Diff
//COLOR
3394611 //COLOR EN HEXA.
//ANCHO
155
//ALTO
50
$Quadrate
//-----INICIO PINTAR CUADRADO ----
//X
get_local 0
1
add
get_local $calc

60

Diff

10

2

Div

Diff
//Y
get_local 0
2
add
get_local $calc

100

Diff

50

2

Div

Diff
//COLOR
16777215 //COLOR EN HEXA.
//ANCHO
10
//ALTO
50
$Quadrate
//INDICE.
0
//TAMAÑO.
get_local 0
0 //posicion de la variable del arreglo.
add 
get_local $calc //Obtiene el valor de la posicion del arreglo.
0//numero de dimensión
add 
get_global $calc //Obtiene el valor de la posición del heap. 
Lt //Valor_Indice < Tamaño_Dimension
Eqz //Valida si es menor
br_if $l24   //salto etiqueta verdadero
br $error_arreglo  //goto etiqueta falso
$l24:    //inicio etiqueta verdadero
get_local 0
0 //posicion de la variable del arreglo.
add 
get_local $calc //Obtiene el valor de la posicion del arreglo.
1
add 
0

add //Se suma la posicion del arreglo.
get_local 0
1
add
get_local $calc
set_global $calc //ASIGNAR VALOR EN LA POSICIÓN DEL ARREGLO.
//INDICE.
1
//TAMAÑO.
get_local 0
0 //posicion de la variable del arreglo.
add 
get_local $calc //Obtiene el valor de la posicion del arreglo.
0//numero de dimensión
add 
get_global $calc //Obtiene el valor de la posición del heap. 
Lt //Valor_Indice < Tamaño_Dimension
Eqz //Valida si es menor
br_if $l25   //salto etiqueta verdadero
br $error_arreglo  //goto etiqueta falso
$l25:    //inicio etiqueta verdadero
get_local 0
0 //posicion de la variable del arreglo.
add 
get_local $calc //Obtiene el valor de la posicion del arreglo.
1
add 
1

add //Se suma la posicion del arreglo.
get_local 0
2
add
get_local $calc
set_global $calc //ASIGNAR VALOR EN LA POSICIÓN DEL ARREGLO.
get_local 0
2
add
get_local 0
2
add
get_local $calc

65

Diff

set_local $calc
//...........Inicio While
$l26:     //Inicio del ciclo. 
get_local 0
2
add
get_local $calc

670

Lte
    //Codigo de la condición, se asume que el valor de la condición ya está en la pilita.
Eqz   // Se valida que la condición haya sido verdadera.
Br_if $l27   //Si es verdadera, hace un goto a la etiqueta verdadera.
Br $l28  //Si la condición es falsa, hace un goto a la etiqueta falsa.
$l27:  //Inicio de la lista de instrucciones. 
//-----INICIO PINTAR CUADRADO ----
//X
get_local 0
1
add
get_local $calc

135

2

Div

Diff
//Y
get_local 0
2
add
get_local $calc

10

2

Div

Diff
//COLOR
0 //COLOR EN HEXA.
//ANCHO
135
//ALTO
10
$Quadrate
//-----INICIO PINTAR CUADRADO ----
//X
get_local 0
1
add
get_local $calc

125

2

Div

Diff
//Y
get_local 0
2
add
get_local $calc

10

2

Div

Diff
//COLOR
3394611 //COLOR EN HEXA.
//ANCHO
125
//ALTO
10
$Quadrate
//-----INICIO PINTAR CUADRADO ----
//X
get_local 0
1
add
get_local $calc

50

Diff

10

2

Div

Diff
//Y
get_local 0
2
add
get_local $calc

10

2

Div

Diff
//COLOR
16777215 //COLOR EN HEXA.
//ANCHO
10
//ALTO
10
$Quadrate
get_local 0
2
add
get_local 0
2
add
get_local $calc

90

80.5

Diff

Add

set_local $calc
Br $l26  //Al finalizar el ciclo, se hace un goto a la etiqueta de inicio del ciclo.
$l28:  // Inicio de la etiqueta falsa o de salida del ciclo. 
//.......fin while
End
Function $dibujar_Planta_INT_INT
get_local 0 //Apuntador de la pila
2//Posición donde se encuentra la variable del arreglo
add //Posición donde se guardará en la pila
 get_global 0 //Posición inicial del arreglo en el heap
set_local $calc //Se coloca el valor del puntero del heap en el stack
 
//....RESERVAR ARREGLO....

//----DECLARACION DE LA VARAIBLE QUE LLEVARÁ EL ITERADOR: i
get_local 0   //posicion actual en el puntero de la pila
3  //posición de la variable en la pila
add   //colocar la posición de la variable en la pilita
0 //valor inicial del iterador
set_local $calc   //asignación del valor en la pila
get_local 0   //posicion actual en el puntero de la pila
4  //posición de la variable en la pila
add   //colocar la posición de la variable en la pilita
//MULTIPLICACIÓN DE LAS DIMENSIONES PARA CALCULAR SU TAMAÑO.
10
10
mult
set_local $calc   //asignación del valor en la pila
//--Guardar el valor de las dimensiones al inicio del arreglo.
get_global 0
10
set_global $calc
get_global 0
1 
add 
set_global 0
get_global 0
10
set_global $calc
get_global 0
1 
add 
set_global 0
$l29:     //Inicio del ciclo. 
//----CONDICIÓN DEL CICLO i < base: i
get_local 0
3
add
get_local $calc

get_local 0
4
add
get_local $calc

Lt
Eqz   // Se valida que la condición haya sido verdadera.
Br_if $l30   //Si es verdadera, hace un goto a la etiqueta verdadera.
Br $l31  //Si la condición es falsa, hace un goto a la etiqueta falsa.
$l30:  //Inicio de la lista de instrucciones. 
//----heap[i] el valor 
get_global 0  //Puntero actual del heap
0  //Valor inicial en la posición h[i]
set_global $calc  //Guardar valor inicial
//---H = H+1
get_global 0 //valor actual del puntero del heap
1 //Aumenta el puntero un tamaño en uno.
add //Aumento del puntero
set_global 0 //se actualiza el valor del puntero del heap.
//----ITERADOR = ITERADOR + 1
get_local 0
3
add
get_local 0
3
add
get_local $calc

1
Add
set_local $calc
Br $l29  //Al finalizar el ciclo, se hace un goto a la etiqueta de inicio del ciclo.
$l31:  // Inicio de la etiqueta falsa o de salida del ciclo. 


//.....FIN ARREGLO.....
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
0//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
0
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
1//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
0
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
2//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
0
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
3//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
0
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
4//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
0
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
5//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
0
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
6//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
0
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
7//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
0
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
8//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
0
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
9//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
0
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
10//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
0
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
11//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
0
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
12//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
0
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
13//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
0
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
14//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
0
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
15//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
0
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
16//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
0
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
17//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
0
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
18//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
0
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
19//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
0
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
20//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
0
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
21//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
0
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
22//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
0
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
23//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
1
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
24//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
1
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
25//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
0
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
26//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
0
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
27//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
0
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
28//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
0
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
29//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
0
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
30//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
0
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
31//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
0
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
32//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
1
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
33//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
2
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
34//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
1
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
35//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
1
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
36//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
1
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
37//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
0
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
38//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
0
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
39//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
0
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
40//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
0
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
41//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
1
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
42//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
1
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
43//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
1
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
44//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
1
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
45//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
1
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
46//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
0
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
47//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
1
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
48//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
0
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
49//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
0
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
50//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
0
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
51//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
0
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
52//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
1
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
53//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
1
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
54//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
1
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
55//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
1
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
56//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
0
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
57//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
1
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
58//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
0
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
59//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
0
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
60//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
0
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
61//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
0
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
62//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
1
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
63//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
1
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
64//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
0
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
65//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
0
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
66//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
0
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
67//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
0
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
68//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
1
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
69//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
0
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
70//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
0
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
71//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
0
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
72//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
0
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
73//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
0
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
74//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
0
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
75//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
0
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
76//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
0
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
77//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
0
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
78//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
1
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
79//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
0
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
80//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
0
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
81//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
0
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
82//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
0
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
83//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
0
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
84//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
0
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
85//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
0
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
86//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
0
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
87//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
0
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
88//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
1
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
89//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
0
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
90//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
0
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
91//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
0
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
92//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
0
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
93//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
0
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
94//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
0
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
95//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
0
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
96//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
0
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
97//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
0
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
98//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
1
//VALOR.
set_global $calc
//INICIALIZAR ARREGLO CON VALORES DE LA FORMA DE {}{}{}{}------------------.....------
get_local 0 //Posicion actual puntero pila
2
add
get_local $calc //Posicion donde inicia el arreglo.
2//Numero de dimensiones
add //Me coloco en la primera posicion que tiene valores del arreglo.
99//Posición donde irá el valor en el arreglo.
add //Obtengo la posición donde irá el valor
0
//VALOR.
set_global $calc
//...Inicio declaracion
get_local 0   //posicion actual en el puntero de la pila
3  //posición de la variable en la pila
add   //colocar la posición de la variable en la pilita
0
  //valor inicial de la variable
set_local $calc   //asignación del valor en la pila
//...Fin Declaración
//...Inicio declaracion
get_local 0   //posicion actual en el puntero de la pila
4  //posición de la variable en la pila
add   //colocar la posición de la variable en la pilita
0
  //valor inicial de la variable
set_local $calc   //asignación del valor en la pila
//...Fin Declaración
//...Inicio declaracion
get_local 0   //posicion actual en el puntero de la pila
5  //posición de la variable en la pila
add   //colocar la posición de la variable en la pilita
get_local 0
0
add
get_local $calc
  //valor inicial de la variable
set_local $calc   //asignación del valor en la pila
//...Fin Declaración
//...Inicio declaracion
get_local 0   //posicion actual en el puntero de la pila
6  //posición de la variable en la pila
add   //colocar la posición de la variable en la pilita
get_local 0
1
add
get_local $calc
  //valor inicial de la variable
set_local $calc   //asignación del valor en la pila
//...Fin Declaración
//...........Inicio While
$l32:     //Inicio del ciclo. 
get_local 0
3
add
get_local $calc

10

Lt
    //Codigo de la condición, se asume que el valor de la condición ya está en la pilita.
Eqz   // Se valida que la condición haya sido verdadera.
Br_if $l33   //Si es verdadera, hace un goto a la etiqueta verdadera.
Br $l34  //Si la condición es falsa, hace un goto a la etiqueta falsa.
$l33:  //Inicio de la lista de instrucciones. 
//...........Inicio While
$l35:     //Inicio del ciclo. 
get_local 0
4
add
get_local $calc

10

Lt
    //Codigo de la condición, se asume que el valor de la condición ya está en la pilita.
Eqz   // Se valida que la condición haya sido verdadera.
Br_if $l36   //Si es verdadera, hace un goto a la etiqueta verdadera.
Br $l37  //Si la condición es falsa, hace un goto a la etiqueta falsa.
$l36:  //Inicio de la lista de instrucciones. 
//........Inicio If
//INDICE.
get_local 0
3
add
get_local $calc
//TAMAÑO.
get_local 0
2 //posicion de la variable del arreglo.
add 
get_local $calc //Obtiene el valor de la posicion del arreglo.
0//numero de dimensión
add 
get_global $calc //Obtiene el valor de la posición del heap. 
Lt //Valor_Indice < Tamaño_Dimension
Eqz //Valida si es menor
br_if $l41   //salto etiqueta verdadero
br $error_arreglo  //goto etiqueta falso
$l41:    //inicio etiqueta verdadero
//INDICE.
get_local 0
4
add
get_local $calc
//TAMAÑO.
get_local 0
2 //posicion de la variable del arreglo.
add 
get_local $calc //Obtiene el valor de la posicion del arreglo.
1//numero de dimensión
add 
get_global $calc //Obtiene el valor de la posición del heap. 
Lt //Valor_Indice < Tamaño_Dimension
Eqz //Valida si es menor
br_if $l42   //salto etiqueta verdadero
br $error_arreglo  //goto etiqueta falso
$l42:    //inicio etiqueta verdadero

 //-------------------CALCULO DE LA POSICIÓN DEL ARREGLO----------------------------

get_local 0
3
add
get_local $calc

get_local 0
2 //posicion de la variable del arreglo.
add 
get_local $calc //Obtiene el valor de la posicion del arreglo.
1//numero de dimensión
add 
get_global $calc //Obtiene el valor de la posición del heap. 
mult 
get_local 0
4
add
get_local $calc

add 
2//SE SUMA EL NUMERO DE DIMENSIONES + 1, ES DONDE INICIAN LOS VALORES DEL ARREGLO.
add 
get_local 0
2 //posicion de la variable del arreglo.
add 
get_local $calc //Obtiene el valor de la posicion del arreglo.
add 
get_global $calc

0

Diff
Eqz
eqz   //Validación if
br_if $l38   //salto etiqueta verdadero
br $l39  //goto etiqueta falso
$l38:    //inicio etiqueta verdadero

//--Función Imprimir

//=============LLAMADA A FUNCIÓN IMPRIMIR===========================

//PARAMETRO1
get_local 0 // me posiciono en el inicio de la función actual.
0// busco la posición del parametro que voy a pasar
add  //Me posicion en el lugar del parametro
8// se coloca el tamaño de la función para poder guardar la variable
add //Se suma el tamaño del ambito para poder pasar el parametro a la posición que lo recibe.
//--GUARDAR STRING: Se guarda el puntero del heap el numero de veces del tamaño de la cadena.
get_global 0 //Posicion que quedará hasta el final de la cadena.
get_global 0 
110 //Caracter en ASCII 
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
92//Caracter ACII final cadena
tee_global $calc //Se guarda el valor en el stack
1 //Posición del caracter 
add 
set_global 0 //Actualizar valor del puntero 
// Traducción del valor que se va a pasar como parametro
set_local $calc //guardo el valor en la posición calculada

//LLAMADA DE LA FUNCIÓN CONCATENAR
get_local 0 //Coloca el valor del puntero al inicio de la pilita
8 //Coloca el valor del tamaño de la función al inicio de la pilita.
add //Suma el valor actual del puntero el tamaño de la función.
set_local 0 //Se cambia el valor del puntero en la stack
call $imprimir_cadena //se hace la llamada a la función para mover puntero IP

//REGRESAR PUNTERO DEL STACK
get_local 0 //Se coloca el puntero al inicio de la pilita
8 //Coloca el valor del tamaño de la función al inicio de la pilita.
diff //Resta el valo actual del puntero el tamaño de la función para retornar el ambito.
set_local 0 //Se regresa el valor del puntero en la stack.
//========================FIN IMPRIMIR==================
%c
//Valor a imprimir...
10
Print
br $l40   //salto etiqueta salida
$l39:    //inicio de la etiqueta falsa
//.........Fin If
//........Inicio If
//INDICE.
get_local 0
3
add
get_local $calc
//TAMAÑO.
get_local 0
2 //posicion de la variable del arreglo.
add 
get_local $calc //Obtiene el valor de la posicion del arreglo.
0//numero de dimensión
add 
get_global $calc //Obtiene el valor de la posición del heap. 
Lt //Valor_Indice < Tamaño_Dimension
Eqz //Valida si es menor
br_if $l46   //salto etiqueta verdadero
br $error_arreglo  //goto etiqueta falso
$l46:    //inicio etiqueta verdadero
//INDICE.
get_local 0
4
add
get_local $calc
//TAMAÑO.
get_local 0
2 //posicion de la variable del arreglo.
add 
get_local $calc //Obtiene el valor de la posicion del arreglo.
1//numero de dimensión
add 
get_global $calc //Obtiene el valor de la posición del heap. 
Lt //Valor_Indice < Tamaño_Dimension
Eqz //Valida si es menor
br_if $l47   //salto etiqueta verdadero
br $error_arreglo  //goto etiqueta falso
$l47:    //inicio etiqueta verdadero

 //-------------------CALCULO DE LA POSICIÓN DEL ARREGLO----------------------------

get_local 0
3
add
get_local $calc

get_local 0
2 //posicion de la variable del arreglo.
add 
get_local $calc //Obtiene el valor de la posicion del arreglo.
1//numero de dimensión
add 
get_global $calc //Obtiene el valor de la posición del heap. 
mult 
get_local 0
4
add
get_local $calc

add 
2//SE SUMA EL NUMERO DE DIMENSIONES + 1, ES DONDE INICIAN LOS VALORES DEL ARREGLO.
add 
get_local 0
2 //posicion de la variable del arreglo.
add 
get_local $calc //Obtiene el valor de la posicion del arreglo.
add 
get_global $calc

1

Diff
Eqz
eqz   //Validación if
br_if $l43   //salto etiqueta verdadero
br $l44  //goto etiqueta falso
$l43:    //inicio etiqueta verdadero
//-----INICIO PINTAR OVALO ----
//X
get_local 0
5
add
get_local $calc
//Y
get_local 0
6
add
get_local $calc
//COLOR
44880 //COLOR EN HEXA.
//ANCHO
30
//ALTO
20
$Oval
br $l45   //salto etiqueta salida
$l44:    //inicio de la etiqueta falsa
//.........Fin If
//........Inicio If
//INDICE.
get_local 0
3
add
get_local $calc
//TAMAÑO.
get_local 0
2 //posicion de la variable del arreglo.
add 
get_local $calc //Obtiene el valor de la posicion del arreglo.
0//numero de dimensión
add 
get_global $calc //Obtiene el valor de la posición del heap. 
Lt //Valor_Indice < Tamaño_Dimension
Eqz //Valida si es menor
br_if $l51   //salto etiqueta verdadero
br $error_arreglo  //goto etiqueta falso
$l51:    //inicio etiqueta verdadero
//INDICE.
get_local 0
4
add
get_local $calc
//TAMAÑO.
get_local 0
2 //posicion de la variable del arreglo.
add 
get_local $calc //Obtiene el valor de la posicion del arreglo.
1//numero de dimensión
add 
get_global $calc //Obtiene el valor de la posición del heap. 
Lt //Valor_Indice < Tamaño_Dimension
Eqz //Valida si es menor
br_if $l52   //salto etiqueta verdadero
br $error_arreglo  //goto etiqueta falso
$l52:    //inicio etiqueta verdadero

 //-------------------CALCULO DE LA POSICIÓN DEL ARREGLO----------------------------

get_local 0
3
add
get_local $calc

get_local 0
2 //posicion de la variable del arreglo.
add 
get_local $calc //Obtiene el valor de la posicion del arreglo.
1//numero de dimensión
add 
get_global $calc //Obtiene el valor de la posición del heap. 
mult 
get_local 0
4
add
get_local $calc

add 
2//SE SUMA EL NUMERO DE DIMENSIONES + 1, ES DONDE INICIAN LOS VALORES DEL ARREGLO.
add 
get_local 0
2 //posicion de la variable del arreglo.
add 
get_local $calc //Obtiene el valor de la posicion del arreglo.
add 
get_global $calc

2

Diff
Eqz
eqz   //Validación if
br_if $l48   //salto etiqueta verdadero
br $l49  //goto etiqueta falso
$l48:    //inicio etiqueta verdadero
//-----INICIO PINTAR OVALO ----
//X
get_local 0
5
add
get_local $calc
//Y
get_local 0
6
add
get_local $calc
//COLOR
16777215 //COLOR EN HEXA.
//ANCHO
30
//ALTO
20
$Oval
br $l50   //salto etiqueta salida
$l49:    //inicio de la etiqueta falsa
//.........Fin If
$l40:
$l45:
$l50:
get_local 0
5
add
get_local 0
5
add
get_local $calc

10

Add

set_local $calc
get_local 0 
 4
add 
get_local 0
4
add
get_local $calc

1
add 
set_local $calc
Br $l35  //Al finalizar el ciclo, se hace un goto a la etiqueta de inicio del ciclo.
$l37:  // Inicio de la etiqueta falsa o de salida del ciclo. 
//.......fin while
get_local 0
5
add
get_local 0
0
add
get_local $calc

set_local $calc
get_local 0
6
add
get_local 0
6
add
get_local $calc

10

Add

set_local $calc
get_local 0
4
add
0

set_local $calc
get_local 0 
 3
add 
get_local 0
3
add
get_local $calc

1
add 
set_local $calc
Br $l32  //Al finalizar el ciclo, se hace un goto a la etiqueta de inicio del ciclo.
$l34:  // Inicio de la etiqueta falsa o de salida del ciclo. 
//.......fin while
End
Function $dibujar_Arbustos_INT_INT
//...Inicio declaracion
get_local 0   //posicion actual en el puntero de la pila
2  //posición de la variable en la pila
add   //colocar la posición de la variable en la pilita
get_local 0
0
add
get_local $calc

50

Diff
  //valor inicial de la variable
set_local $calc   //asignación del valor en la pila
//...Fin Declaración
//...Inicio declaracion
get_local 0   //posicion actual en el puntero de la pila
3  //posición de la variable en la pila
add   //colocar la posición de la variable en la pilita
get_local 0
0
add
get_local $calc

50

Add
  //valor inicial de la variable
set_local $calc   //asignación del valor en la pila
//...Fin Declaración
//...Inicio declaracion
get_local 0   //posicion actual en el puntero de la pila
4  //posición de la variable en la pila
add   //colocar la posición de la variable en la pilita
get_local 0
0
add
get_local $calc
  //valor inicial de la variable
set_local $calc   //asignación del valor en la pila
//...Fin Declaración
//...Inicio declaracion
get_local 0   //posicion actual en el puntero de la pila
5  //posición de la variable en la pila
add   //colocar la posición de la variable en la pilita
get_local 0
1
add
get_local $calc
  //valor inicial de la variable
set_local $calc   //asignación del valor en la pila
//...Fin Declaración
//...Inicio declaracion
get_local 0   //posicion actual en el puntero de la pila
6  //posición de la variable en la pila
add   //colocar la posición de la variable en la pilita
get_local 0
1
add
get_local $calc
  //valor inicial de la variable
set_local $calc   //asignación del valor en la pila
//...Fin Declaración
//...Inicio declaracion
get_local 0   //posicion actual en el puntero de la pila
7  //posición de la variable en la pila
add   //colocar la posición de la variable en la pilita
get_local 0
1
add
get_local $calc

25

Diff
  //valor inicial de la variable
set_local $calc   //asignación del valor en la pila
//...Fin Declaración
//-----INICIO PINTAR PUNTO ----
//X
get_local 0
2
add
get_local $calc
//Y
get_local 0
5
add
get_local $calc
//COLOR
0 //COLOR EN HEXA.
//DIAMETRO
85
$Point
//-----INICIO PINTAR PUNTO ----
//X
get_local 0
2
add
get_local $calc
//Y
get_local 0
5
add
get_local $calc
//COLOR
44880 //COLOR EN HEXA.
//DIAMETRO
80
$Point
//-----INICIO PINTAR PUNTO ----
//X
get_local 0
3
add
get_local $calc
//Y
get_local 0
6
add
get_local $calc
//COLOR
0 //COLOR EN HEXA.
//DIAMETRO
85
$Point
//-----INICIO PINTAR PUNTO ----
//X
get_local 0
3
add
get_local $calc
//Y
get_local 0
6
add
get_local $calc
//COLOR
44880 //COLOR EN HEXA.
//DIAMETRO
80
$Point
//-----INICIO PINTAR PUNTO ----
//X
get_local 0
4
add
get_local $calc
//Y
get_local 0
7
add
get_local $calc
//COLOR
0 //COLOR EN HEXA.
//DIAMETRO
85
$Point
//-----INICIO PINTAR PUNTO ----
//X
get_local 0
4
add
get_local $calc
//Y
get_local 0
7
add
get_local $calc
//COLOR
44880 //COLOR EN HEXA.
//DIAMETRO
80
$Point
//-----INICIO PINTAR CUADRADO ----
//X
get_local 0
0
add
get_local $calc

110

2

Div

Diff
//Y
get_local 0
1
add
get_local $calc

25

Add

50

2

Div

Diff
//COLOR
44880 //COLOR EN HEXA.
//ANCHO
110
//ALTO
50
$Quadrate
End
Function $dibujar_Nubes_INT_INT
//...Inicio declaracion
get_local 0 //posicion actual en el puntero de la pila
2 //posición de la variable en la pila
add    //colocar la posición de la variable en la pilita
0  //valor inicial de la variable
set_local $calc    //asignación del valor en la pila
get_local 0 //posicion actual en el puntero de la pila
3 //posición de la variable en la pila
add    //colocar la posición de la variable en la pilita
0  //valor inicial de la variable
set_local $calc    //asignación del valor en la pila
get_local 0 //posicion actual en el puntero de la pila
4 //posición de la variable en la pila
add    //colocar la posición de la variable en la pilita
0  //valor inicial de la variable
set_local $calc    //asignación del valor en la pila
get_local 0 //posicion actual en el puntero de la pila
5 //posición de la variable en la pila
add    //colocar la posición de la variable en la pilita
0  //valor inicial de la variable
set_local $calc    //asignación del valor en la pila
//...Fin Declaración
//...Inicio declaracion
get_local 0 //posicion actual en el puntero de la pila
6 //posición de la variable en la pila
add    //colocar la posición de la variable en la pilita
0  //valor inicial de la variable
set_local $calc    //asignación del valor en la pila
get_local 0 //posicion actual en el puntero de la pila
7 //posición de la variable en la pila
add    //colocar la posición de la variable en la pilita
0  //valor inicial de la variable
set_local $calc    //asignación del valor en la pila
get_local 0 //posicion actual en el puntero de la pila
8 //posición de la variable en la pila
add    //colocar la posición de la variable en la pilita
0  //valor inicial de la variable
set_local $calc    //asignación del valor en la pila
get_local 0 //posicion actual en el puntero de la pila
9 //posición de la variable en la pila
add    //colocar la posición de la variable en la pilita
0  //valor inicial de la variable
set_local $calc    //asignación del valor en la pila
//...Fin Declaración
get_local 0
2
add
get_local 0
0
add
get_local $calc

50

Diff

set_local $calc
get_local 0
3
add
get_local 0
0
add
get_local $calc

50

Add

set_local $calc
get_local 0
4
add
get_local 0
0
add
get_local $calc

set_local $calc
get_local 0
5
add
get_local 0
0
add
get_local $calc

set_local $calc
get_local 0
6
add
get_local 0
1
add
get_local $calc

set_local $calc
get_local 0
7
add
get_local 0
1
add
get_local $calc

set_local $calc
get_local 0
8
add
get_local 0
1
add
get_local $calc

25

Diff

set_local $calc
get_local 0
9
add
get_local 0
1
add
get_local $calc

25

Add

set_local $calc
//-----INICIO PINTAR OVALO ----
//X
get_local 0
2
add
get_local $calc
//Y
get_local 0
6
add
get_local $calc
//COLOR
0 //COLOR EN HEXA.
//ANCHO
105
//ALTO
55
$Oval
//-----INICIO PINTAR OVALO ----
//X
get_local 0
2
add
get_local $calc
//Y
get_local 0
6
add
get_local $calc
//COLOR
16777215 //COLOR EN HEXA.
//ANCHO
100
//ALTO
50
$Oval
//-----INICIO PINTAR OVALO ----
//X
get_local 0
3
add
get_local $calc
//Y
get_local 0
7
add
get_local $calc
//COLOR
0 //COLOR EN HEXA.
//ANCHO
105
//ALTO
55
$Oval
//-----INICIO PINTAR OVALO ----
//X
get_local 0
3
add
get_local $calc
//Y
get_local 0
7
add
get_local $calc
//COLOR
16777215 //COLOR EN HEXA.
//ANCHO
100
//ALTO
50
$Oval
//-----INICIO PINTAR OVALO ----
//X
get_local 0
4
add
get_local $calc
//Y
get_local 0
8
add
get_local $calc
//COLOR
0 //COLOR EN HEXA.
//ANCHO
105
//ALTO
55
$Oval
//-----INICIO PINTAR OVALO ----
//X
get_local 0
4
add
get_local $calc
//Y
get_local 0
8
add
get_local $calc
//COLOR
16777215 //COLOR EN HEXA.
//ANCHO
100
//ALTO
50
$Oval
//-----INICIO PINTAR OVALO ----
//X
get_local 0
5
add
get_local $calc
//Y
get_local 0
9
add
get_local $calc
//COLOR
0 //COLOR EN HEXA.
//ANCHO
105
//ALTO
55
$Oval
//-----INICIO PINTAR OVALO ----
//X
get_local 0
5
add
get_local $calc
//Y
get_local 0
9
add
get_local $calc
//COLOR
16777215 //COLOR EN HEXA.
//ANCHO
100
//ALTO
50
$Oval
//-----INICIO PINTAR CUADRADO ----
//X
get_local 0
0
add
get_local $calc

110

2

Div

Diff
//Y
get_local 0
1
add
get_local $calc

50

2

Div

Diff
//COLOR
16777215 //COLOR EN HEXA.
//ANCHO
110
//ALTO
50
$Quadrate
End
Function $ConcatenarString
get_global 0 //VALOR DONDE INICIA LA CONCATENACIÓN.
get_local 0   //posicion actual en el puntero de la pila
2  //posición de la variable en la pila
add   //colocar la posición de la variable en la pilita
0 //valor inicial del iterador
set_local $calc   //asignación del valor en la pila
$l55:
get_local 0 //Posición del primer parametro
get_local $calc 
get_local 0
2
add
get_local $calc

add //Valor de la posición del caracter actual
get_global $calc //obtengo el valor del caracter
92 //valor del caracter del final de cadena
diff 
eqz  //verifica que los caracteres sean iguales
br_if $l53   //salto etiqueta verdadero
br $l54  //goto etiqueta falso
$l53:    //inicio etiqueta verdadero
get_global 0 //valor actual del apuntador del heap
get_local 0 //Posición del primer parametro en el heap
get_local $calc 
get_local 0
2
add
get_local $calc

add //Valor de la posición del caracter actual
get_global $calc //Obtengo el valor del caracter
set_global $calc //Guardo el valor del caracter en la posicion actual del heap
get_global 0
1 
add 
set_global 0 //Aumente el valor del puntero del heap.
 //----ITERADOR = ITERADOR + 1
get_local 0
2
add
get_local 0
2
add
get_local $calc

1
Add
set_local $calc
br $l55
$l54:
get_local 0   //posicion actual en el puntero de la pila
2  //posición de la variable en la pila
add   //colocar la posición de la variable en la pilita
0 //valor inicial del iterador
set_local $calc   //asignación del valor en la pila
$l56:
get_local 0 //Posición del primer parametro
1 
add 
get_local $calc
get_local 0
2
add
get_local $calc

add //Valor de la posición del caracter actual
get_global $calc //obtengo el valor del caracter
92 //valor del caracter del final de cadena
diff 
eqz  //verifica que los caracteres sean iguales
br_if $l57   //salto etiqueta verdadero
br $l58  //goto etiqueta falso
$l57:    //inicio etiqueta verdadero
get_global 0 //valor actual del apuntador del heap
get_local 0 //Posición del primer parametro
1 
add 
get_local $calc
get_local 0
2
add
get_local $calc

add //Valor de la posición del caracter actual
get_global $calc //Obtengo el valor del caracter
set_global $calc //Guardo el valor del caracter en la posicion actual del heap
get_global 0
1 
add 
set_global 0 //Aumente el valor del puntero del heap.
 //----ITERADOR = ITERADOR + 1
get_local 0
2
add
get_local 0
2
add
get_local $calc

1
Add
set_local $calc
br $l56
$l58:
get_global 0 //valor actual del heap
92 //caracter final de la concatenación
set_global $calc //Se copia el final de cadena
get_global 0 //valor actual del heap 
1 
add 
set_global 0 
End



Function $double_to_int
get_global 0 //POSICION DONDE INICIA EL VALOR EN STRING 

//VALIDAR QUE EL NUMERO A CONVERTIR SEA NEGATIVO.
get_local 0 //Coloca el valor del puntero al inicio de la pilita
get_local $calc
0
Lt //numero<0
eqz 
br_if $l59
br $l60
$l59:
get_local 0 //POSICION PARA ACTUALIZAR VALOR.
get_local 0 //Coloca el valor del puntero al inicio de la pilita
get_local $calc
-1
mult 
set_local $calc
get_global 0
45
set_global $calc
get_global 0
1 
add 
set_global 0
$l60:
//========================INICIO LLAMADA A INT_TO_STRING==================

//PARAMETRO1
get_local 0 // me posiciono en el inicio de la función actual.
0// busco la posición del parametro que voy a pasar
add  //Me posicion en el lugar del parametro
1// se coloca el tamaño de la función para poder guardar la variable
add //Se suma el tamaño del ambito para poder pasar el parametro a la posición que lo recibe.
get_local 0
get_local $calc
// Traducción del valor que se va a pasar como parametro
get_local 0
get_local $calc
// VALOR DEL PARAMETRO
1 
mod
diff //RESTA: VALOR-(VALOR%1) = PARTE ENTERA.
set_local $calc //guardo el valor en la posición calculada

//LLAMADA DE LA FUNCIÓN INT_TOSTRING
get_local 0 //Coloca el valor del puntero al inicio de la pilita
1 //Coloca el valor del tamaño de la función al inicio de la pilita.
add //Suma el valor actual del puntero el tamaño de la función.
set_local 0 //Se cambia el valor del puntero en la stack
call $int_to_string //se hace la llamada a la función para mover puntero IP

//REGRESAR PUNTERO DEL STACK
get_local 0 //Se coloca el puntero al inicio de la pilita
1 //Coloca el valor del tamaño de la función al inicio de la pilita.
diff //Resta el valo actual del puntero el tamaño de la función para retornar el ambito.
set_local 0 //Se regresa el valor del puntero en la stack.
//========================FIN CONVERSION ENTERA.==================
get_local 0 
get_local $calc //VALOR DEL PARAMETRO
1 
mod
br_if $l61
br $l62
$l62:

 //SE CONCATENA EL PUNTO PARA SEPARAR ENTERO DE DECIMAL
get_global 0
46 //ASCII DEL PUNTO
set_global $calc
get_global 0 //valor actual del heap 
1 
add 
set_global 0 
//========================OBTENER LA PARTE DECIMAL DEL NUMERO.==================
get_local 0 
get_local 0 
get_local $calc //VALOR DEL PARAMETRO
1 
mod
100
mult //multiplico el decimal * 100 y lo convierto a cadena.
set_local $calc //Actualizo el valor del parametro.
//========================INICIO LLAMADA A INT_TO_STRING==================

//PARAMETRO1
get_local 0 // me posiciono en el inicio de la función actual.
0// busco la posición del parametro que voy a pasar
add  //Me posicion en el lugar del parametro
1// se coloca el tamaño de la función para poder guardar la variable
add //Se suma el tamaño del ambito para poder pasar el parametro a la posición que lo recibe.
get_local 0
get_local $calc
// Traducción del valor que se va a pasar como parametro
set_local $calc //guardo el valor en la posición calculada

//LLAMADA DE LA FUNCIÓN INT_TOSTRING
get_local 0 //Coloca el valor del puntero al inicio de la pilita
1 //Coloca el valor del tamaño de la función al inicio de la pilita.
add //Suma el valor actual del puntero el tamaño de la función.
set_local 0 //Se cambia el valor del puntero en la stack
call $int_to_string //se hace la llamada a la función para mover puntero IP

//REGRESAR PUNTERO DEL STACK
get_local 0 //Se coloca el puntero al inicio de la pilita
1 //Coloca el valor del tamaño de la función al inicio de la pilita.
diff //Resta el valo actual del puntero el tamaño de la función para retornar el ambito.
set_local 0 //Se regresa el valor del puntero en la stack.
//========================FIN CONVERSION DECIMAL.==================
$l61:
get_global 0 //valor actual del heap
92 //caracter final de la concatenación
set_global $calc //Se copia el final de cadena
get_global 0 //valor actual del heap 
1 
add 
set_global 0 
End



Function $int_to_string
//VALOR DE Y
get_local 0   //posicion actual en el puntero de la pila
1  //posición de la variable en la pila
add   //colocar la posición de la variable en la pilita
0 //valor inicial del iterador
set_local $calc   //asignación del valor en la pila
//VALOR DE r
get_local 0   //posicion actual en el puntero de la pila
2  //posición de la variable en la pila
add   //colocar la posición de la variable en la pilita
get_local 0  //puntero de la pila donde inicia la función
get_local $calc //Valor del parametro.
set_local $calc   //asignación del valor en la pila

//---------------INICIO DE CICLO-----------------
//-----VALIDAR SI EL VALOR ES > 9
get_local 0
2
add
get_local $calc

10
Lt
eqz 
br_if $l66
br $l67
$l67:
$l63:
get_local 0
2
add
get_local $calc
//Valor del numero de repeticiones: r
1 //cuando sea igual a cero se termina
Gte 
eqz  //verifica que sea mayor que 1
br_if $l64   //salto etiqueta verdadero
br $l65  //goto etiqueta falso
$l64:    //inicio etiqueta verdadero
//=============|r=
get_local 0 
2 //Pos de r
add //Obtengo la posición de r para asignar nuevo valor.
//==============|r / 10
get_local 0
2
add
get_local $calc
10
div 
set_local $calc //R = R/10
$l66:
//----Y = Y + 1
get_local 0
1
add
get_local 0
1
add
get_local $calc

1
Add
set_local $calc //Y = Y+1
br $l63
$l65:
get_local 0   //posicion actual en el puntero de la pila
3  //posición de la variable en la pila
add   //colocar la posición de la variable en la pilita
//========================INICIO POTENCIA==================

//PARAMETRO1
get_local 0 // me posiciono en el inicio de la función actual.
0// busco la posición del parametro que voy a pasar
add  //Me posicion en el lugar del parametro
3// se coloca el tamaño de la función para poder guardar la variable
add //Se suma el tamaño del ambito para poder pasar el parametro a la posición que lo recibe.
get_local 0
1
add
get_local $calc
// Traducción del valor que se va a pasar como parametro
1
diff
set_local $calc //guardo el valor en la posición calculada

//LLAMADA DE LA FUNCIÓN CONCATENAR
get_local 0 //Coloca el valor del puntero al inicio de la pilita
3 //Coloca el valor del tamaño de la función al inicio de la pilita.
add //Suma el valor actual del puntero el tamaño de la función.
set_local 0 //Se cambia el valor del puntero en la stack
call $Potencia //se hace la llamada a la función para mover puntero IP

//REGRESAR PUNTERO DEL STACK
get_local 0 //Se coloca el puntero al inicio de la pilita
3 //Coloca el valor del tamaño de la función al inicio de la pilita.
diff //Resta el valo actual del puntero el tamaño de la función para retornar el ambito.
set_local 0 //Se regresa el valor del puntero en la stack.
//========================FIN POTENCIA==================
set_local $calc   //asignación del valor DE LA PONTENCIA

//---------------INICIO DE CICLO-----------------
$l68:
get_local 0
1
add
get_local $calc
//Valor del numero de repeticiones: r
0 //cuando sea igual a cero se termina
Gt 
eqz  //verifica que sea mayor que 1
br_if $l69   //salto etiqueta verdadero
br $l70  //goto etiqueta falso
$l69:    //inicio etiqueta verdadero
//NUMERO_ENTRADA / POTENCIA
get_global 0 //obtengo el puntero del heap.
 get_local 0 
get_local $calc //obtengo el valor del parametro que es el digito a convertir.
get_local 0
3
add
get_local $calc
//TENGO EL VALOR DE LA POTENCIA
div 
//TENGO EL VALOR EN NUMERO ENTERO.
48
add //LO CONVERTÍ EN ASCII.
set_global $calc //COLOCO EL ASCII EN EL HEAP.
get_global 0 //valor actual del heap PARA AUMENTAR.
1 
add 
set_global 0 

//===============valor = valor % inicial;=============
get_local 0 //posicion actual del parametro
get_local 0 //valor actual del parametro
get_local $calc //valor
get_local 0
3
add
get_local $calc

mod
set_local $calc //actualizo el valor del parametro.

//===============inicial = inicial / 10;==============
get_local 0
3//POSICION DE LA POTENCIA.
add
get_local 0
3
add
get_local $calc

10
div //Potencia / 10
set_local $calc //Actualizo el valor de la potencia.

//===============num--;==============
get_local 0
1//NUMERO DE DIGITOS.
add
get_local 0
1
add
get_local $calc

1
diff
set_local $calc
br $l68
$l70:
End



Function $Potencia

//.....INICIO POTENCIA.....

//----DECLARACION DE LA VARAIBLE QUE LLEVARÁ EL ITERADOR: i
get_local 0   //posicion actual en el puntero de la pila
1  //posición de la variable en la pila
add   //colocar la posición de la variable en la pilita
0 //valor inicial del iterador
set_local $calc   //asignación del valor en la pila
//----DECLARACION DE LA VARAIBLE QUE LLEVARÁ EL RESULTADO: resultado
get_local 0   //posicion actual en el puntero de la pila
2  //posición de la variable en la pila
add   //colocar la posición de la variable en la pilita
1 //valor inicial del resultado
set_local $calc   //asignación del valor en la pila
$l71:     //Inicio del ciclo. 
//----CONDICIÓN DEL CICLO i < base: i
get_local 0
1
add
get_local $calc

get_local 0 //Posición del primer parametro
get_local $calc

Lt
Eqz   // Se valida que la condición haya sido verdadera.
Br_if $l72   //Si es verdadera, hace un goto a la etiqueta verdadera.
Br $l73  //Si la condición es falsa, hace un goto a la etiqueta falsa.
$l72:  //Inicio de la lista de instrucciones. 
//----RESULTADO = RESULTADO * BASE
get_local 0
2
add
get_local 0
2
add
get_local $calc

10
Mult
set_local $calc
//----ITERADOR = ITERADOR + 1
get_local 0
1
add
get_local 0
1
add
get_local $calc

1
Add
set_local $calc
Br $l71  //Al finalizar el ciclo, se hace un goto a la etiqueta de inicio del ciclo.
$l73:  // Inicio de la etiqueta falsa o de salida del ciclo. 
//COLOCAR VALOR DEL RESULTADO EN LA CIMA.....
get_local 0
2
add
get_local $calc



//.....FIN POTENCIA.....
End
Function $imprimir_cadena
get_local 0   //posicion actual en el puntero de la pila
1  //posición de la variable en la pila
add   //colocar la posición de la variable en la pilita
0 //valor inicial del iterador
set_local $calc   //asignación del valor en la pila
$l76:
get_local 0 //Posición del primer parametro
get_local $calc 
get_local 0
1
add
get_local $calc

add //Valor de la posición del caracter actual
get_global $calc //obtengo el valor del caracter
92 //valor del caracter del final de cadena
diff 
eqz  //verifica que los caracteres sean iguales
br_if $l74   //salto etiqueta verdadero
br $l75  //goto etiqueta falso
$l74:    //inicio etiqueta verdadero
%c
get_local 0 //Posición del primer parametro
get_local $calc 
get_local 0
1
add
get_local $calc

add //Valor de la posición del caracter actual
get_global $calc //obtengo el valor del caracter
Print
//----ITERADOR = ITERADOR + 1
get_local 0
1
add
get_local 0
1
add
get_local $calc

1
Add
set_local $calc
br $l76
$l75:
End
Function $CompararString
get_local 0   //posicion actual en el puntero de la pila
2  //posición de la variable en la pila
add   //colocar la posición de la variable en la pilita
0 //valor inicial del iterador
set_local $calc   //asignación del valor en la pila
$l79:
get_local 0 //Posición del primer parametro
get_local $calc 
get_local 0
2
add
get_local $calc

add //Valor de la posición del caracter actual
get_global $calc //obtengo el valor del caracter
get_local 0 //Posición del primer parametro
1
add
get_local $calc 
get_local 0
2
add
get_local $calc

add //Valor de la posición del caracter actual
get_global $calc //obtengo el valor del caracter
diff 
eqz  //verifica que los caracteres sean iguales
eqz  //verifica que los caracteres sean iguales
br_if $l77   //salto etiqueta verdadero
br $l78  //goto etiqueta falso
$l77:    //inicio etiqueta verdadero
get_local 0 //Posición del primer parametro
get_local $calc 
get_local 0
2
add
get_local $calc

add //Valor de la posición del caracter actual
get_global $calc //obtengo el valor del caracter
92 //valor del caracter del final de cadena
diff 
eqz  //verifica que los caracteres sean iguales
br_if $l80   //salto etiqueta verdadero
br $l81  //goto etiqueta falso
$l80:    //inicio etiqueta verdadero
//----ITERADOR = ITERADOR + 1
get_local 0
2
add
get_local 0
2
add
get_local $calc

1
Add
set_local $calc
br $l79
$l81:
1 //AL SER IGUALES RETORNO UN UNO EN LA PILITA
br $l82
$l78:
0 //AL SER DIFERENTES RETORNO UN CERO EN LA PILITA
$l82:
End
Function $CalcularPesoString
get_local 0   //posicion actual en el puntero de la pila
2  //posición de la variable en la pila
add   //colocar la posición de la variable en la pilita
0 //valor inicial del iterador
set_local $calc   //asignación del valor en la pila
0 //VALOR DE INICIO DE LA SUMA.
$l85:
get_local 0 //Posición del primer parametro
get_local $calc 
get_local 0
2
add
get_local $calc

add //Valor de la posición del caracter actual
get_global $calc //obtengo el valor del caracter
92 //valor del caracter del final de cadena
diff 
eqz  //verifica que los caracteres sean iguales
br_if $l83   //salto etiqueta verdadero
br $l84  //goto etiqueta falso
$l83:    //inicio etiqueta verdadero
get_local 0 //Posición del primer parametro en el heap
get_local $calc 
get_local 0
2
add
get_local $calc

add //Valor de la posición del caracter actual
get_global $calc //Obtengo el valor del caracter
add //VOY SUMANDO EL VALOR DE LOS CARACTERES.
//----ITERADOR = ITERADOR + 1
get_local 0
2
add
get_local 0
2
add
get_local $calc

1
Add
set_local $calc
br $l85
$l84:
End
