estructura persona{
	entero edad;
	cadena nombre;
	entero carnet;
	entero puntuacion;	
}
persona p;

principal() {
	
	imprimir("inicio de la ejecucion");
	imprimir("antes de iniciar con valores tiene la mitad de sus puntos en manejo de estructuras");
  	imprimirPersona(crearPersona(p, 1, "Luis", 3, 1)); 
    imprimirPersona(crearPersona(p, 20, "Sebastian", 201603014, 100)); 
    imprimir("ha impreso los datos del estudiante tiene el resto de puntos en manejo de esturcturas");
    imprimir("*******************************************************************");
    
    imprimir("test 1 " + makeArrayConsecutive2() + " debe de ser 3");   
    imprimir("test 1 " + shapeArea(5) + " debe de ser 41");
	imprimir("test 2 " + shapeArea(1) + " debe de ser 1");
	imprimir("test 3 " + shapeArea(3) + " debe de ser 13");
    imprimir("*******************************************************************");    
    alllongestString(); //it is ok XD6
    reverse(); //it is ok XD104 miketalavera8 miketalaveramiketalavera
    sort(); //it is ok XD9
    islucky(); //it is ok XD8
    common(); //it is ok XD7
}

persona crearPersona(persona p, entero edad, cadena nombre, entero carnet, entero puntacion)
{

  
  persona p2;
  p2.edad = edad;
  p2.nombre = nombre;
  p2.carnet = carnet;
  p2.puntuacion = puntacion;
  retornar p2;
}

vacio imprimirPersona(persona p)
{
	imprimir(p.edad);
	imprimir(p.nombre);
	imprimir(p.carnet);
	imprimir(p.puntuacion);
}


//entero array1 [4] = {6, 2, 3, 8}; //este imprime 3
entero array1 [2] = {0, 3};  //este imprime 2
//entero array1 [2] = {6, 3}; este imprime 2

entero getMax(entero size)
{
	entero max = -100000;
	para(entero i = 0; i < size; i++)
	{	
		si(max < array1[i])
		{
			max = array1[i];
		}
	}
	retornar max;
}

entero getMin(entero size)
{
	entero min = 100000;
	para(entero i = 0; i < size; i++)
	{	
		si(min > array1[i])
		{
			min = array1[i];
		}
	}
	retornar min;	
}

entero makeArrayConsecutive2()
{
	retornar (getMax(2) - getMin(2)) - (2 - 1);	
}


entero shapeArea(entero n)
{
	si(n == 1)
	{
		retornar 1;
	}
	retornar shapeArea(n-1) + 4*(n-1);
}


vacio alllongestString()
{
	entero a = 0;
	mientras(verdadero){
		
		si(a == 6)
		{
			imprimir("it is ok XD" + a);
			detener;
		}
		a++;
	}
}

vacio reverse()
{
	entero a = 0;
	mientras (verdadero){		
		si(a == 10)
		{
			imprimir("it is ok XD" + a);
			detener;
		}
		a++;
	}
	imprimir(num1(pruebaEntero(2, 2), pruebaCadena("mike", "talavera")));
}

entero pruebaEntero(entero a, entero b)
{
	retornar a + b;
}

cadena pruebaCadena(cadena a, cadena b)
{
	retornar a + b;	
}

cadena num1(entero a, cadena b)
{
	retornar num2(a, b) + " "  + num3(a*2,  b+b);
}


cadena num2(entero a, cadena b)
{
	retornar a + " " + b;	
}

cadena num3(entero a, cadena b)
{
	retornar a + " " + b;
}

vacio sort()
{
	entero a = 0;
	mientras (verdadero){
		
		si(a == 9)
		{
			imprimir("it is ok XD" + a);
			detener;
		}
		a++;
	}
}

vacio islucky()
{
	entero a = 0;
	mientras(verdadero){
		
		si(a == 8)
		{
			imprimir("it is ok XD" + a);
			detener;
		}
		a++;
	}
}




vacio common()
{
	entero a = 0;
	mientras (verdadero){
		
		si(a == 7)
		{
			imprimir("it is ok XD" + a);
			detener;
		}
		a++;
	}
}