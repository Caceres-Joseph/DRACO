
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Nov 09 01:41:43 CST 2018
//----------------------------------------------------

package D_plus.Gramatica.Sintactico;

import java.util.List;
import java_cup.runtime.*;
import java.util.ArrayList;
import Gui.Elementos.elementoGlobal;
import Gui.Items.itemAtributo;
import D_plus.Nodos.Arreglo.*;
import D_plus.Nodos.AsignarValor.*;
import D_plus.Nodos.CuerpoAbsoluto.*;
import D_plus.Nodos.CuerpoRelativo.*;
import D_plus.Nodos.DeclararVariable.*;
import D_plus.Nodos.Estructura.*;
import D_plus.Nodos.FuncionMetodo.*;
import D_plus.Nodos.FuncionesNativas.*;
import D_plus.Nodos.IdVarFunc.*;
import D_plus.Nodos.Inicio.*;
import D_plus.Nodos.Parametros.*;
import D_plus.Nodos.Sentencia.*;
import D_plus.Nodos.Sentencia.Si.*;
import D_plus.Nodos.Sentencia.SiSimplificado.*;
import D_plus.Nodos.Sentencia.While.*;
import D_plus.Nodos.SentenciaControl.*;
import D_plus.Nodos.Sentencia.For.*;
import D_plus.Nodos.Valor.*;
import D_plus.Nodos.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Nov 09 01:41:43 CST 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\202\000\002\002\004\000\002\002\003\000\002\004" +
    "\007\000\002\055\003\000\002\055\003\000\002\055\003" +
    "\000\002\055\003\000\002\055\003\000\002\055\003\000" +
    "\002\005\005\000\002\005\003\000\002\006\004\000\002" +
    "\007\005\000\002\007\003\000\002\010\004\000\002\010" +
    "\003\000\002\011\004\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\012\007\000" +
    "\002\013\012\000\002\013\011\000\002\014\011\000\002" +
    "\014\010\000\002\015\005\000\002\015\004\000\002\016" +
    "\006\000\002\016\005\000\002\016\005\000\002\016\004" +
    "\000\002\017\004\000\002\017\004\000\002\020\005\000" +
    "\002\020\003\000\002\021\005\000\002\021\005\000\002" +
    "\022\003\000\002\022\004\000\002\023\004\000\002\023" +
    "\003\000\002\024\005\000\002\025\004\000\002\025\003" +
    "\000\002\025\006\000\002\025\005\000\002\025\004\000" +
    "\002\025\007\000\002\025\006\000\002\026\004\000\002" +
    "\026\007\000\002\026\006\000\002\026\005\000\002\026" +
    "\010\000\002\026\007\000\002\027\004\000\002\027\005" +
    "\000\002\027\005\000\002\030\003\000\002\030\002\000" +
    "\002\057\004\000\002\057\003\000\002\031\004\000\002" +
    "\031\004\000\002\031\004\000\002\031\004\000\002\031" +
    "\003\000\002\031\003\000\002\056\003\000\002\056\003" +
    "\000\002\056\003\000\002\032\004\000\002\032\005\000" +
    "\002\033\004\000\002\034\004\000\002\035\003\000\002" +
    "\035\003\000\002\035\003\000\002\036\011\000\002\036" +
    "\012\000\002\036\012\000\002\037\012\000\002\037\013" +
    "\000\002\037\013\000\002\040\006\000\002\041\007\000" +
    "\002\042\011\000\002\043\015\000\002\043\015\000\002" +
    "\044\003\000\002\044\003\000\002\044\003\000\002\044" +
    "\003\000\002\044\003\000\002\044\003\000\002\045\006" +
    "\000\002\045\005\000\002\046\006\000\002\047\006\000" +
    "\002\050\006\000\002\051\006\000\002\052\006\000\002" +
    "\053\003\000\002\053\003\000\002\054\004\000\002\054" +
    "\005\000\002\054\005\000\002\054\005\000\002\054\005" +
    "\000\002\054\005\000\002\054\005\000\002\054\005\000" +
    "\002\054\005\000\002\054\005\000\002\054\005\000\002" +
    "\054\005\000\002\054\005\000\002\054\005\000\002\054" +
    "\005\000\002\054\004\000\002\054\005\000\002\054\003" +
    "\000\002\054\003\000\002\054\003\000\002\054\003\000" +
    "\002\054\003\000\002\054\003\000\002\054\003\000\002" +
    "\054\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u010c\000\024\037\010\040\015\041\024\053\005\055" +
    "\020\056\021\057\016\060\023\061\022\001\002\000\026" +
    "\002\uffed\037\uffed\040\uffed\041\uffed\053\uffed\055\uffed\056" +
    "\uffed\057\uffed\060\uffed\061\uffed\001\002\000\006\041\ufff9" +
    "\070\ufff9\001\002\000\026\002\ufff2\037\ufff2\040\ufff2\041" +
    "\ufff2\053\ufff2\055\ufff2\056\ufff2\057\ufff2\060\ufff2\061\ufff2" +
    "\001\002\000\026\002\000\037\010\040\015\041\024\053" +
    "\005\055\020\056\021\057\016\060\023\061\022\001\002" +
    "\000\004\023\u010a\001\002\000\004\002\u0109\001\002\000" +
    "\006\004\u0108\006\206\001\002\000\006\041\362\070\211" +
    "\001\002\000\026\002\ufff0\037\ufff0\040\ufff0\041\ufff0\053" +
    "\ufff0\055\ufff0\056\ufff0\057\ufff0\060\ufff0\061\ufff0\001\002" +
    "\000\004\070\352\001\002\000\006\041\ufffb\070\ufffb\001" +
    "\002\000\026\002\uffef\037\uffef\040\uffef\041\uffef\053\uffef" +
    "\055\uffef\056\uffef\057\uffef\060\uffef\061\uffef\001\002\000" +
    "\006\041\ufffd\070\ufffd\001\002\000\006\041\ufffc\070\ufffc" +
    "\001\002\000\006\041\ufffe\070\ufffe\001\002\000\006\041" +
    "\ufffa\070\ufffa\001\002\000\004\023\026\001\002\000\026" +
    "\002\uffee\037\uffee\040\uffee\041\uffee\053\uffee\055\uffee\056" +
    "\uffee\057\uffee\060\uffee\061\uffee\001\002\000\004\024\027" +
    "\001\002\000\004\027\030\001\002\000\050\030\uffc5\042" +
    "\070\043\042\044\056\045\047\046\046\047\033\050\044" +
    "\051\051\052\032\053\066\054\053\055\020\056\021\057" +
    "\016\060\023\061\022\063\062\070\036\001\002\000\004" +
    "\004\351\001\002\000\004\023\346\001\002\000\004\023" +
    "\342\001\002\000\004\070\211\001\002\000\004\004\uffa7" +
    "\001\002\000\064\004\uffd5\005\uffd5\006\uffd5\007\uffd5\010" +
    "\uffd5\011\uffd5\012\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5" +
    "\017\uffd5\021\uffd5\022\uffd5\023\332\024\uffd5\025\154\026" +
    "\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5" +
    "\036\uffd5\001\002\000\050\030\uffb5\042\uffb5\043\uffb5\044" +
    "\uffb5\045\uffb5\046\uffb5\047\uffb5\050\uffb5\051\uffb5\052\uffb5" +
    "\053\uffb5\054\uffb5\055\uffb5\056\uffb5\057\uffb5\060\uffb5\061" +
    "\uffb5\063\uffb5\070\uffb5\001\002\000\004\030\330\001\002" +
    "\000\050\030\uffbe\042\uffbe\043\uffbe\044\uffbe\045\uffbe\046" +
    "\uffbe\047\uffbe\050\uffbe\051\uffbe\052\uffbe\053\uffbe\054\uffbe" +
    "\055\uffbe\056\uffbe\057\uffbe\060\uffbe\061\uffbe\063\uffbe\070" +
    "\uffbe\001\002\000\004\004\327\001\002\000\050\030\uffc3" +
    "\042\uffc3\043\uffc3\044\uffc3\045\uffc3\046\uffc3\047\uffc3\050" +
    "\uffc3\051\uffc3\052\uffc3\053\uffc3\054\uffc3\055\uffc3\056\uffc3" +
    "\057\uffc3\060\uffc3\061\uffc3\063\uffc3\070\uffc3\001\002\000" +
    "\004\023\324\001\002\000\050\030\uffb3\042\uffb3\043\uffb3" +
    "\044\uffb3\045\uffb3\046\uffb3\047\uffb3\050\uffb3\051\uffb3\052" +
    "\uffb3\053\uffb3\054\uffb3\055\uffb3\056\uffb3\057\uffb3\060\uffb3" +
    "\061\uffb3\063\uffb3\070\uffb3\001\002\000\004\023\316\001" +
    "\002\000\004\023\271\001\002\000\050\030\uffbb\042\uffbb" +
    "\043\uffbb\044\uffbb\045\uffbb\046\uffbb\047\uffbb\050\uffbb\051" +
    "\uffbb\052\uffbb\053\uffbb\054\uffbb\055\uffbb\056\uffbb\057\uffbb" +
    "\060\uffbb\061\uffbb\063\uffbb\070\uffbb\001\002\000\004\023" +
    "\266\001\002\000\014\004\265\007\214\021\151\034\234" +
    "\036\235\001\002\000\004\023\262\001\002\000\050\030" +
    "\uffba\042\uffba\043\uffba\044\uffba\045\uffba\046\uffba\047\uffba" +
    "\050\uffba\051\uffba\052\uffba\053\uffba\054\uffba\055\uffba\056" +
    "\uffba\057\uffba\060\uffba\061\uffba\063\uffba\070\uffba\001\002" +
    "\000\004\004\261\001\002\000\004\004\260\001\002\000" +
    "\004\004\uffa5\001\002\000\004\004\uffa4\001\002\000\004" +
    "\004\uffa3\001\002\000\004\023\227\001\002\000\050\030" +
    "\uffbc\042\uffbc\043\uffbc\044\uffbc\045\uffbc\046\uffbc\047\uffbc" +
    "\050\uffbc\051\uffbc\052\uffbc\053\uffbc\054\uffbc\055\uffbc\056" +
    "\uffbc\057\uffbc\060\uffbc\061\uffbc\063\uffbc\070\uffbc\001\002" +
    "\000\006\004\207\006\206\001\002\000\004\004\uffa6\001" +
    "\002\000\006\023\203\070\ufff9\001\002\000\050\030\uffb4" +
    "\042\uffb4\043\uffb4\044\uffb4\045\uffb4\046\uffb4\047\uffb4\050" +
    "\uffb4\051\uffb4\052\uffb4\053\uffb4\054\uffb4\055\uffb4\056\uffb4" +
    "\057\uffb4\060\uffb4\061\uffb4\063\uffb4\070\uffb4\001\002\000" +
    "\032\004\076\020\103\023\101\036\105\064\110\065\102" +
    "\066\104\067\112\070\036\071\100\072\107\073\077\001" +
    "\002\000\050\030\uffc6\042\070\043\042\044\056\045\047" +
    "\046\046\047\033\050\044\051\051\052\032\053\066\054" +
    "\053\055\020\056\021\057\016\060\023\061\022\063\062" +
    "\070\036\001\002\000\004\004\uffa2\001\002\000\050\030" +
    "\uffbd\042\uffbd\043\uffbd\044\uffbd\045\uffbd\046\uffbd\047\uffbd" +
    "\050\uffbd\051\uffbd\052\uffbd\053\uffbd\054\uffbd\055\uffbd\056" +
    "\uffbd\057\uffbd\060\uffbd\061\uffbd\063\uffbd\070\uffbd\001\002" +
    "\000\050\030\uffc4\042\uffc4\043\uffc4\044\uffc4\045\uffc4\046" +
    "\uffc4\047\uffc4\050\uffc4\051\uffc4\052\uffc4\053\uffc4\054\uffc4" +
    "\055\uffc4\056\uffc4\057\uffc4\060\uffc4\061\uffc4\063\uffc4\070" +
    "\uffc4\001\002\000\006\004\202\022\170\001\002\000\050" +
    "\030\uffb9\042\uffb9\043\uffb9\044\uffb9\045\uffb9\046\uffb9\047" +
    "\uffb9\050\uffb9\051\uffb9\052\uffb9\053\uffb9\054\uffb9\055\uffb9" +
    "\056\uffb9\057\uffb9\060\uffb9\061\uffb9\063\uffb9\070\uffb9\001" +
    "\002\000\054\004\uff83\005\uff83\006\uff83\010\uff83\011\uff83" +
    "\012\uff83\013\uff83\014\uff83\015\uff83\016\uff83\017\uff83\022" +
    "\uff83\024\uff83\026\uff83\030\uff83\031\uff83\032\uff83\033\uff83" +
    "\034\uff83\035\uff83\036\uff83\001\002\000\054\004\uff82\005" +
    "\uff82\006\uff82\010\uff82\011\uff82\012\uff82\013\uff82\014\uff82" +
    "\015\uff82\016\uff82\017\uff82\022\uff82\024\uff82\026\uff82\030" +
    "\uff82\031\uff82\032\uff82\033\uff82\034\uff82\035\uff82\036\uff82" +
    "\001\002\000\030\020\103\023\101\036\105\064\110\065" +
    "\102\066\104\067\112\070\036\071\100\072\107\073\077" +
    "\001\002\000\054\004\uff85\005\uff85\006\uff85\010\uff85\011" +
    "\uff85\012\uff85\013\uff85\014\uff85\015\uff85\016\uff85\017\uff85" +
    "\022\uff85\024\uff85\026\uff85\030\uff85\031\uff85\032\uff85\033" +
    "\uff85\034\uff85\035\uff85\036\uff85\001\002\000\030\020\103" +
    "\023\101\036\105\064\110\065\102\066\104\067\112\070" +
    "\036\071\100\072\107\073\077\001\002\000\054\004\uff86" +
    "\005\uff86\006\uff86\010\uff86\011\uff86\012\uff86\013\uff86\014" +
    "\uff86\015\uff86\016\uff86\017\uff86\022\uff86\024\uff86\026\uff86" +
    "\030\uff86\031\uff86\032\uff86\033\uff86\034\uff86\035\uff86\036" +
    "\uff86\001\002\000\030\020\103\023\101\036\105\064\110" +
    "\065\102\066\104\067\112\070\036\071\100\072\107\073" +
    "\077\001\002\000\016\004\uff9a\006\uff9a\022\uff9a\024\uff9a" +
    "\026\uff9a\030\uff9a\001\002\000\054\004\uff84\005\uff84\006" +
    "\uff84\010\uff84\011\uff84\012\uff84\013\uff84\014\uff84\015\uff84" +
    "\016\uff84\017\uff84\022\uff84\024\uff84\026\uff84\030\uff84\031" +
    "\uff84\032\uff84\033\uff84\034\uff84\035\uff84\036\uff84\001\002" +
    "\000\054\004\uff80\005\uff80\006\uff80\010\uff80\011\uff80\012" +
    "\uff80\013\uff80\014\uff80\015\uff80\016\uff80\017\uff80\022\uff80" +
    "\024\uff80\026\uff80\030\uff80\031\uff80\032\uff80\033\uff80\034" +
    "\uff80\035\uff80\036\uff80\001\002\000\056\004\uff87\005\uff87" +
    "\006\uff87\010\uff87\011\uff87\012\uff87\013\uff87\014\uff87\015" +
    "\uff87\016\uff87\017\uff87\021\151\022\uff87\024\uff87\026\uff87" +
    "\030\uff87\031\uff87\032\uff87\033\uff87\034\uff87\035\uff87\036" +
    "\uff87\001\002\000\054\004\uff81\005\uff81\006\uff81\010\uff81" +
    "\011\uff81\012\uff81\013\uff81\014\uff81\015\uff81\016\uff81\017" +
    "\uff81\022\uff81\024\uff81\026\uff81\030\uff81\031\uff81\032\uff81" +
    "\033\uff81\034\uff81\035\uff81\036\uff81\001\002\000\052\004" +
    "\uff99\006\uff99\010\115\011\117\012\123\013\120\014\131" +
    "\015\125\016\121\017\124\022\uff99\024\uff99\026\uff99\030" +
    "\uff99\031\126\032\116\033\127\034\130\035\114\036\122" +
    "\001\002\000\030\020\103\023\101\036\105\064\110\065" +
    "\102\066\104\067\112\070\036\071\100\072\107\073\077" +
    "\001\002\000\030\020\103\023\101\036\105\064\110\065" +
    "\102\066\104\067\112\070\036\071\100\072\107\073\077" +
    "\001\002\000\030\020\103\023\101\036\105\064\110\065" +
    "\102\066\104\067\112\070\036\071\100\072\107\073\077" +
    "\001\002\000\030\020\103\023\101\036\105\064\110\065" +
    "\102\066\104\067\112\070\036\071\100\072\107\073\077" +
    "\001\002\000\030\020\103\023\101\036\105\064\110\065" +
    "\102\066\104\067\112\070\036\071\100\072\107\073\077" +
    "\001\002\000\030\020\103\023\101\036\105\064\110\065" +
    "\102\066\104\067\112\070\036\071\100\072\107\073\077" +
    "\001\002\000\030\020\103\023\101\036\105\064\110\065" +
    "\102\066\104\067\112\070\036\071\100\072\107\073\077" +
    "\001\002\000\030\020\103\023\101\036\105\064\110\065" +
    "\102\066\104\067\112\070\036\071\100\072\107\073\077" +
    "\001\002\000\030\020\103\023\101\036\105\064\110\065" +
    "\102\066\104\067\112\070\036\071\100\072\107\073\077" +
    "\001\002\000\030\020\103\023\101\036\105\064\110\065" +
    "\102\066\104\067\112\070\036\071\100\072\107\073\077" +
    "\001\002\000\030\020\103\023\101\036\105\064\110\065" +
    "\102\066\104\067\112\070\036\071\100\072\107\073\077" +
    "\001\002\000\030\020\103\023\101\036\105\064\110\065" +
    "\102\066\104\067\112\070\036\071\100\072\107\073\077" +
    "\001\002\000\030\020\103\023\101\036\105\064\110\065" +
    "\102\066\104\067\112\070\036\071\100\072\107\073\077" +
    "\001\002\000\030\020\103\023\101\036\105\064\110\065" +
    "\102\066\104\067\112\070\036\071\100\072\107\073\077" +
    "\001\002\000\054\004\uff8d\005\uff8d\006\uff8d\010\uff8d\011" +
    "\uff8d\012\uff8d\013\uff8d\014\uff8d\015\uff8d\016\uff8d\017\uff8d" +
    "\022\uff8d\024\uff8d\026\uff8d\030\uff8d\031\126\032\116\033" +
    "\127\034\130\035\114\036\122\001\002\000\054\004\uff94" +
    "\005\uff94\006\uff94\010\uff94\011\uff94\012\uff94\013\uff94\014" +
    "\uff94\015\uff94\016\uff94\017\uff94\022\uff94\024\uff94\026\uff94" +
    "\030\uff94\031\126\032\116\033\127\034\uff94\035\114\036" +
    "\uff94\001\002\000\054\004\uff95\005\uff95\006\uff95\010\uff95" +
    "\011\uff95\012\uff95\013\uff95\014\uff95\015\uff95\016\uff95\017" +
    "\uff95\022\uff95\024\uff95\026\uff95\030\uff95\031\126\032\uff95" +
    "\033\uff95\034\uff95\035\uff95\036\uff95\001\002\000\054\004" +
    "\uff97\005\uff97\006\uff97\010\uff97\011\uff97\012\uff97\013\uff97" +
    "\014\uff97\015\uff97\016\uff97\017\uff97\022\uff97\024\uff97\026" +
    "\uff97\030\uff97\031\126\032\uff97\033\uff97\034\uff97\035\uff97" +
    "\036\uff97\001\002\000\054\004\uff8c\005\uff8c\006\uff8c\010" +
    "\uff8c\011\uff8c\012\uff8c\013\uff8c\014\uff8c\015\uff8c\016\uff8c" +
    "\017\uff8c\022\uff8c\024\uff8c\026\uff8c\030\uff8c\031\126\032" +
    "\116\033\127\034\130\035\114\036\122\001\002\000\054" +
    "\004\uff8a\005\uff8a\006\uff8a\010\115\011\117\012\123\013" +
    "\120\014\131\015\125\016\121\017\uff8a\022\uff8a\024\uff8a" +
    "\026\uff8a\030\uff8a\031\126\032\116\033\127\034\130\035" +
    "\114\036\122\001\002\000\054\004\uff8f\005\uff8f\006\uff8f" +
    "\010\uff8f\011\uff8f\012\uff8f\013\uff8f\014\uff8f\015\uff8f\016" +
    "\uff8f\017\uff8f\022\uff8f\024\uff8f\026\uff8f\030\uff8f\031\126" +
    "\032\116\033\127\034\130\035\114\036\122\001\002\000" +
    "\054\004\uff93\005\uff93\006\uff93\010\uff93\011\uff93\012\uff93" +
    "\013\uff93\014\uff93\015\uff93\016\uff93\017\uff93\022\uff93\024" +
    "\uff93\026\uff93\030\uff93\031\126\032\116\033\127\034\uff93" +
    "\035\114\036\uff93\001\002\000\054\004\uff8b\005\uff8b\006" +
    "\uff8b\010\115\011\117\012\123\013\120\014\131\015\125" +
    "\016\uff8b\017\uff8b\022\uff8b\024\uff8b\026\uff8b\030\uff8b\031" +
    "\126\032\116\033\127\034\130\035\114\036\122\001\002" +
    "\000\054\004\uff8e\005\uff8e\006\uff8e\010\uff8e\011\uff8e\012" +
    "\uff8e\013\uff8e\014\uff8e\015\uff8e\016\uff8e\017\uff8e\022\uff8e" +
    "\024\uff8e\026\uff8e\030\uff8e\031\126\032\116\033\127\034" +
    "\130\035\114\036\122\001\002\000\054\004\uff90\005\uff90" +
    "\006\uff90\010\uff90\011\uff90\012\uff90\013\uff90\014\uff90\015" +
    "\uff90\016\uff90\017\uff90\022\uff90\024\uff90\026\uff90\030\uff90" +
    "\031\126\032\116\033\127\034\130\035\114\036\122\001" +
    "\002\000\054\004\uff92\005\uff92\006\uff92\010\uff92\011\uff92" +
    "\012\uff92\013\uff92\014\uff92\015\uff92\016\uff92\017\uff92\022" +
    "\uff92\024\uff92\026\uff92\030\uff92\031\126\032\uff92\033\uff92" +
    "\034\uff92\035\uff92\036\uff92\001\002\000\054\004\uff91\005" +
    "\uff91\006\uff91\010\uff91\011\uff91\012\uff91\013\uff91\014\uff91" +
    "\015\uff91\016\uff91\017\uff91\022\uff91\024\uff91\026\uff91\030" +
    "\uff91\031\126\032\116\033\127\034\130\035\114\036\122" +
    "\001\002\000\054\004\uff96\005\uff96\006\uff96\010\uff96\011" +
    "\uff96\012\uff96\013\uff96\014\uff96\015\uff96\016\uff96\017\uff96" +
    "\022\uff96\024\uff96\026\uff96\030\uff96\031\126\032\uff96\033" +
    "\uff96\034\uff96\035\uff96\036\uff96\001\002\000\060\004\uffd6" +
    "\005\uffd6\006\uffd6\007\uffd6\010\uffd6\011\uffd6\012\uffd6\013" +
    "\uffd6\014\uffd6\015\uffd6\016\uffd6\017\uffd6\021\uffd6\022\uffd6" +
    "\024\uffd6\026\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034" +
    "\uffd6\035\uffd6\036\uffd6\001\002\000\004\070\152\001\002" +
    "\000\064\004\uffcf\005\uffcf\006\uffcf\007\uffcf\010\uffcf\011" +
    "\uffcf\012\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf" +
    "\021\uffcf\022\uffcf\023\156\024\uffcf\025\154\026\uffcf\030" +
    "\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf" +
    "\001\002\000\062\004\uffcc\005\uffcc\006\uffcc\007\uffcc\010" +
    "\uffcc\011\uffcc\012\uffcc\013\uffcc\014\uffcc\015\uffcc\016\uffcc" +
    "\017\uffcc\021\uffcc\022\uffcc\024\uffcc\025\154\026\uffcc\030" +
    "\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc" +
    "\001\002\000\030\020\103\023\101\036\105\064\110\065" +
    "\102\066\104\067\112\070\036\071\100\072\107\073\077" +
    "\001\002\000\064\004\uffd8\005\uffd8\006\uffd8\007\uffd8\010" +
    "\uffd8\011\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8" +
    "\017\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8\026" +
    "\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8" +
    "\036\uffd8\001\002\000\032\020\103\023\101\024\161\036" +
    "\105\064\110\065\102\066\104\067\112\070\036\071\100" +
    "\072\107\073\077\001\002\000\012\006\ufff4\022\170\024" +
    "\ufff4\030\ufff4\001\002\000\006\006\164\024\165\001\002" +
    "\000\062\004\uffcd\005\uffcd\006\uffcd\007\uffcd\010\uffcd\011" +
    "\uffcd\012\uffcd\013\uffcd\014\uffcd\015\uffcd\016\uffcd\017\uffcd" +
    "\021\uffcd\022\uffcd\024\uffcd\025\154\026\uffcd\030\uffcd\031" +
    "\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd\001\002" +
    "\000\062\004\uffca\005\uffca\006\uffca\007\uffca\010\uffca\011" +
    "\uffca\012\uffca\013\uffca\014\uffca\015\uffca\016\uffca\017\uffca" +
    "\021\uffca\022\uffca\024\uffca\025\154\026\uffca\030\uffca\031" +
    "\uffca\032\uffca\033\uffca\034\uffca\035\uffca\036\uffca\001\002" +
    "\000\064\004\uffd9\005\uffd9\006\uffd9\007\uffd9\010\uffd9\011" +
    "\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9" +
    "\021\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\030" +
    "\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9" +
    "\001\002\000\030\020\103\023\101\036\105\064\110\065" +
    "\102\066\104\067\112\070\036\071\100\072\107\073\077" +
    "\001\002\000\062\004\uffce\005\uffce\006\uffce\007\uffce\010" +
    "\uffce\011\uffce\012\uffce\013\uffce\014\uffce\015\uffce\016\uffce" +
    "\017\uffce\021\uffce\022\uffce\024\uffce\025\154\026\uffce\030" +
    "\uffce\031\uffce\032\uffce\033\uffce\034\uffce\035\uffce\036\uffce" +
    "\001\002\000\062\004\uffcb\005\uffcb\006\uffcb\007\uffcb\010" +
    "\uffcb\011\uffcb\012\uffcb\013\uffcb\014\uffcb\015\uffcb\016\uffcb" +
    "\017\uffcb\021\uffcb\022\uffcb\024\uffcb\025\154\026\uffcb\030" +
    "\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb\036\uffcb" +
    "\001\002\000\012\006\ufff5\022\170\024\ufff5\030\ufff5\001" +
    "\002\000\030\020\103\023\101\036\105\064\110\065\102" +
    "\066\104\067\112\070\036\071\100\072\107\073\077\001" +
    "\002\000\040\005\172\010\115\011\117\012\123\013\120" +
    "\014\131\015\125\016\121\017\124\031\126\032\116\033" +
    "\127\034\130\035\114\036\122\001\002\000\030\020\103" +
    "\023\101\036\105\064\110\065\102\066\104\067\112\070" +
    "\036\071\100\072\107\073\077\001\002\000\052\004\uffab" +
    "\006\uffab\010\115\011\117\012\123\013\120\014\131\015" +
    "\125\016\121\017\124\022\uffab\024\uffab\026\uffab\030\uffab" +
    "\031\126\032\116\033\127\034\130\035\114\036\122\001" +
    "\002\000\006\022\170\026\175\001\002\000\064\004\uffd7" +
    "\005\uffd7\006\uffd7\007\uffd7\010\uffd7\011\uffd7\012\uffd7\013" +
    "\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7\021\uffd7\022\uffd7" +
    "\023\uffd7\024\uffd7\025\uffd7\026\uffd7\030\uffd7\031\uffd7\032" +
    "\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7\001\002\000\054" +
    "\004\uff98\005\uff98\006\uff98\010\uff98\011\uff98\012\uff98\013" +
    "\uff98\014\uff98\015\uff98\016\uff98\017\uff98\022\uff98\024\uff98" +
    "\026\uff98\030\uff98\031\126\032\116\033\127\034\uff98\035" +
    "\114\036\uff98\001\002\000\054\004\uff89\005\uff89\006\uff89" +
    "\010\uff89\011\uff89\012\uff89\013\uff89\014\uff89\015\uff89\016" +
    "\uff89\017\uff89\022\uff89\024\uff89\026\uff89\030\uff89\031\uff89" +
    "\032\uff89\033\uff89\034\uff89\035\uff89\036\uff89\001\002\000" +
    "\040\010\115\011\117\012\123\013\120\014\131\015\125" +
    "\016\121\017\124\024\201\031\126\032\116\033\127\034" +
    "\130\035\114\036\122\001\002\000\054\004\uff88\005\uff88" +
    "\006\uff88\010\uff88\011\uff88\012\uff88\013\uff88\014\uff88\015" +
    "\uff88\016\uff88\017\uff88\022\uff88\024\uff88\026\uff88\030\uff88" +
    "\031\uff88\032\uff88\033\uff88\034\uff88\035\uff88\036\uff88\001" +
    "\002\000\050\030\uffb8\042\uffb8\043\uffb8\044\uffb8\045\uffb8" +
    "\046\uffb8\047\uffb8\050\uffb8\051\uffb8\052\uffb8\053\uffb8\054" +
    "\uffb8\055\uffb8\056\uffb8\057\uffb8\060\uffb8\061\uffb8\063\uffb8" +
    "\070\uffb8\001\002\000\030\020\103\023\101\036\105\064" +
    "\110\065\102\066\104\067\112\070\036\071\100\072\107" +
    "\073\077\001\002\000\006\006\164\024\205\001\002\000" +
    "\004\004\uff9c\001\002\000\004\070\211\001\002\000\050" +
    "\030\uffc2\042\uffc2\043\uffc2\044\uffc2\045\uffc2\046\uffc2\047" +
    "\uffc2\050\uffc2\051\uffc2\052\uffc2\053\uffc2\054\uffc2\055\uffc2" +
    "\056\uffc2\057\uffc2\060\uffc2\061\uffc2\063\uffc2\070\uffc2\001" +
    "\002\000\010\004\uffe4\006\uffe4\007\214\001\002\000\016" +
    "\004\uffdb\006\uffdb\007\uffdb\023\uffdb\024\uffdb\025\154\001" +
    "\002\000\016\004\uffda\006\uffda\007\uffda\023\uffda\024\uffda" +
    "\025\154\001\002\000\006\004\uffe5\006\uffe5\001\002\000" +
    "\032\020\103\023\101\027\217\036\105\064\110\065\102" +
    "\066\104\067\112\070\036\071\100\072\107\073\077\001" +
    "\002\000\010\004\uffe0\006\224\024\uffe0\001\002\000\012" +
    "\004\uffde\006\uffde\024\uffde\030\uffde\001\002\000\032\020" +
    "\103\023\101\027\217\036\105\064\110\065\102\066\104" +
    "\067\112\070\036\071\100\072\107\073\077\001\002\000" +
    "\012\004\uffe1\006\uffe1\022\170\024\uffe1\001\002\000\006" +
    "\006\224\030\225\001\002\000\006\006\164\030\223\001" +
    "\002\000\012\004\uffdc\006\uffdc\024\uffdc\030\uffdc\001\002" +
    "\000\004\027\217\001\002\000\012\004\uffdd\006\uffdd\024" +
    "\uffdd\030\uffdd\001\002\000\012\004\uffdf\006\uffdf\024\uffdf" +
    "\030\uffdf\001\002\000\020\053\005\055\020\056\021\057" +
    "\016\060\023\061\022\070\036\001\002\000\004\004\250" +
    "\001\002\000\006\004\240\006\206\001\002\000\012\007" +
    "\214\021\151\034\234\036\235\001\002\000\006\004\uffc9" +
    "\024\uffc9\001\002\000\004\034\237\001\002\000\004\036" +
    "\236\001\002\000\006\004\uffc7\024\uffc7\001\002\000\006" +
    "\004\uffc8\024\uffc8\001\002\000\030\020\103\023\101\036" +
    "\105\064\110\065\102\066\104\067\112\070\036\071\100" +
    "\072\107\073\077\001\002\000\006\004\242\022\170\001" +
    "\002\000\004\070\036\001\002\000\004\024\244\001\002" +
    "\000\004\027\245\001\002\000\050\030\uffc5\042\070\043" +
    "\042\044\056\045\047\046\046\047\033\050\044\051\051" +
    "\052\032\053\066\054\053\055\020\056\021\057\016\060" +
    "\023\061\022\063\062\070\036\001\002\000\004\030\247" +
    "\001\002\000\050\030\uffa9\042\uffa9\043\uffa9\044\uffa9\045" +
    "\uffa9\046\uffa9\047\uffa9\050\uffa9\051\uffa9\052\uffa9\053\uffa9" +
    "\054\uffa9\055\uffa9\056\uffa9\057\uffa9\060\uffa9\061\uffa9\063" +
    "\uffa9\070\uffa9\001\002\000\030\020\103\023\101\036\105" +
    "\064\110\065\102\066\104\067\112\070\036\071\100\072" +
    "\107\073\077\001\002\000\006\004\252\022\170\001\002" +
    "\000\004\070\036\001\002\000\004\024\254\001\002\000" +
    "\004\027\255\001\002\000\050\030\uffc5\042\070\043\042" +
    "\044\056\045\047\046\046\047\033\050\044\051\051\052" +
    "\032\053\066\054\053\055\020\056\021\057\016\060\023" +
    "\061\022\063\062\070\036\001\002\000\004\030\257\001" +
    "\002\000\050\030\uffa8\042\uffa8\043\uffa8\044\uffa8\045\uffa8" +
    "\046\uffa8\047\uffa8\050\uffa8\051\uffa8\052\uffa8\053\uffa8\054" +
    "\uffa8\055\uffa8\056\uffa8\057\uffa8\060\uffa8\061\uffa8\063\uffa8" +
    "\070\uffa8\001\002\000\050\030\uffb6\042\uffb6\043\uffb6\044" +
    "\uffb6\045\uffb6\046\uffb6\047\uffb6\050\uffb6\051\uffb6\052\uffb6" +
    "\053\uffb6\054\uffb6\055\uffb6\056\uffb6\057\uffb6\060\uffb6\061" +
    "\uffb6\063\uffb6\070\uffb6\001\002\000\050\030\uffc0\042\uffc0" +
    "\043\uffc0\044\uffc0\045\uffc0\046\uffc0\047\uffc0\050\uffc0\051" +
    "\uffc0\052\uffc0\053\uffc0\054\uffc0\055\uffc0\056\uffc0\057\uffc0" +
    "\060\uffc0\061\uffc0\063\uffc0\070\uffc0\001\002\000\030\020" +
    "\103\023\101\036\105\064\110\065\102\066\104\067\112" +
    "\070\036\071\100\072\107\073\077\001\002\000\006\006" +
    "\164\024\264\001\002\000\004\004\uff9b\001\002\000\050" +
    "\030\uffc1\042\uffc1\043\uffc1\044\uffc1\045\uffc1\046\uffc1\047" +
    "\uffc1\050\uffc1\051\uffc1\052\uffc1\053\uffc1\054\uffc1\055\uffc1" +
    "\056\uffc1\057\uffc1\060\uffc1\061\uffc1\063\uffc1\070\uffc1\001" +
    "\002\000\030\020\103\023\101\036\105\064\110\065\102" +
    "\066\104\067\112\070\036\071\100\072\107\073\077\001" +
    "\002\000\006\006\164\024\270\001\002\000\004\004\uff9e" +
    "\001\002\000\030\020\103\023\101\036\105\064\110\065" +
    "\102\066\104\067\112\070\036\071\100\072\107\073\077" +
    "\001\002\000\006\022\170\024\273\001\002\000\004\027" +
    "\274\001\002\000\050\030\uffc5\042\070\043\042\044\056" +
    "\045\047\046\046\047\033\050\044\051\051\052\032\053" +
    "\066\054\053\055\020\056\021\057\016\060\023\061\022" +
    "\063\062\070\036\001\002\000\004\030\276\001\002\000" +
    "\052\030\uffb2\042\uffb2\043\uffb2\044\uffb2\045\uffb2\046\uffb2" +
    "\047\uffb2\050\uffb2\051\uffb2\052\uffb2\053\uffb2\054\uffb2\055" +
    "\uffb2\056\uffb2\057\uffb2\060\uffb2\061\uffb2\062\277\063\uffb2" +
    "\070\uffb2\001\002\000\006\027\302\045\303\001\002\000" +
    "\050\030\uffb1\042\uffb1\043\uffb1\044\uffb1\045\uffb1\046\uffb1" +
    "\047\uffb1\050\uffb1\051\uffb1\052\uffb1\053\uffb1\054\uffb1\055" +
    "\uffb1\056\uffb1\057\uffb1\060\uffb1\061\uffb1\063\uffb1\070\uffb1" +
    "\001\002\000\050\030\uffb0\042\uffb0\043\uffb0\044\uffb0\045" +
    "\uffb0\046\uffb0\047\uffb0\050\uffb0\051\uffb0\052\uffb0\053\uffb0" +
    "\054\uffb0\055\uffb0\056\uffb0\057\uffb0\060\uffb0\061\uffb0\063" +
    "\uffb0\070\uffb0\001\002\000\050\030\uffc5\042\070\043\042" +
    "\044\056\045\047\046\046\047\033\050\044\051\051\052" +
    "\032\053\066\054\053\055\020\056\021\057\016\060\023" +
    "\061\022\063\062\070\036\001\002\000\004\023\304\001" +
    "\002\000\030\020\103\023\101\036\105\064\110\065\102" +
    "\066\104\067\112\070\036\071\100\072\107\073\077\001" +
    "\002\000\006\022\170\024\306\001\002\000\004\027\307" +
    "\001\002\000\050\030\uffc5\042\070\043\042\044\056\045" +
    "\047\046\046\047\033\050\044\051\051\052\032\053\066" +
    "\054\053\055\020\056\021\057\016\060\023\061\022\063" +
    "\062\070\036\001\002\000\004\030\311\001\002\000\052" +
    "\030\uffaf\042\uffaf\043\uffaf\044\uffaf\045\uffaf\046\uffaf\047" +
    "\uffaf\050\uffaf\051\uffaf\052\uffaf\053\uffaf\054\uffaf\055\uffaf" +
    "\056\uffaf\057\uffaf\060\uffaf\061\uffaf\062\277\063\uffaf\070" +
    "\uffaf\001\002\000\050\030\uffae\042\uffae\043\uffae\044\uffae" +
    "\045\uffae\046\uffae\047\uffae\050\uffae\051\uffae\052\uffae\053" +
    "\uffae\054\uffae\055\uffae\056\uffae\057\uffae\060\uffae\061\uffae" +
    "\063\uffae\070\uffae\001\002\000\050\030\uffad\042\uffad\043" +
    "\uffad\044\uffad\045\uffad\046\uffad\047\uffad\050\uffad\051\uffad" +
    "\052\uffad\053\uffad\054\uffad\055\uffad\056\uffad\057\uffad\060" +
    "\uffad\061\uffad\063\uffad\070\uffad\001\002\000\004\030\315" +
    "\001\002\000\050\030\uffac\042\uffac\043\uffac\044\uffac\045" +
    "\uffac\046\uffac\047\uffac\050\uffac\051\uffac\052\uffac\053\uffac" +
    "\054\uffac\055\uffac\056\uffac\057\uffac\060\uffac\061\uffac\063" +
    "\uffac\070\uffac\001\002\000\030\020\103\023\101\036\105" +
    "\064\110\065\102\066\104\067\112\070\036\071\100\072" +
    "\107\073\077\001\002\000\006\022\170\024\320\001\002" +
    "\000\004\027\321\001\002\000\050\030\uffc5\042\070\043" +
    "\042\044\056\045\047\046\046\047\033\050\044\051\051" +
    "\052\032\053\066\054\053\055\020\056\021\057\016\060" +
    "\023\061\022\063\062\070\036\001\002\000\004\030\323" +
    "\001\002\000\050\030\uffaa\042\uffaa\043\uffaa\044\uffaa\045" +
    "\uffaa\046\uffaa\047\uffaa\050\uffaa\051\uffaa\052\uffaa\053\uffaa" +
    "\054\uffaa\055\uffaa\056\uffaa\057\uffaa\060\uffaa\061\uffaa\063" +
    "\uffaa\070\uffaa\001\002\000\030\020\103\023\101\036\105" +
    "\064\110\065\102\066\104\067\112\070\036\071\100\072" +
    "\107\073\077\001\002\000\006\006\164\024\326\001\002" +
    "\000\004\004\uff9f\001\002\000\050\030\uffb7\042\uffb7\043" +
    "\uffb7\044\uffb7\045\uffb7\046\uffb7\047\uffb7\050\uffb7\051\uffb7" +
    "\052\uffb7\053\uffb7\054\uffb7\055\uffb7\056\uffb7\057\uffb7\060" +
    "\uffb7\061\uffb7\063\uffb7\070\uffb7\001\002\000\026\002\uffe8" +
    "\037\uffe8\040\uffe8\041\uffe8\053\uffe8\055\uffe8\056\uffe8\057" +
    "\uffe8\060\uffe8\061\uffe8\001\002\000\062\004\uffd2\005\uffd2" +
    "\006\uffd2\007\uffd2\010\uffd2\011\uffd2\012\uffd2\013\uffd2\014" +
    "\uffd2\015\uffd2\016\uffd2\017\uffd2\021\uffd2\022\uffd2\024\uffd2" +
    "\025\154\026\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034" +
    "\uffd2\035\uffd2\036\uffd2\001\002\000\032\020\103\023\101" +
    "\024\334\036\105\064\110\065\102\066\104\067\112\070" +
    "\036\071\100\072\107\073\077\001\002\000\006\006\164" +
    "\024\336\001\002\000\062\004\uffd3\005\uffd3\006\uffd3\007" +
    "\uffd3\010\uffd3\011\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3" +
    "\016\uffd3\017\uffd3\021\uffd3\022\uffd3\024\uffd3\025\154\026" +
    "\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3" +
    "\036\uffd3\001\002\000\062\004\uffd0\005\uffd0\006\uffd0\007" +
    "\uffd0\010\uffd0\011\uffd0\012\uffd0\013\uffd0\014\uffd0\015\uffd0" +
    "\016\uffd0\017\uffd0\021\uffd0\022\uffd0\024\uffd0\025\154\026" +
    "\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0" +
    "\036\uffd0\001\002\000\062\004\uffd4\005\uffd4\006\uffd4\007" +
    "\uffd4\010\uffd4\011\uffd4\012\uffd4\013\uffd4\014\uffd4\015\uffd4" +
    "\016\uffd4\017\uffd4\021\uffd4\022\uffd4\024\uffd4\025\154\026" +
    "\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4" +
    "\036\uffd4\001\002\000\062\004\uffd1\005\uffd1\006\uffd1\007" +
    "\uffd1\010\uffd1\011\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1" +
    "\016\uffd1\017\uffd1\021\uffd1\022\uffd1\024\uffd1\025\154\026" +
    "\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1" +
    "\036\uffd1\001\002\000\010\004\uffe2\006\uffe2\007\214\001" +
    "\002\000\006\004\uffe3\006\uffe3\001\002\000\032\020\103" +
    "\023\101\024\344\036\105\064\110\065\102\066\104\067" +
    "\112\070\036\071\100\072\107\073\077\001\002\000\006" +
    "\022\170\024\345\001\002\000\004\004\uffa0\001\002\000" +
    "\004\004\uffa1\001\002\000\030\020\103\023\101\036\105" +
    "\064\110\065\102\066\104\067\112\070\036\071\100\072" +
    "\107\073\077\001\002\000\006\006\164\024\350\001\002" +
    "\000\004\004\uff9d\001\002\000\050\030\uffbf\042\uffbf\043" +
    "\uffbf\044\uffbf\045\uffbf\046\uffbf\047\uffbf\050\uffbf\051\uffbf" +
    "\052\uffbf\053\uffbf\054\uffbf\055\uffbf\056\uffbf\057\uffbf\060" +
    "\uffbf\061\uffbf\063\uffbf\070\uffbf\001\002\000\004\027\353" +
    "\001\002\000\016\053\005\055\020\056\021\057\016\060" +
    "\023\061\022\001\002\000\006\004\361\006\206\001\002" +
    "\000\020\030\356\053\005\055\020\056\021\057\016\060" +
    "\023\061\022\001\002\000\026\002\uffec\037\uffec\040\uffec" +
    "\041\uffec\053\uffec\055\uffec\056\uffec\057\uffec\060\uffec\061" +
    "\uffec\001\002\000\006\004\360\006\206\001\002\000\020" +
    "\030\uffe7\053\uffe7\055\uffe7\056\uffe7\057\uffe7\060\uffe7\061" +
    "\uffe7\001\002\000\020\030\uffe6\053\uffe6\055\uffe6\056\uffe6" +
    "\057\uffe6\060\uffe6\061\uffe6\001\002\000\004\023\u0103\001" +
    "\002\000\012\004\uffe2\006\uffe2\007\214\023\364\001\002" +
    "\000\020\024\365\053\005\055\020\056\021\057\016\060" +
    "\023\061\022\001\002\000\004\027\u0100\001\002\000\004" +
    "\070\211\001\002\000\006\006\371\024\372\001\002\000" +
    "\006\006\ufff7\024\ufff7\001\002\000\016\053\005\055\020" +
    "\056\021\057\016\060\023\061\022\001\002\000\004\027" +
    "\373\001\002\000\050\030\uffc5\042\070\043\042\044\056" +
    "\045\047\046\046\047\033\050\044\051\051\052\032\053" +
    "\066\054\053\055\020\056\021\057\016\060\023\061\022" +
    "\063\062\070\036\001\002\000\004\030\375\001\002\000" +
    "\026\002\uffeb\037\uffeb\040\uffeb\041\uffeb\053\uffeb\055\uffeb" +
    "\056\uffeb\057\uffeb\060\uffeb\061\uffeb\001\002\000\006\006" +
    "\ufff8\024\ufff8\001\002\000\006\006\ufff6\024\ufff6\001\002" +
    "\000\050\030\uffc5\042\070\043\042\044\056\045\047\046" +
    "\046\047\033\050\044\051\051\052\032\053\066\054\053" +
    "\055\020\056\021\057\016\060\023\061\022\063\062\070" +
    "\036\001\002\000\004\030\u0102\001\002\000\026\002\uffea" +
    "\037\uffea\040\uffea\041\uffea\053\uffea\055\uffea\056\uffea\057" +
    "\uffea\060\uffea\061\uffea\001\002\000\004\024\u0104\001\002" +
    "\000\004\027\u0105\001\002\000\050\030\uffc5\042\070\043" +
    "\042\044\056\045\047\046\046\047\033\050\044\051\051" +
    "\052\032\053\066\054\053\055\020\056\021\057\016\060" +
    "\023\061\022\063\062\070\036\001\002\000\004\030\u0107" +
    "\001\002\000\026\002\uffe9\037\uffe9\040\uffe9\041\uffe9\053" +
    "\uffe9\055\uffe9\056\uffe9\057\uffe9\060\uffe9\061\uffe9\001\002" +
    "\000\026\002\ufff1\037\ufff1\040\ufff1\041\ufff1\053\ufff1\055" +
    "\ufff1\056\ufff1\057\ufff1\060\ufff1\061\ufff1\001\002\000\004" +
    "\002\001\001\002\000\030\020\103\023\101\036\105\064" +
    "\110\065\102\066\104\067\112\070\036\071\100\072\107" +
    "\073\077\001\002\000\040\010\115\011\117\012\123\013" +
    "\120\014\131\015\125\016\121\017\124\024\u010c\031\126" +
    "\032\116\033\127\034\130\035\114\036\122\001\002\000" +
    "\004\004\u010d\001\002\000\026\002\uffff\037\uffff\040\uffff" +
    "\041\uffff\053\uffff\055\uffff\056\uffff\057\uffff\060\uffff\061" +
    "\uffff\001\002\000\026\002\ufff3\037\ufff3\040\ufff3\041\ufff3" +
    "\053\ufff3\055\ufff3\056\ufff3\057\ufff3\060\ufff3\061\ufff3\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u010c\000\024\002\010\004\003\010\006\011\005\012" +
    "\024\013\013\014\016\016\011\055\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\004" +
    "\003\011\u010d\012\024\013\013\014\016\016\011\055\012" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\022\362\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\056\016\063\025\051\027\054\030\037" +
    "\031\042\032\053\033\062\034\047\035\040\036\036\042" +
    "\066\043\044\044\030\045\034\046\064\047\056\050\057" +
    "\051\060\052\071\055\033\056\072\057\070\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\337\001\001\000\002\001\001\000\006\023\330\024" +
    "\154\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\017\232\026" +
    "\147\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\025\110\041\105\053\074\054\112" +
    "\001\001\000\052\016\063\025\051\027\054\031\073\032" +
    "\053\033\062\034\047\035\040\036\036\042\066\043\044" +
    "\044\030\045\034\046\064\047\056\050\057\051\060\052" +
    "\071\055\033\056\072\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\025\110" +
    "\054\177\001\001\000\002\001\001\000\006\025\110\054" +
    "\176\001\001\000\002\001\001\000\006\025\110\054\175" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\147\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\025\110\054\146\001\001\000\006\025" +
    "\110\054\145\001\001\000\006\025\110\054\144\001\001" +
    "\000\006\025\110\054\143\001\001\000\006\025\110\054" +
    "\142\001\001\000\006\025\110\054\141\001\001\000\006" +
    "\025\110\054\140\001\001\000\006\025\110\054\137\001" +
    "\001\000\006\025\110\054\136\001\001\000\006\025\110" +
    "\054\135\001\001\000\006\025\110\054\134\001\001\000" +
    "\006\025\110\054\133\001\001\000\006\025\110\054\132" +
    "\001\001\000\006\025\110\054\131\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\023\152" +
    "\024\154\001\001\000\004\024\162\001\001\000\012\025" +
    "\110\041\105\053\173\054\112\001\001\000\002\001\001" +
    "\000\014\007\157\025\110\041\105\053\156\054\112\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\023\161" +
    "\024\154\001\001\000\004\024\162\001\001\000\002\001" +
    "\001\000\012\025\110\041\105\053\166\054\112\001\001" +
    "\000\006\023\165\024\154\001\001\000\004\024\162\001" +
    "\001\000\002\001\001\000\006\025\110\054\170\001\001" +
    "\000\002\001\001\000\006\025\110\054\172\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\007\203\025\110\041\105" +
    "\053\156\054\112\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\022\207\001\001\000\002\001\001\000\004" +
    "\017\212\001\001\000\006\023\211\024\154\001\001\000" +
    "\004\024\162\001\001\000\002\001\001\000\016\020\214" +
    "\021\215\025\110\041\105\053\217\054\112\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\007\221\020\220" +
    "\021\215\025\110\041\105\053\156\054\112\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\225\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\016\230\025\231\027\227\055\033" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\017" +
    "\232\026\147\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\025\110\041\105\053\240\054\112\001\001\000\002" +
    "\001\001\000\006\025\231\027\242\001\001\000\002\001" +
    "\001\000\002\001\001\000\056\016\063\025\051\027\054" +
    "\030\245\031\042\032\053\033\062\034\047\035\040\036" +
    "\036\042\066\043\044\044\030\045\034\046\064\047\056" +
    "\050\057\051\060\052\071\055\033\056\072\057\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\025\110" +
    "\041\105\053\250\054\112\001\001\000\002\001\001\000" +
    "\006\025\231\027\252\001\001\000\002\001\001\000\002" +
    "\001\001\000\056\016\063\025\051\027\054\030\255\031" +
    "\042\032\053\033\062\034\047\035\040\036\036\042\066" +
    "\043\044\044\030\045\034\046\064\047\056\050\057\051" +
    "\060\052\071\055\033\056\072\057\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\007\262\025\110\041\105\053\156\054\112" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\007\266\025\110\041\105\053\156\054\112" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\025" +
    "\110\041\105\053\271\054\112\001\001\000\002\001\001" +
    "\000\002\001\001\000\056\016\063\025\051\027\054\030" +
    "\274\031\042\032\053\033\062\034\047\035\040\036\036" +
    "\042\066\043\044\044\030\045\034\046\064\047\056\050" +
    "\057\051\060\052\071\055\033\056\072\057\070\001\001" +
    "\000\002\001\001\000\006\037\277\040\300\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\056" +
    "\016\063\025\051\027\054\030\313\031\042\032\053\033" +
    "\062\034\047\035\040\036\036\042\066\043\044\044\030" +
    "\045\034\046\064\047\056\050\057\051\060\052\071\055" +
    "\033\056\072\057\070\001\001\000\002\001\001\000\012" +
    "\025\110\041\105\053\304\054\112\001\001\000\002\001" +
    "\001\000\002\001\001\000\056\016\063\025\051\027\054" +
    "\030\307\031\042\032\053\033\062\034\047\035\040\036" +
    "\036\042\066\043\044\044\030\045\034\046\064\047\056" +
    "\050\057\051\060\052\071\055\033\056\072\057\070\001" +
    "\001\000\002\001\001\000\006\037\311\040\312\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\025\110\041\105\053\316\054\112" +
    "\001\001\000\002\001\001\000\002\001\001\000\056\016" +
    "\063\025\051\027\054\030\321\031\042\032\053\033\062" +
    "\034\047\035\040\036\036\042\066\043\044\044\030\045" +
    "\034\046\064\047\056\050\057\051\060\052\071\055\033" +
    "\056\072\057\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\007\324\025\110\041\105\053\156\054\112" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\162\001\001\000\014" +
    "\007\332\025\110\041\105\053\156\054\112\001\001\000" +
    "\002\001\001\000\006\023\334\024\154\001\001\000\004" +
    "\024\162\001\001\000\006\023\336\024\154\001\001\000" +
    "\004\024\162\001\001\000\004\017\340\001\001\000\002" +
    "\001\001\000\012\025\110\041\105\053\342\054\112\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\007\346\025\110\041\105\053\156\054\112\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\015\354\016\353\055\033\001" +
    "\001\000\002\001\001\000\006\016\356\055\033\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\340\001\001" +
    "\000\010\005\366\006\367\055\365\001\001\000\002\001" +
    "\001\000\004\022\376\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\006\375\055\365\001\001\000\002\001" +
    "\001\000\056\016\063\025\051\027\054\030\373\031\042" +
    "\032\053\033\062\034\047\035\040\036\036\042\066\043" +
    "\044\044\030\045\034\046\064\047\056\050\057\051\060" +
    "\052\071\055\033\056\072\057\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\056\016\063\025\051\027\054\030\u0100\031\042\032" +
    "\053\033\062\034\047\035\040\036\036\042\066\043\044" +
    "\044\030\045\034\046\064\047\056\050\057\051\060\052" +
    "\071\055\033\056\072\057\070\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\056\016\063\025\051\027\054\030\u0105\031\042\032\053" +
    "\033\062\034\047\035\040\036\036\042\066\043\044\044" +
    "\030\045\034\046\064\047\056\050\057\051\060\052\071" +
    "\055\033\056\072\057\070\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\025\110\054\u010a\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
    /* public AST ast; 
    public tablaDeSimbolos tablaSimbolos; */
    public elementoGlobal simbolo;
    public String nombreArchivo="";
    public nodoModelo raiz;
    public void iniciar(elementoGlobal simbolo, String nombreArchivo){
        this.simbolo=simbolo;
        this.nombreArchivo= nombreArchivo;
    }

    public void syntax_error(Symbol te){
        try{
            
            //System.out.println("compiler has detected a syntax error at line:"+te.left+ "  columna:"+te.right+"token:"+te.value.toString());
            simbolo.tablaErrores.insertErrorSyntax(nombreArchivo,te.left, te.right, "No se esperaba token : "+te.value.toString());
        }catch(Exception p){
            System.out.println("[Sintactico.cup][syntax_error][ERROR]"+p.getMessage());
        }
        
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // E ::= tNulo 
            {
              nodoModelo RESULT =null;
		
                                itemAtributo atrib1=new itemAtributo("E", parser.nombreArchivo, 24); 
                                _E padre =new _E(atrib1 , parser.simbolo);
                                 
                                RESULT= padre;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // E ::= valChar 
            {
              nodoModelo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                itemAtributo atrib1=new itemAtributo("E", parser.nombreArchivo, 23); 
                                _E padre =new _E(atrib1 , parser.simbolo);

                                    itemAtributo at1=new itemAtributo("valChar",d1, d1right, d1left,parser.nombreArchivo); 
                                    padre.listaAtributos.insertar(at1);
                                 
                                RESULT= padre;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // E ::= valEntero 
            {
              nodoModelo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                itemAtributo atrib1=new itemAtributo("E", parser.nombreArchivo, 22); 
                                _E padre =new _E(atrib1 , parser.simbolo);

                                    itemAtributo at1=new itemAtributo("valEntero",d1, d1right, d1left,parser.nombreArchivo); 
                                    padre.listaAtributos.insertar(at1) ;

                                RESULT= padre;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // E ::= valDecimal 
            {
              nodoModelo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                itemAtributo atrib1=new itemAtributo("E", parser.nombreArchivo, 21); 
                                _E padre =new _E(atrib1 , parser.simbolo);

                                    itemAtributo at1=new itemAtributo("valDecimal",d1, d1right, d1left,parser.nombreArchivo); 
                                    padre.listaAtributos.insertar(at1);
                                 
                                RESULT= padre;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // E ::= valCadena 
            {
              nodoModelo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                itemAtributo atrib1=new itemAtributo("E", parser.nombreArchivo, 20); 
                                _E padre =new _E(atrib1 , parser.simbolo); 

                                    itemAtributo at1=new itemAtributo("valCadena",d1, d1right, d1left,parser.nombreArchivo); 
                                    padre.listaAtributos.insertar(at1);

                                RESULT= padre;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // E ::= valTrue 
            {
              nodoModelo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                itemAtributo atrib1=new itemAtributo("E", parser.nombreArchivo, 19); 
                                _E padre =new _E(atrib1 , parser.simbolo);

                                    itemAtributo at1=new itemAtributo("valTrue",d1, d1right, d1left,parser.nombreArchivo); 
                                    padre.listaAtributos.insertar(at1);
                                 

                                RESULT= padre;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // E ::= valFalse 
            {
              nodoModelo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                itemAtributo atrib1=new itemAtributo("E", parser.nombreArchivo, 18); 
                                _E padre =new _E(atrib1 , parser.simbolo);

                                    itemAtributo at1=new itemAtributo("valFalse",d1, d1right, d1left,parser.nombreArchivo); 
                                    padre.listaAtributos.insertar(at1);
                                
                                 

                                RESULT= padre;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // E ::= ID_VAR_FUNC 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                itemAtributo atrib1=new itemAtributo("E", parser.nombreArchivo, 17); 
                                _E padre =new _E(atrib1 , parser.simbolo);
                                
                                    padre.listaHijos.insertar(h1,h1left, h1right); 

                                RESULT= padre;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // E ::= sAbreParent E sCierraParent 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                itemAtributo atrib1=new itemAtributo("E", parser.nombreArchivo, 16); 
                                _E padre =new _E(atrib1 , parser.simbolo);
                                
                                    padre.listaHijos.insertar(h1,h1left, h1right); 

                                RESULT= padre;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // E ::= sNot E 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                itemAtributo atrib1=new itemAtributo("E", parser.nombreArchivo, 15); 
                                _E padre =new _E(atrib1 , parser.simbolo);
                                
                                    padre.listaHijos.insertar(h1,h1left, h1right); 

                                RESULT= padre;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // E ::= E sOr E 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h2 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                itemAtributo atrib1=new itemAtributo("E", parser.nombreArchivo, 14); 
                                _E padre =new _E(atrib1 , parser.simbolo);
                                
                                    padre.listaHijos.insertar(h1,h1left, h1right);
                                    padre.listaHijos.insertar(h2,h2left, h2right);

                                RESULT= padre;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // E ::= E sAnd E 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h2 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                itemAtributo atrib1=new itemAtributo("E", parser.nombreArchivo, 13); 
                                _E padre =new _E(atrib1 , parser.simbolo);
                                
                                    padre.listaHijos.insertar(h1,h1left, h1right);
                                    padre.listaHijos.insertar(h2,h2left, h2right);

                                RESULT= padre;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // E ::= E sMayorIgual E 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h2 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                itemAtributo atrib1=new itemAtributo("E", parser.nombreArchivo, 12); 
                                _E padre =new _E(atrib1 , parser.simbolo);
                                
                                    padre.listaHijos.insertar(h1,h1left, h1right);
                                    padre.listaHijos.insertar(h2,h2left, h2right);

                                RESULT= padre;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // E ::= E sMayor E 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h2 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                itemAtributo atrib1=new itemAtributo("E", parser.nombreArchivo, 11); 
                                _E padre =new _E(atrib1 , parser.simbolo);
                                
                                    padre.listaHijos.insertar(h1,h1left, h1right);
                                    padre.listaHijos.insertar(h2,h2left, h2right);

                                RESULT= padre;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // E ::= E sMenorIgual E 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h2 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                itemAtributo atrib1=new itemAtributo("E", parser.nombreArchivo, 10); 
                                _E padre =new _E(atrib1 , parser.simbolo);
                                
                                    padre.listaHijos.insertar(h1,h1left, h1right);
                                    padre.listaHijos.insertar(h2,h2left, h2right);

                                RESULT= padre;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // E ::= E sMenor E 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h2 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                itemAtributo atrib1=new itemAtributo("E", parser.nombreArchivo, 9); 
                                _E padre =new _E(atrib1 , parser.simbolo);
                                
                                    padre.listaHijos.insertar(h1,h1left, h1right);
                                    padre.listaHijos.insertar(h2,h2left, h2right);

                                RESULT= padre;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // E ::= E sDiferenciacion E 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h2 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                itemAtributo atrib1=new itemAtributo("E", parser.nombreArchivo, 8); 
                                _E padre =new _E(atrib1 , parser.simbolo);
                                
                                    padre.listaHijos.insertar(h1,h1left, h1right);
                                    padre.listaHijos.insertar(h2,h2left, h2right);

                                RESULT= padre;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // E ::= E sIgualacion E 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h2 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                itemAtributo atrib1=new itemAtributo("E", parser.nombreArchivo, 7); 
                                _E padre =new _E(atrib1 , parser.simbolo);
                                
                                    padre.listaHijos.insertar(h1,h1left, h1right);
                                    padre.listaHijos.insertar(h2,h2left, h2right);

                                RESULT= padre;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // E ::= E sModulo E 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h2 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                itemAtributo atrib1=new itemAtributo("E", parser.nombreArchivo, 6); 
                                _E padre =new _E(atrib1 , parser.simbolo);
                                
                                    padre.listaHijos.insertar(h1,h1left, h1right);
                                    padre.listaHijos.insertar(h2,h2left, h2right);

                                RESULT= padre;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // E ::= E sMenos E 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h2 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                itemAtributo atrib1=new itemAtributo("E", parser.nombreArchivo, 5); 
                                _E padre =new _E(atrib1 , parser.simbolo);
                                
                                    padre.listaHijos.insertar(h1,h1left, h1right);
                                    padre.listaHijos.insertar(h2,h2left, h2right);

                                RESULT= padre;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // E ::= E sMas E 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h2 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                itemAtributo atrib1=new itemAtributo("E", parser.nombreArchivo, 4); 
                                _E padre =new _E(atrib1 , parser.simbolo);
                                
                                    padre.listaHijos.insertar(h1,h1left, h1right);
                                    padre.listaHijos.insertar(h2,h2left, h2right);

                                RESULT= padre;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // E ::= E sPor E 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h2 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                itemAtributo atrib1=new itemAtributo("E", parser.nombreArchivo, 3); 
                                _E padre =new _E(atrib1 , parser.simbolo);
                                
                                    padre.listaHijos.insertar(h1,h1left, h1right);
                                    padre.listaHijos.insertar(h2,h2left, h2right);

                                RESULT= padre;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // E ::= E sDiv E 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h2 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                itemAtributo atrib1=new itemAtributo("E", parser.nombreArchivo, 2); 
                                _E padre =new _E(atrib1 , parser.simbolo);
                                
                                    padre.listaHijos.insertar(h1,h1left, h1right);
                                    padre.listaHijos.insertar(h2,h2left, h2right);

                                RESULT= padre;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // E ::= E sPot E 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h2 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                itemAtributo atrib1=new itemAtributo("E", parser.nombreArchivo, 1); 
                                _E padre =new _E(atrib1 , parser.simbolo);
                                
                                    padre.listaHijos.insertar(h1,h1left, h1right);
                                    padre.listaHijos.insertar(h2,h2left, h2right);

                                RESULT= padre;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // E ::= sMenos E 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                itemAtributo atrib1=new itemAtributo("E", parser.nombreArchivo, 0); 
                                _E padre =new _E(atrib1 , parser.simbolo);
                                
                                    padre.listaHijos.insertar(h1,h1left, h1right); 

                                RESULT= padre;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // VALOR ::= E 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            itemAtributo atrib1=new itemAtributo("VALOR", parser.nombreArchivo, 1); 
                            _VALOR padre =new _VALOR(atrib1 , parser.simbolo);
                            
                                padre.listaHijos.insertar(h1,h1left, h1right); 

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // VALOR ::= SI_SIMPLIFICADO 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            itemAtributo atrib1=new itemAtributo("VALOR", parser.nombreArchivo, 0); 
                            _VALOR padre =new _VALOR(atrib1 , parser.simbolo);
                            
                                padre.listaHijos.insertar(h1,h1left, h1right); 

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // LINEA ::= tLinea sAbreParent LST_VAL sCierraParent 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                            itemAtributo atrib1=new itemAtributo("LINEA", parser.nombreArchivo, 0); 
                            _LINEA padre =new _LINEA(atrib1 , parser.simbolo);
                            
                                padre.listaHijos.insertar(h1,h1left, h1right); 

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINEA",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // CADENA ::= tCadena sAbreParent LST_VAL sCierraParent 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                            itemAtributo atrib1=new itemAtributo("CADENA", parser.nombreArchivo, 0); 
                            _CADENA padre =new _CADENA(atrib1 , parser.simbolo);
                            
                                padre.listaHijos.insertar(h1,h1left, h1right); 

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CADENA",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // OVALO ::= tOvalo sAbreParent LST_VAL sCierraParent 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                            itemAtributo atrib1=new itemAtributo("OVALO", parser.nombreArchivo, 0); 
                            _OVALO padre =new _OVALO(atrib1 , parser.simbolo);
                            
                                padre.listaHijos.insertar(h1,h1left, h1right); 

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OVALO",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // CUADRADO ::= tCuadrado sAbreParent LST_VAL sCierraParent 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                            itemAtributo atrib1=new itemAtributo("CUADRADO", parser.nombreArchivo, 0); 
                            _CUADRADO padre =new _CUADRADO(atrib1 , parser.simbolo);
                            
                                padre.listaHijos.insertar(h1,h1left, h1right); 

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUADRADO",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // PUNTO ::= tPunto sAbreParent LST_VAL sCierraParent 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                            itemAtributo atrib1=new itemAtributo("PUNTO", parser.nombreArchivo, 0); 
                            _PUNTO padre =new _PUNTO(atrib1 , parser.simbolo);
                            
                                padre.listaHijos.insertar(h1,h1left, h1right); 

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PUNTO",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // IMPRIMIR ::= tImprimir sAbreParent sCierraParent 
            {
              nodoModelo RESULT =null;
		
                            itemAtributo atrib1=new itemAtributo("IMPRIMIR", parser.nombreArchivo, 1); 
                            _IMPRIMIR padre =new _IMPRIMIR(atrib1 , parser.simbolo);
                             

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // IMPRIMIR ::= tImprimir sAbreParent VALOR sCierraParent 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                            itemAtributo atrib1=new itemAtributo("IMPRIMIR", parser.nombreArchivo, 0); 
                            _IMPRIMIR padre =new _IMPRIMIR(atrib1 , parser.simbolo);
                            
                                padre.listaHijos.insertar(h1,h1left, h1right); 

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // FUNCIONES_NATIVAS ::= LINEA 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            itemAtributo atrib1=new itemAtributo("FUNCIONES_NATIVAS", parser.nombreArchivo, 5); 
                            _FUNCIONES_NATIVAS padre =new _FUNCIONES_NATIVAS(atrib1 , parser.simbolo);
                            
                                padre.listaHijos.insertar(h1,h1left, h1right); 

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES_NATIVAS",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // FUNCIONES_NATIVAS ::= CADENA 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            itemAtributo atrib1=new itemAtributo("FUNCIONES_NATIVAS", parser.nombreArchivo, 4); 
                            _FUNCIONES_NATIVAS padre =new _FUNCIONES_NATIVAS(atrib1 , parser.simbolo);
                            
                                padre.listaHijos.insertar(h1,h1left, h1right); 

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES_NATIVAS",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // FUNCIONES_NATIVAS ::= OVALO 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            itemAtributo atrib1=new itemAtributo("FUNCIONES_NATIVAS", parser.nombreArchivo, 3); 
                            _FUNCIONES_NATIVAS padre =new _FUNCIONES_NATIVAS(atrib1 , parser.simbolo);
                            
                                padre.listaHijos.insertar(h1,h1left, h1right); 

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES_NATIVAS",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // FUNCIONES_NATIVAS ::= CUADRADO 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            itemAtributo atrib1=new itemAtributo("FUNCIONES_NATIVAS", parser.nombreArchivo, 2); 
                            _FUNCIONES_NATIVAS padre =new _FUNCIONES_NATIVAS(atrib1 , parser.simbolo);
                            
                                padre.listaHijos.insertar(h1,h1left, h1right); 

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES_NATIVAS",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // FUNCIONES_NATIVAS ::= PUNTO 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            itemAtributo atrib1=new itemAtributo("FUNCIONES_NATIVAS", parser.nombreArchivo, 1); 
                            _FUNCIONES_NATIVAS padre =new _FUNCIONES_NATIVAS(atrib1 , parser.simbolo);
                            
                                padre.listaHijos.insertar(h1,h1left, h1right); 

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES_NATIVAS",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // FUNCIONES_NATIVAS ::= IMPRIMIR 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            itemAtributo atrib1=new itemAtributo("FUNCIONES_NATIVAS", parser.nombreArchivo, 0); 
                            _FUNCIONES_NATIVAS padre =new _FUNCIONES_NATIVAS(atrib1 , parser.simbolo);
                            
                                padre.listaHijos.insertar(h1,h1left, h1right); 

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES_NATIVAS",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // FOR ::= tPara sAbreParent ASIG_VALOR sPuntoComa VALOR sPuntoComa ASIG_VALOR sCierraParent sAbreLlave LST_CUERPO sCierraLlave 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		nodoModelo h2 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		nodoModelo h3 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int h4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodoModelo h4 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                            itemAtributo atrib1=new itemAtributo("FOR", parser.nombreArchivo, 1); 
                            _FOR padre =new _FOR(atrib1 , parser.simbolo);
                            
                                padre.listaHijos.insertar(h1,h1left, h1right);
                                padre.listaHijos.insertar(h2,h2left, h2right);
                                padre.listaHijos.insertar(h3,h3left, h3right);
                                padre.listaHijos.insertar(h4,h2left, h4right);

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // FOR ::= tPara sAbreParent DECLARAR_VARIABLE sPuntoComa VALOR sPuntoComa ASIG_VALOR sCierraParent sAbreLlave LST_CUERPO sCierraLlave 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		nodoModelo h2 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		nodoModelo h3 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int h4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodoModelo h4 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                            itemAtributo atrib1=new itemAtributo("FOR", parser.nombreArchivo, 0); 
                            _FOR padre =new _FOR(atrib1 , parser.simbolo);
                            
                                padre.listaHijos.insertar(h1,h1left, h1right);
                                padre.listaHijos.insertar(h2,h2left, h2right);
                                padre.listaHijos.insertar(h3,h3left, h3right);
                                padre.listaHijos.insertar(h4,h2left, h4right);

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // WHILE ::= tMientras sAbreParent VALOR sCierraParent sAbreLlave LST_CUERPO sCierraLlave 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodoModelo h2 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                            itemAtributo atrib1=new itemAtributo("WHILE", parser.nombreArchivo, 0); 
                            _WHILE padre =new _WHILE(atrib1 , parser.simbolo);
                            
                                padre.listaHijos.insertar(h1,h1left, h1right);
                                padre.listaHijos.insertar(h2,h2left, h2right);

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // SI_SIMPLIFICADO ::= VALOR sCierraInterrogante E sDosPuntos E 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodoModelo h2 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h3 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            itemAtributo atrib1=new itemAtributo("SI_SIMPLIFICADO", parser.nombreArchivo, 0); 
                            _SI_SIMPLIFICADO padre =new _SI_SIMPLIFICADO(atrib1 , parser.simbolo);
                            
                                padre.listaHijos.insertar(h1,h1left, h1right);
                                padre.listaHijos.insertar(h2,h2left, h2right);
                                padre.listaHijos.insertar(h3,h3left, h3right);

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SI_SIMPLIFICADO",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // SINO ::= tSino sAbreLlave LST_CUERPO sCierraLlave 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                            itemAtributo atrib1=new itemAtributo("SINO", parser.nombreArchivo, 0); 
                            _SINO padre =new _SINO(atrib1 , parser.simbolo);
                            
                                padre.listaHijos.insertar(h1,h1left, h1right); 

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SINO",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // SINO_SI ::= tSino tSi sAbreParent VALOR sCierraParent sAbreLlave LST_CUERPO sCierraLlave SINO 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodoModelo h2 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h3 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            itemAtributo atrib1=new itemAtributo("SINO_SI", parser.nombreArchivo, 2); 
                            _SINO_SI padre =new _SINO_SI(atrib1 , parser.simbolo);
                            
                                padre.listaHijos.insertar(h1,h1left, h1right);
                                padre.listaHijos.insertar(h2,h2left, h2right);
                                padre.listaHijos.insertar(h3,h3left, h3right);

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SINO_SI",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // SINO_SI ::= tSino tSi sAbreParent VALOR sCierraParent sAbreLlave LST_CUERPO sCierraLlave SINO_SI 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodoModelo h2 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h3 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            itemAtributo atrib1=new itemAtributo("SINO_SI", parser.nombreArchivo, 1); 
                            _SINO_SI padre =new _SINO_SI(atrib1 , parser.simbolo);
                            
                                padre.listaHijos.insertar(h1,h1left, h1right);
                                padre.listaHijos.insertar(h2,h2left, h2right);
                                padre.listaHijos.insertar(h3,h3left, h3right);

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SINO_SI",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // SINO_SI ::= tSino tSi sAbreParent VALOR sCierraParent sAbreLlave LST_CUERPO sCierraLlave 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodoModelo h2 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                            itemAtributo atrib1=new itemAtributo("SINO_SI", parser.nombreArchivo, 0); 
                            _SINO_SI padre =new _SINO_SI(atrib1 , parser.simbolo);
                            
                                padre.listaHijos.insertar(h1,h1left, h1right);
                                padre.listaHijos.insertar(h2,h2left, h2right);

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SINO_SI",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // SI ::= tSi sAbreParent VALOR sCierraParent sAbreLlave LST_CUERPO sCierraLlave SINO 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodoModelo h2 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h3 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            itemAtributo atrib1=new itemAtributo("SI", parser.nombreArchivo, 2); 
                            _SI padre =new _SI(atrib1 , parser.simbolo);
                            
                                padre.listaHijos.insertar(h1,h1left, h1right);
                                padre.listaHijos.insertar(h2,h2left, h2right);
                                padre.listaHijos.insertar(h3,h3left, h3right);

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SI",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SI ::= tSi sAbreParent VALOR sCierraParent sAbreLlave LST_CUERPO sCierraLlave SINO_SI 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodoModelo h2 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h3 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            itemAtributo atrib1=new itemAtributo("SI", parser.nombreArchivo, 1); 
                            _SI padre =new _SI(atrib1 , parser.simbolo);
                            
                                padre.listaHijos.insertar(h1,h1left, h1right);
                                padre.listaHijos.insertar(h2,h2left, h2right);
                                padre.listaHijos.insertar(h3,h3left, h3right);

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SI",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // SI ::= tSi sAbreParent VALOR sCierraParent sAbreLlave LST_CUERPO sCierraLlave 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodoModelo h2 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                            itemAtributo atrib1=new itemAtributo("SI", parser.nombreArchivo, 0); 
                            _SI padre =new _SI(atrib1 , parser.simbolo);
                            
                                padre.listaHijos.insertar(h1,h1left, h1right);
                                padre.listaHijos.insertar(h2,h2left, h2right);

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SI",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SENTENCIAS ::= FOR 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            itemAtributo atrib1=new itemAtributo("SENTENCIAS", parser.nombreArchivo, 2); 
                            _SENTENCIAS padre =new _SENTENCIAS(atrib1 , parser.simbolo);
                            
                                padre.listaHijos.insertar(h1,h1left, h1right); 

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SENTENCIAS ::= WHILE 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            itemAtributo atrib1=new itemAtributo("SENTENCIAS", parser.nombreArchivo, 1); 
                            _SENTENCIAS padre =new _SENTENCIAS(atrib1 , parser.simbolo);
                            
                                padre.listaHijos.insertar(h1,h1left, h1right); 

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SENTENCIAS ::= SI 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            itemAtributo atrib1=new itemAtributo("SENTENCIAS", parser.nombreArchivo, 0); 
                            _SENTENCIAS padre =new _SENTENCIAS(atrib1 , parser.simbolo);
                            
                                padre.listaHijos.insertar(h1,h1left, h1right); 

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // CONTINUAR ::= tContinuar sPuntoComa 
            {
              nodoModelo RESULT =null;
		
                            itemAtributo atrib1=new itemAtributo("CONTINUAR", parser.nombreArchivo, 0); 
                            _CONTINUAR padre =new _CONTINUAR(atrib1 , parser.simbolo);
                             

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTINUAR",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ROMPER ::= tDetener sPuntoComa 
            {
              nodoModelo RESULT =null;
		
                            itemAtributo atrib1=new itemAtributo("ROMPER", parser.nombreArchivo, 0); 
                            _ROMPER padre =new _ROMPER(atrib1 , parser.simbolo);
                             

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ROMPER",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // RETORNO ::= tRetornar VALOR sPuntoComa 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                            itemAtributo atrib1=new itemAtributo("RETORNO", parser.nombreArchivo, 1); 
                            _RETORNO padre =new _RETORNO(atrib1 , parser.simbolo);
                            
                                padre.listaHijos.insertar(h1,h1left, h1right); 

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETORNO",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // RETORNO ::= tRetornar sPuntoComa 
            {
              nodoModelo RESULT =null;
		
                            itemAtributo atrib1=new itemAtributo("RETORNO", parser.nombreArchivo, 0); 
                            _RETORNO padre =new _RETORNO(atrib1 , parser.simbolo);
                             

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETORNO",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // CONTROL ::= RETORNO 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            itemAtributo atrib1=new itemAtributo("CONTROL", parser.nombreArchivo, 2); 
                            _CONTROL padre =new _CONTROL(atrib1 , parser.simbolo);
                            
                                padre.listaHijos.insertar(h1,h1left, h1right); 

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTROL",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // CONTROL ::= CONTINUAR 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            itemAtributo atrib1=new itemAtributo("CONTROL", parser.nombreArchivo, 1); 
                            _CONTROL padre =new _CONTROL(atrib1 , parser.simbolo);
                            
                                padre.listaHijos.insertar(h1,h1left, h1right); 

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTROL",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // CONTROL ::= ROMPER 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            itemAtributo atrib1=new itemAtributo("CONTROL", parser.nombreArchivo, 0); 
                            _CONTROL padre =new _CONTROL(atrib1 , parser.simbolo);
                            
                                padre.listaHijos.insertar(h1,h1left, h1right); 

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTROL",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // CUERPO ::= CONTROL 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            itemAtributo atrib1=new itemAtributo("CUERPO", parser.nombreArchivo, 5); 
                            _CUERPO padre =new _CUERPO(atrib1 , parser.simbolo);
                            
                                padre.listaHijos.insertar(h1,h1left, h1right); 

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // CUERPO ::= SENTENCIAS 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            itemAtributo atrib1=new itemAtributo("CUERPO", parser.nombreArchivo, 4); 
                            _CUERPO padre =new _CUERPO(atrib1 , parser.simbolo);
                            
                                padre.listaHijos.insertar(h1,h1left, h1right); 

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CUERPO ::= FUNCIONES_NATIVAS sPuntoComa 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                            itemAtributo atrib1=new itemAtributo("CUERPO", parser.nombreArchivo, 3); 
                            _CUERPO padre =new _CUERPO(atrib1 , parser.simbolo);
                            
                                padre.listaHijos.insertar(h1,h1left, h1right); 

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CUERPO ::= ASIG_VALOR sPuntoComa 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                            itemAtributo atrib1=new itemAtributo("CUERPO", parser.nombreArchivo, 2); 
                            _CUERPO padre =new _CUERPO(atrib1 , parser.simbolo);
                            
                                padre.listaHijos.insertar(h1,h1left, h1right); 

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // CUERPO ::= ID_VAR_FUNC sPuntoComa 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                            itemAtributo atrib1=new itemAtributo("CUERPO", parser.nombreArchivo, 1); 
                            _CUERPO padre =new _CUERPO(atrib1 , parser.simbolo);
                            
                                padre.listaHijos.insertar(h1,h1left, h1right); 

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // CUERPO ::= DECLARAR_VARIABLE sPuntoComa 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                            itemAtributo atrib1=new itemAtributo("CUERPO", parser.nombreArchivo, 0); 
                            _CUERPO padre =new _CUERPO(atrib1 , parser.simbolo);
                            
                                padre.listaHijos.insertar(h1,h1left, h1right); 

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // LST_CUERPO2 ::= CUERPO 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            itemAtributo atrib1=new itemAtributo("LST_CUERPO2", parser.nombreArchivo, 1); 
                            _LST_CUERPO2 padre =new _LST_CUERPO2(atrib1 , parser.simbolo);
                            
                                padre.listaHijos.insertar(h1,h1left, h1right); 

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LST_CUERPO2",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // LST_CUERPO2 ::= LST_CUERPO2 CUERPO 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h2 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            itemAtributo atrib1=new itemAtributo("LST_CUERPO2", parser.nombreArchivo, 0); 
                            _LST_CUERPO2 padre =new _LST_CUERPO2(atrib1 , parser.simbolo);
                            
                                padre.listaHijos.insertar(h1,h1left, h1right);
                                padre.listaHijos.insertar(h2,h2left, h2right);

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LST_CUERPO2",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // LST_CUERPO ::= 
            {
              nodoModelo RESULT =null;
		
                            itemAtributo atrib1=new itemAtributo("LST_CUERPO", parser.nombreArchivo, 0); 
                            _LST_CUERPO padre =new _LST_CUERPO(atrib1 , parser.simbolo);
                                 
                                _VACIO h1 =new _VACIO(atrib1 , parser.simbolo);
                                padre.listaHijos.insertar(h1,0, 0); 

                            RESULT= padre;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LST_CUERPO",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // LST_CUERPO ::= LST_CUERPO2 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            itemAtributo atrib1=new itemAtributo("LST_CUERPO", parser.nombreArchivo, 0); 
                            _LST_CUERPO padre =new _LST_CUERPO(atrib1 , parser.simbolo);
                            
                                padre.listaHijos.insertar(h1,h1left, h1right); 

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LST_CUERPO",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ASIG_VALOR ::= ID_VAR_FUNC sMenos sMenos 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                            itemAtributo atrib1=new itemAtributo("ASIG_VALOR", parser.nombreArchivo, 2); 
                            _ASIG_VALOR padre =new _ASIG_VALOR(atrib1 , parser.simbolo);
                            
                                padre.listaHijos.insertar(h1,h1left, h1right); 

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIG_VALOR",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ASIG_VALOR ::= ID_VAR_FUNC sMas sMas 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                            itemAtributo atrib1=new itemAtributo("ASIG_VALOR", parser.nombreArchivo, 1); 
                            _ASIG_VALOR padre =new _ASIG_VALOR(atrib1 , parser.simbolo);
                            
                                padre.listaHijos.insertar(h1,h1left, h1right); 

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIG_VALOR",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ASIG_VALOR ::= ID_VAR_FUNC VAL 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h2 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            itemAtributo atrib1=new itemAtributo("ASIG_VALOR", parser.nombreArchivo, 0); 
                            _ASIG_VALOR padre =new _ASIG_VALOR(atrib1 , parser.simbolo);
                            
                                padre.listaHijos.insertar(h1,h1left, h1right);
                                padre.listaHijos.insertar(h2,h2left, h2right); 

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIG_VALOR",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // LST_PUNTOSP ::= sPunto valId sAbreParent sCierraParent LST_CORCHETES_VAL 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            itemAtributo atrib1=new itemAtributo("LST_PUNTOSP", parser.nombreArchivo, 5); 
                            _LST_PUNTOSP padre =new _LST_PUNTOSP(atrib1 , parser.simbolo);
                            
                                padre.listaHijos.insertar(h1,h1left, h1right); 

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LST_PUNTOSP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // LST_PUNTOSP ::= sPunto valId sAbreParent LST_VAL sCierraParent LST_CORCHETES_VAL 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h2 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            itemAtributo atrib1=new itemAtributo("LST_PUNTOSP", parser.nombreArchivo, 4); 
                            _LST_PUNTOSP padre =new _LST_PUNTOSP(atrib1 , parser.simbolo);
                            
                                padre.listaHijos.insertar(h1,h1left, h1right);
                                padre.listaHijos.insertar(h2,h2left, h2right);

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LST_PUNTOSP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // LST_PUNTOSP ::= sPunto valId LST_CORCHETES_VAL 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            itemAtributo atrib1=new itemAtributo("LST_PUNTOSP", parser.nombreArchivo, 3); 
                            _LST_PUNTOSP padre =new _LST_PUNTOSP(atrib1 , parser.simbolo);
                            
                                padre.listaHijos.insertar(h1,h1left, h1right); 

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LST_PUNTOSP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // LST_PUNTOSP ::= sPunto valId sAbreParent sCierraParent 
            {
              nodoModelo RESULT =null;
		
                            itemAtributo atrib1=new itemAtributo("LST_PUNTOSP", parser.nombreArchivo, 2); 
                            _LST_PUNTOSP padre =new _LST_PUNTOSP(atrib1 , parser.simbolo);
                             

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LST_PUNTOSP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // LST_PUNTOSP ::= sPunto valId sAbreParent LST_VAL sCierraParent 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                            itemAtributo atrib1=new itemAtributo("LST_PUNTOSP", parser.nombreArchivo, 1); 
                            _LST_PUNTOSP padre =new _LST_PUNTOSP(atrib1 , parser.simbolo);
                            
                                padre.listaHijos.insertar(h1,h1left, h1right); 

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LST_PUNTOSP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // LST_PUNTOSP ::= sPunto valId 
            {
              nodoModelo RESULT =null;
		
                            itemAtributo atrib1=new itemAtributo("LST_PUNTOSP", parser.nombreArchivo, 0); 
                            _LST_PUNTOSP padre =new _LST_PUNTOSP(atrib1 , parser.simbolo);
                             

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LST_PUNTOSP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ID_VAR_FUNC ::= valId sAbreParent sCierraParent LST_CORCHETES_VAL 
            {
              nodoModelo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String d1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            itemAtributo atrib1=new itemAtributo("ID_VAR_FUNC", parser.nombreArchivo, 6); 
                            _ID_VAR_FUNC padre =new _ID_VAR_FUNC(atrib1 , parser.simbolo);
                            
                                padre.listaHijos.insertar(h1,h1left, h1right); 


                                itemAtributo at1=new itemAtributo("valId",d1, d1right, d1left,parser.nombreArchivo); 
                                padre.listaAtributos.insertar(at1);

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID_VAR_FUNC",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ID_VAR_FUNC ::= valId sAbreParent LST_VAL sCierraParent LST_CORCHETES_VAL 
            {
              nodoModelo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String d1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h2 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            itemAtributo atrib1=new itemAtributo("ID_VAR_FUNC", parser.nombreArchivo, 5); 
                            _ID_VAR_FUNC padre =new _ID_VAR_FUNC(atrib1 , parser.simbolo);
                            
                                padre.listaHijos.insertar(h1,h1left, h1right);
                                padre.listaHijos.insertar(h2,h2left, h2right);

                                itemAtributo at1=new itemAtributo("valId",d1, d1right, d1left,parser.nombreArchivo); 
                                padre.listaAtributos.insertar(at1);

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID_VAR_FUNC",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ID_VAR_FUNC ::= valId LST_CORCHETES_VAL 
            {
              nodoModelo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String d1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            itemAtributo atrib1=new itemAtributo("ID_VAR_FUNC", parser.nombreArchivo, 4); 
                            _ID_VAR_FUNC padre =new _ID_VAR_FUNC(atrib1 , parser.simbolo);
                            
                                padre.listaHijos.insertar(h1,h1left, h1right); 

                                itemAtributo at1=new itemAtributo("valId",d1, d1right, d1left,parser.nombreArchivo); 
                                padre.listaAtributos.insertar(at1);

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID_VAR_FUNC",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ID_VAR_FUNC ::= valId sAbreParent sCierraParent 
            {
              nodoModelo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String d1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                            itemAtributo atrib1=new itemAtributo("ID_VAR_FUNC", parser.nombreArchivo, 3); 
                            _ID_VAR_FUNC padre =new _ID_VAR_FUNC(atrib1 , parser.simbolo);
                             

                                itemAtributo at1=new itemAtributo("valId",d1, d1right, d1left,parser.nombreArchivo); 
                                padre.listaAtributos.insertar(at1);

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID_VAR_FUNC",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ID_VAR_FUNC ::= valId sAbreParent LST_VAL sCierraParent 
            {
              nodoModelo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String d1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                            itemAtributo atrib1=new itemAtributo("ID_VAR_FUNC", parser.nombreArchivo, 2); 
                            _ID_VAR_FUNC padre =new _ID_VAR_FUNC(atrib1 , parser.simbolo);
                             

                                padre.listaHijos.insertar(h1,h1left, h1right); 

                                itemAtributo at1=new itemAtributo("valId",d1, d1right, d1left,parser.nombreArchivo); 
                                padre.listaAtributos.insertar(at1);

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID_VAR_FUNC",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ID_VAR_FUNC ::= valId 
            {
              nodoModelo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            itemAtributo atrib1=new itemAtributo("ID_VAR_FUNC", parser.nombreArchivo, 1); 
                            _ID_VAR_FUNC padre =new _ID_VAR_FUNC(atrib1 , parser.simbolo);
                             

                                itemAtributo at1=new itemAtributo("valId",d1, d1right, d1left,parser.nombreArchivo); 
                                padre.listaAtributos.insertar(at1);

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID_VAR_FUNC",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ID_VAR_FUNC ::= ID_VAR_FUNC LST_PUNTOSP 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h2 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            itemAtributo atrib1=new itemAtributo("ID_VAR_FUNC", parser.nombreArchivo, 0); 
                            _ID_VAR_FUNC padre =new _ID_VAR_FUNC(atrib1 , parser.simbolo);
                             
                             padre.listaHijos.insertar(h1,h1left, h1right); 

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID_VAR_FUNC",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // PAR_CORCHETES_VAL ::= sAbreCorchete VALOR sCierraCorchete 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                            itemAtributo atrib1=new itemAtributo("PAR_CORCHETES_VAL", parser.nombreArchivo, 0); 
                            _PAR_CORCHETES_VAL padre =new _PAR_CORCHETES_VAL(atrib1 , parser.simbolo);
                            
                                padre.listaHijos.insertar(h1,h1left, h1right); 

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PAR_CORCHETES_VAL",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // LST_CORCHETES_VAL ::= PAR_CORCHETES_VAL 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            itemAtributo atrib1=new itemAtributo("LST_CORCHETES_VAL", parser.nombreArchivo, 1); 
                            _LST_CORCHETES_VAL padre =new _LST_CORCHETES_VAL(atrib1 , parser.simbolo);
                            
                                padre.listaHijos.insertar(h1,h1left, h1right); 

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LST_CORCHETES_VAL",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // LST_CORCHETES_VAL ::= LST_CORCHETES_VAL PAR_CORCHETES_VAL 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h2 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            itemAtributo atrib1=new itemAtributo("LST_CORCHETES_VAL", parser.nombreArchivo, 0); 
                            _LST_CORCHETES_VAL padre =new _LST_CORCHETES_VAL(atrib1 , parser.simbolo);
                            
                                padre.listaHijos.insertar(h1,h1left, h1right);
                                padre.listaHijos.insertar(h2,h2left, h2right);

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LST_CORCHETES_VAL",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // VAR_ARREGLO ::= valId LST_CORCHETES_VAL 
            {
              nodoModelo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String d1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            itemAtributo atrib1=new itemAtributo("VAR_ARREGLO", parser.nombreArchivo, 1); 
                            _VAR_ARREGLO padre =new _VAR_ARREGLO(atrib1 , parser.simbolo);
                            
                                padre.listaHijos.insertar(h1,h1left, h1right); 

                                itemAtributo at1=new itemAtributo("valChar",d1, d1right, d1left,parser.nombreArchivo); 
                                padre.listaAtributos.insertar(at1);

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAR_ARREGLO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // VAR_ARREGLO ::= valId 
            {
              nodoModelo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            itemAtributo atrib1=new itemAtributo("VAR_ARREGLO", parser.nombreArchivo, 0); 
                            _VAR_ARREGLO padre =new _VAR_ARREGLO(atrib1 , parser.simbolo);
                             

                                itemAtributo at1=new itemAtributo("valChar",d1, d1right, d1left,parser.nombreArchivo); 
                                padre.listaAtributos.insertar(at1);


                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAR_ARREGLO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // LLAVES_VAL_P ::= sAbreLlave LST_VAL sCierraLlave 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                            itemAtributo atrib1=new itemAtributo("LLAVES_VAL_P", parser.nombreArchivo, 1); 
                            _LLAVES_VAL_P padre =new _LLAVES_VAL_P(atrib1 , parser.simbolo);
                            
                                padre.listaHijos.insertar(h1,h1left, h1right); 

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAVES_VAL_P",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LLAVES_VAL_P ::= sAbreLlave LST_LLAVES_VAL sCierraLlave 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                            itemAtributo atrib1=new itemAtributo("LLAVES_VAL_P", parser.nombreArchivo, 0); 
                            _LLAVES_VAL_P padre =new _LLAVES_VAL_P(atrib1 , parser.simbolo);
                            
                                padre.listaHijos.insertar(h1,h1left, h1right); 

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAVES_VAL_P",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // LST_LLAVES_VAL ::= LLAVES_VAL_P 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            itemAtributo atrib1=new itemAtributo("LST_LLAVES_VAL", parser.nombreArchivo, 1); 
                            _LST_LLAVES_VAL padre =new _LST_LLAVES_VAL(atrib1 , parser.simbolo);
                            
                                padre.listaHijos.insertar(h1,h1left, h1right); 

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LST_LLAVES_VAL",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LST_LLAVES_VAL ::= LST_LLAVES_VAL sComa LLAVES_VAL_P 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h2 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            itemAtributo atrib1=new itemAtributo("LST_LLAVES_VAL", parser.nombreArchivo, 0); 
                            _LST_LLAVES_VAL padre =new _LST_LLAVES_VAL(atrib1 , parser.simbolo);
                            
                                padre.listaHijos.insertar(h1,h1left, h1right);
                                padre.listaHijos.insertar(h2,h2left, h2right);

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LST_LLAVES_VAL",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // VAL ::= sIgual LST_LLAVES_VAL 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            itemAtributo atrib1=new itemAtributo("VAL", parser.nombreArchivo, 1); 
                            _VAL padre =new _VAL(atrib1 , parser.simbolo);
                            
                                padre.listaHijos.insertar(h1,h1left, h1right); 

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAL",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // VAL ::= sIgual VALOR 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            itemAtributo atrib1=new itemAtributo("VAL", parser.nombreArchivo, 0); 
                            _VAL padre =new _VAL(atrib1 , parser.simbolo);
                            
                                padre.listaHijos.insertar(h1,h1left, h1right); 

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAL",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARAR_VARIABLE ::= TIPO VAR_ARREGLO 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h2 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            itemAtributo atrib1=new itemAtributo("DECLARAR_VARIABLE", parser.nombreArchivo, 3); 
                            _DECLARAR_VARIABLE padre =new _DECLARAR_VARIABLE(atrib1 , parser.simbolo);
                            
                                padre.listaHijos.insertar(h1,h1left, h1right);
                                padre.listaHijos.insertar(h2,h2left, h2right);

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARAR_VARIABLE",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARAR_VARIABLE ::= TIPO VAR_ARREGLO VAL 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodoModelo h2 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h3 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            itemAtributo atrib1=new itemAtributo("DECLARAR_VARIABLE", parser.nombreArchivo, 2); 
                            _DECLARAR_VARIABLE padre =new _DECLARAR_VARIABLE(atrib1 , parser.simbolo);
                            
                                padre.listaHijos.insertar(h1,h1left, h1right);
                                padre.listaHijos.insertar(h2,h2left, h2right);
                                padre.listaHijos.insertar(h3,h3left, h3right);

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARAR_VARIABLE",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARAR_VARIABLE ::= DECLARAR_VARIABLE sComa VAR_ARREGLO 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h2 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            itemAtributo atrib1=new itemAtributo("DECLARAR_VARIABLE", parser.nombreArchivo, 1); 
                            _DECLARAR_VARIABLE padre =new _DECLARAR_VARIABLE(atrib1 , parser.simbolo);
                            
                                padre.listaHijos.insertar(h1,h1left, h1right);
                                padre.listaHijos.insertar(h2,h2left, h2right);

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARAR_VARIABLE",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARAR_VARIABLE ::= DECLARAR_VARIABLE sComa VAR_ARREGLO VAL 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodoModelo h2 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h3 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            itemAtributo atrib1=new itemAtributo("DECLARAR_VARIABLE", parser.nombreArchivo, 0); 
                            _DECLARAR_VARIABLE padre =new _DECLARAR_VARIABLE(atrib1 , parser.simbolo);
                            
                                padre.listaHijos.insertar(h1,h1left, h1right);
                                padre.listaHijos.insertar(h2,h2left, h2right);
                                padre.listaHijos.insertar(h3,h3left, h3right);

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARAR_VARIABLE",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LST_DECLARAR_VAR ::= DECLARAR_VARIABLE sPuntoComa 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                            itemAtributo atrib1=new itemAtributo("LST_DECLARAR_VAR", parser.nombreArchivo, 1); 
                            _LST_DECLARAR_VAR padre =new _LST_DECLARAR_VAR(atrib1 , parser.simbolo);
                            
                                padre.listaHijos.insertar(h1,h1left, h1right); 

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LST_DECLARAR_VAR",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LST_DECLARAR_VAR ::= LST_DECLARAR_VAR DECLARAR_VARIABLE sPuntoComa 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodoModelo h2 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                            itemAtributo atrib1=new itemAtributo("LST_DECLARAR_VAR", parser.nombreArchivo, 0); 
                            _LST_DECLARAR_VAR padre =new _LST_DECLARAR_VAR(atrib1 , parser.simbolo);
                            
                                padre.listaHijos.insertar(h1,h1left, h1right);
                                padre.listaHijos.insertar(h2,h2left, h2right);

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LST_DECLARAR_VAR",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // MAIN ::= tPrincipal sAbreParent sCierraParent sAbreLlave LST_CUERPO sCierraLlave 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                            itemAtributo atrib1=new itemAtributo("MAIN", parser.nombreArchivo, 1); 
                            _MAIN padre =new _MAIN(atrib1 , parser.simbolo);
                            
                                padre.listaHijos.insertar(h1,h1left, h1right);
                                

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAIN",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // MAIN ::= TIPO tPrincipal sAbreParent sCierraParent sAbreLlave LST_CUERPO sCierraLlave 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodoModelo h2 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                            itemAtributo atrib1=new itemAtributo("MAIN", parser.nombreArchivo, 0); 
                            _MAIN padre =new _MAIN(atrib1 , parser.simbolo);
                            
                                padre.listaHijos.insertar(h1,h1left, h1right);
                                padre.listaHijos.insertar(h2,h2left, h2right);

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MAIN",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // METODO ::= TIPO VAR_ARREGLO sAbreParent sCierraParent sAbreLlave LST_CUERPO sCierraLlave 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		nodoModelo h2 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodoModelo h3 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                            itemAtributo atrib1=new itemAtributo("METODO", parser.nombreArchivo, 1); 
                            _METODO padre =new _METODO(atrib1 , parser.simbolo);
                            
                                padre.listaHijos.insertar(h1,h1left, h1right);
                                padre.listaHijos.insertar(h2,h2left, h2right);
                                padre.listaHijos.insertar(h3,h3left, h3right);

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("METODO",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // METODO ::= TIPO VAR_ARREGLO sAbreParent LST_PARAMETROS sCierraParent sAbreLlave LST_CUERPO sCierraLlave 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		nodoModelo h2 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		nodoModelo h3 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int h4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodoModelo h4 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                            itemAtributo atrib1=new itemAtributo("METODO", parser.nombreArchivo, 0); 
                            _METODO padre =new _METODO(atrib1 , parser.simbolo);
                            
                                padre.listaHijos.insertar(h1,h1left, h1right);
                                padre.listaHijos.insertar(h2,h2left, h2right);
                                padre.listaHijos.insertar(h3,h3left, h3right);
                                padre.listaHijos.insertar(h4,h4left, h4right);

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("METODO",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ESTRUCTURA ::= tEstructura valId sAbreLlave LST_DECLARAR_VAR sCierraLlave 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                            itemAtributo atrib1=new itemAtributo("ESTRUCTURA", parser.nombreArchivo, 0); 
                            _ESTRUCTURA padre =new _ESTRUCTURA(atrib1 , parser.simbolo);
                            
                                padre.listaHijos.insertar(h1,h1left, h1right); 

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CUERPO_DRACO ::= IMPORT 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                             itemAtributo atrib1=new itemAtributo("CUERPO_DRACO", parser.nombreArchivo, 3); 
                            _CUERPO_DRACO padre =new _CUERPO_DRACO(atrib1 , parser.simbolo);
                            
                                padre.listaHijos.insertar(h1,h1left, h1right); 

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_DRACO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CUERPO_DRACO ::= ESTRUCTURA 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            itemAtributo atrib1=new itemAtributo("CUERPO_DRACO", parser.nombreArchivo, 3); 
                            _CUERPO_DRACO padre =new _CUERPO_DRACO(atrib1 , parser.simbolo);
                            
                                padre.listaHijos.insertar(h1,h1left, h1right); 

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_DRACO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CUERPO_DRACO ::= MAIN 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            itemAtributo atrib1=new itemAtributo("CUERPO_DRACO", parser.nombreArchivo, 2); 
                            _CUERPO_DRACO padre =new _CUERPO_DRACO(atrib1 , parser.simbolo);
                            
                                padre.listaHijos.insertar(h1,h1left, h1right); 

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_DRACO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CUERPO_DRACO ::= METODO 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            itemAtributo atrib1=new itemAtributo("CUERPO_DRACO", parser.nombreArchivo, 1); 
                            _CUERPO_DRACO padre =new _CUERPO_DRACO(atrib1 , parser.simbolo);
                            
                                padre.listaHijos.insertar(h1,h1left, h1right); 

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_DRACO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CUERPO_DRACO ::= DECLARAR_VARIABLE sPuntoComa 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                            itemAtributo atrib1=new itemAtributo("CUERPO_DRACO", parser.nombreArchivo, 0); 
                            _CUERPO_DRACO padre =new _CUERPO_DRACO(atrib1 , parser.simbolo);
                            
                                padre.listaHijos.insertar(h1,h1left, h1right); 

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO_DRACO",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CP_DRACO ::= CUERPO_DRACO 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            itemAtributo atrib1=new itemAtributo("CP_DRACO", parser.nombreArchivo, 1); 
                            _CP_DRACO padre =new _CP_DRACO(atrib1 , parser.simbolo);
                            
                                padre.listaHijos.insertar(h1,h1left, h1right); 

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CP_DRACO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CP_DRACO ::= CP_DRACO CUERPO_DRACO 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h2 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            itemAtributo atrib1=new itemAtributo("CP_DRACO", parser.nombreArchivo, 0); 
                            _CP_DRACO padre =new _CP_DRACO(atrib1 , parser.simbolo);
                            
                                padre.listaHijos.insertar(h1,h1left, h1right);
                                padre.listaHijos.insertar(h2,h2left, h2right);

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CP_DRACO",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LST_VAL ::= VALOR 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            itemAtributo atrib1=new itemAtributo("LST_VAL", parser.nombreArchivo, 1); 
                            _LST_VAL padre =new _LST_VAL(atrib1 , parser.simbolo);
                            
                                padre.listaHijos.insertar(h1,h1left, h1right); 

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LST_VAL",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LST_VAL ::= LST_VAL sComa VALOR 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h2 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            
                                h1.listaHijos.insertar(h2,h2left, h2right);

                            RESULT= h1;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LST_VAL",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // PARAMETRO ::= TIPO VAR_ARREGLO 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h2 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            itemAtributo atrib1=new itemAtributo("PARAMETRO", parser.nombreArchivo, 0); 
                            _PARAMETRO padre =new _PARAMETRO(atrib1 , parser.simbolo);
                            
                                padre.listaHijos.insertar(h1,h1left, h1right);
                                padre.listaHijos.insertar(h2,h2left, h2right);

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LST_PARAMETROS ::= PARAMETRO 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            itemAtributo atrib1=new itemAtributo("_LST_PARAMETROS", parser.nombreArchivo, 1); 
                            _LST_PARAMETROS padre =new _LST_PARAMETROS(atrib1 , parser.simbolo);
                            
                                padre.listaHijos.insertar(h1,h1left, h1right); 

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LST_PARAMETROS",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LST_PARAMETROS ::= LST_PARAMETROS sComa PARAMETRO 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h2 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            itemAtributo atrib1=new itemAtributo("LST_PARAMETROS", parser.nombreArchivo, 0); 
                            _LST_PARAMETROS padre =new _LST_PARAMETROS(atrib1 , parser.simbolo);
                            
                                padre.listaHijos.insertar(h1,h1left, h1right);
                                padre.listaHijos.insertar(h2,h2left, h2right);

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LST_PARAMETROS",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // TIPO ::= tCadena 
            {
              nodoModelo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            itemAtributo atrib1=new itemAtributo("TIPO", parser.nombreArchivo, 5); 
                            _TIPO padre =new _TIPO(atrib1 , parser.simbolo);
                             

                                itemAtributo at1=new itemAtributo("valChar",d1, d1right, d1left,parser.nombreArchivo); 
                                padre.listaAtributos.insertar(at1);
                            
                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // TIPO ::= tVacio 
            {
              nodoModelo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            itemAtributo atrib1=new itemAtributo("TIPO", parser.nombreArchivo, 4); 
                            _TIPO padre =new _TIPO(atrib1 , parser.simbolo);
                             
                                itemAtributo at1=new itemAtributo("valChar",d1, d1right, d1left,parser.nombreArchivo); 
                                padre.listaAtributos.insertar(at1);

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // TIPO ::= tBooleano 
            {
              nodoModelo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            itemAtributo atrib1=new itemAtributo("TIPO", parser.nombreArchivo, 3); 
                            _TIPO padre =new _TIPO(atrib1 , parser.simbolo);
                             
                                itemAtributo at1=new itemAtributo("valChar",d1, d1right, d1left,parser.nombreArchivo); 
                                padre.listaAtributos.insertar(at1);

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // TIPO ::= tCaracter 
            {
              nodoModelo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            itemAtributo atrib1=new itemAtributo("TIPO", parser.nombreArchivo, 2); 
                            _TIPO padre =new _TIPO(atrib1 , parser.simbolo);
                             
                                itemAtributo at1=new itemAtributo("valChar",d1, d1right, d1left,parser.nombreArchivo); 
                                padre.listaAtributos.insertar(at1);

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // TIPO ::= tDecimal 
            {
              nodoModelo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            itemAtributo atrib1=new itemAtributo("TIPO", parser.nombreArchivo, 1); 
                            _TIPO padre =new _TIPO(atrib1 , parser.simbolo);
                             
                                itemAtributo at1=new itemAtributo("valChar",d1, d1right, d1left,parser.nombreArchivo); 
                                padre.listaAtributos.insertar(at1);

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // TIPO ::= tEntero 
            {
              nodoModelo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            itemAtributo atrib1=new itemAtributo("TIPO", parser.nombreArchivo, 0); 
                            _TIPO padre =new _TIPO(atrib1 , parser.simbolo);
                             
                                itemAtributo at1=new itemAtributo("valChar",d1, d1right, d1left,parser.nombreArchivo); 
                                padre.listaAtributos.insertar(at1);

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // IMPORT ::= tImportar sAbreParent E sCierraParent sPuntoComa 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                            itemAtributo atrib1=new itemAtributo("IMPORT", parser.nombreArchivo, 0); 
                            _IMPORT padre =new _IMPORT(atrib1 , parser.simbolo);
                            
                                padre.listaHijos.insertar(h1,h1left, h1right); 

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPORT",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= CP_DRACO 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            itemAtributo atrib1=new itemAtributo("S", parser.nombreArchivo, 1); 
                            _S padre =new _S(atrib1 , parser.simbolo);
                            
                                padre.listaHijos.insertar(h1,h1left, h1right); 
                                parser.raiz=padre;
                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodoModelo start_val = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

