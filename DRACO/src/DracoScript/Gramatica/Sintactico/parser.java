
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Oct 16 21:29:10 CST 2018
//----------------------------------------------------

package DracoScript.Gramatica.Sintactico;

import java.util.List;
import java_cup.runtime.*;
import java.util.ArrayList;
import DracoScript.Estructuras.Elementos.elementoGlobal;
import DracoScript.Nodos.AsignarValor.*;
import DracoScript.Nodos.Inicio.*;
import DracoScript.Nodos.Nativas.*;
import DracoScript.Nodos.SentenciaControl.*;
import DracoScript.Nodos.Sentencias.*;
import DracoScript.Nodos.Sentencias.For.*;
import DracoScript.Nodos.Sentencias.If.*;
import DracoScript.Nodos.Sentencias.While.*;
import DracoScript.Nodos.Valor.*;
import DracoScript.Nodos.*;
import DracoScript.Estructuras.Items.itemAtributo;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Oct 16 21:29:10 CST 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\115\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\004\000\002\004\004" +
    "\000\002\004\003\000\002\004\003\000\002\004\004\000" +
    "\002\005\003\000\002\005\004\000\002\005\004\000\002" +
    "\006\004\000\002\007\005\000\002\007\005\000\002\007" +
    "\003\000\002\007\003\000\002\010\005\000\002\011\005" +
    "\000\002\011\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\013\004\000\002\014\011\000\002" +
    "\014\012\000\002\014\012\000\002\015\011\000\002\015" +
    "\012\000\002\015\012\000\002\017\006\000\002\020\011" +
    "\000\002\021\015\000\002\021\015\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\023" +
    "\006\000\002\023\005\000\002\024\006\000\002\024\005" +
    "\000\002\024\006\000\002\024\005\000\002\025\006\000" +
    "\002\026\006\000\002\027\006\000\002\030\006\000\002" +
    "\031\006\000\002\032\003\000\002\033\004\000\002\033" +
    "\005\000\002\033\005\000\002\033\005\000\002\033\005" +
    "\000\002\033\005\000\002\033\005\000\002\033\005\000" +
    "\002\033\005\000\002\033\005\000\002\033\005\000\002" +
    "\033\005\000\002\033\005\000\002\033\005\000\002\033" +
    "\005\000\002\033\004\000\002\033\005\000\002\033\003" +
    "\000\002\033\003\000\002\033\003\000\002\033\003\000" +
    "\002\033\003\000\002\033\003\000\002\033\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\251\000\036\040\023\041\016\042\037\045\005\046" +
    "\022\047\032\050\043\051\011\052\033\053\020\054\024" +
    "\055\030\056\015\062\035\001\002\000\006\004\ufff8\025" +
    "\ufff8\001\002\000\004\024\246\001\002\000\042\002\ufffa" +
    "\031\ufffa\040\ufffa\041\ufffa\042\ufffa\045\ufffa\046\ufffa\047" +
    "\ufffa\050\ufffa\051\ufffa\052\ufffa\053\ufffa\054\ufffa\055\ufffa" +
    "\056\ufffa\062\ufffa\001\002\000\042\002\ufffe\031\ufffe\040" +
    "\ufffe\041\ufffe\042\ufffe\045\ufffe\046\ufffe\047\ufffe\050\ufffe" +
    "\051\ufffe\052\ufffe\053\ufffe\054\ufffe\055\ufffe\056\ufffe\062" +
    "\ufffe\001\002\000\042\002\uffec\031\uffec\040\uffec\041\uffec" +
    "\042\uffec\045\uffec\046\uffec\047\uffec\050\uffec\051\uffec\052" +
    "\uffec\053\uffec\054\uffec\055\uffec\056\uffec\062\uffec\001\002" +
    "\000\004\024\243\001\002\000\004\002\242\001\002\000" +
    "\004\004\uffdd\001\002\000\004\004\241\001\002\000\004" +
    "\024\236\001\002\000\004\004\235\001\002\000\042\002" +
    "\ufffb\031\ufffb\040\ufffb\041\ufffb\042\ufffb\045\ufffb\046\ufffb" +
    "\047\ufffb\050\ufffb\051\ufffb\052\ufffb\053\ufffb\054\ufffb\055" +
    "\ufffb\056\ufffb\062\ufffb\001\002\000\004\024\232\001\002" +
    "\000\042\002\uffed\031\uffed\040\uffed\041\uffed\042\uffed\045" +
    "\uffed\046\uffed\047\uffed\050\uffed\051\uffed\052\uffed\053\uffed" +
    "\054\uffed\055\uffed\056\uffed\062\uffed\001\002\000\004\024" +
    "\207\001\002\000\004\062\203\001\002\000\004\024\176" +
    "\001\002\000\004\004\175\001\002\000\004\004\uffda\001" +
    "\002\000\004\004\uffdc\001\002\000\004\024\171\001\002" +
    "\000\004\004\170\001\002\000\004\024\164\001\002\000" +
    "\004\024\156\001\002\000\004\004\uffdf\001\002\000\010" +
    "\007\153\022\152\023\154\001\002\000\004\004\uffd9\001" +
    "\002\000\004\024\125\001\002\000\004\004\uffdb\001\002" +
    "\000\042\002\uffeb\031\uffeb\040\uffeb\041\uffeb\042\uffeb\045" +
    "\uffeb\046\uffeb\047\uffeb\050\uffeb\051\uffeb\052\uffeb\053\uffeb" +
    "\054\uffeb\055\uffeb\056\uffeb\062\uffeb\001\002\000\004\004" +
    "\uffde\001\002\000\004\024\046\001\002\000\040\002\000" +
    "\040\023\041\016\042\037\045\005\046\022\047\032\050" +
    "\043\051\011\052\033\053\020\054\024\055\030\056\015" +
    "\062\035\001\002\000\042\002\uffff\031\uffff\040\uffff\041" +
    "\uffff\042\uffff\045\uffff\046\uffff\047\uffff\050\uffff\051\uffff" +
    "\052\uffff\053\uffff\054\uffff\055\uffff\056\uffff\062\uffff\001" +
    "\002\000\030\020\055\024\053\025\060\037\057\057\054" +
    "\060\056\061\062\062\052\063\051\064\061\065\050\001" +
    "\002\000\004\025\124\001\002\000\044\004\uffb7\006\uffb7" +
    "\010\uffb7\011\uffb7\012\uffb7\013\uffb7\014\uffb7\015\uffb7\016" +
    "\uffb7\017\uffb7\025\uffb7\032\uffb7\033\uffb7\034\uffb7\035\uffb7" +
    "\036\uffb7\037\uffb7\001\002\000\044\004\uffb6\006\uffb6\010" +
    "\uffb6\011\uffb6\012\uffb6\013\uffb6\014\uffb6\015\uffb6\016\uffb6" +
    "\017\uffb6\025\uffb6\032\uffb6\033\uffb6\034\uffb6\035\uffb6\036" +
    "\uffb6\037\uffb6\001\002\000\044\004\uffbb\006\uffbb\010\uffbb" +
    "\011\uffbb\012\uffbb\013\uffbb\014\uffbb\015\uffbb\016\uffbb\017" +
    "\uffbb\025\uffbb\032\uffbb\033\uffbb\034\uffbb\035\uffbb\036\uffbb" +
    "\037\uffbb\001\002\000\026\020\055\024\053\037\057\057" +
    "\054\060\056\061\062\062\052\063\051\064\061\065\050" +
    "\001\002\000\044\004\uffba\006\uffba\010\uffba\011\uffba\012" +
    "\uffba\013\uffba\014\uffba\015\uffba\016\uffba\017\uffba\025\uffba" +
    "\032\uffba\033\uffba\034\uffba\035\uffba\036\uffba\037\uffba\001" +
    "\002\000\026\020\055\024\053\037\057\057\054\060\056" +
    "\061\062\062\052\063\051\064\061\065\050\001\002\000" +
    "\044\004\uffb9\006\uffb9\010\uffb9\011\uffb9\012\uffb9\013\uffb9" +
    "\014\uffb9\015\uffb9\016\uffb9\017\uffb9\025\uffb9\032\uffb9\033" +
    "\uffb9\034\uffb9\035\uffb9\036\uffb9\037\uffb9\001\002\000\026" +
    "\020\055\024\053\037\057\057\054\060\056\061\062\062" +
    "\052\063\051\064\061\065\050\001\002\000\004\004\uffd5" +
    "\001\002\000\044\004\uffb8\006\uffb8\010\uffb8\011\uffb8\012" +
    "\uffb8\013\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8\025\uffb8" +
    "\032\uffb8\033\uffb8\034\uffb8\035\uffb8\036\uffb8\037\uffb8\001" +
    "\002\000\044\004\uffb5\006\uffb5\010\uffb5\011\uffb5\012\uffb5" +
    "\013\uffb5\014\uffb5\015\uffb5\016\uffb5\017\uffb5\025\uffb5\032" +
    "\uffb5\033\uffb5\034\uffb5\035\uffb5\036\uffb5\037\uffb5\001\002" +
    "\000\044\004\uffcd\006\uffcd\010\065\011\067\012\074\013" +
    "\070\014\100\015\075\016\071\017\073\025\uffcd\032\076" +
    "\033\066\034\077\035\101\036\064\037\072\001\002\000" +
    "\026\020\055\024\053\037\057\057\054\060\056\061\062" +
    "\062\052\063\051\064\061\065\050\001\002\000\026\020" +
    "\055\024\053\037\057\057\054\060\056\061\062\062\052" +
    "\063\051\064\061\065\050\001\002\000\026\020\055\024" +
    "\053\037\057\057\054\060\056\061\062\062\052\063\051" +
    "\064\061\065\050\001\002\000\026\020\055\024\053\037" +
    "\057\057\054\060\056\061\062\062\052\063\051\064\061" +
    "\065\050\001\002\000\026\020\055\024\053\037\057\057" +
    "\054\060\056\061\062\062\052\063\051\064\061\065\050" +
    "\001\002\000\026\020\055\024\053\037\057\057\054\060" +
    "\056\061\062\062\052\063\051\064\061\065\050\001\002" +
    "\000\026\020\055\024\053\037\057\057\054\060\056\061" +
    "\062\062\052\063\051\064\061\065\050\001\002\000\026" +
    "\020\055\024\053\037\057\057\054\060\056\061\062\062" +
    "\052\063\051\064\061\065\050\001\002\000\026\020\055" +
    "\024\053\037\057\057\054\060\056\061\062\062\052\063" +
    "\051\064\061\065\050\001\002\000\026\020\055\024\053" +
    "\037\057\057\054\060\056\061\062\062\052\063\051\064" +
    "\061\065\050\001\002\000\026\020\055\024\053\037\057" +
    "\057\054\060\056\061\062\062\052\063\051\064\061\065" +
    "\050\001\002\000\026\020\055\024\053\037\057\057\054" +
    "\060\056\061\062\062\052\063\051\064\061\065\050\001" +
    "\002\000\026\020\055\024\053\037\057\057\054\060\056" +
    "\061\062\062\052\063\051\064\061\065\050\001\002\000" +
    "\026\020\055\024\053\037\057\057\054\060\056\061\062" +
    "\062\052\063\051\064\061\065\050\001\002\000\044\004" +
    "\uffc8\006\uffc8\010\uffc8\011\uffc8\012\uffc8\013\uffc8\014\uffc8" +
    "\015\uffc8\016\uffc8\017\uffc8\025\uffc8\032\076\033\066\034" +
    "\077\035\uffc8\036\064\037\uffc8\001\002\000\044\004\uffc1" +
    "\006\uffc1\010\uffc1\011\uffc1\012\uffc1\013\uffc1\014\uffc1\015" +
    "\uffc1\016\uffc1\017\uffc1\025\uffc1\032\076\033\066\034\077" +
    "\035\101\036\064\037\072\001\002\000\044\004\uffc9\006" +
    "\uffc9\010\uffc9\011\uffc9\012\uffc9\013\uffc9\014\uffc9\015\uffc9" +
    "\016\uffc9\017\uffc9\025\uffc9\032\076\033\uffc9\034\uffc9\035" +
    "\uffc9\036\uffc9\037\uffc9\001\002\000\044\004\uffcb\006\uffcb" +
    "\010\uffcb\011\uffcb\012\uffcb\013\uffcb\014\uffcb\015\uffcb\016" +
    "\uffcb\017\uffcb\025\uffcb\032\076\033\uffcb\034\uffcb\035\uffcb" +
    "\036\uffcb\037\uffcb\001\002\000\044\004\uffc0\006\uffc0\010" +
    "\uffc0\011\uffc0\012\uffc0\013\uffc0\014\uffc0\015\uffc0\016\uffc0" +
    "\017\uffc0\025\uffc0\032\076\033\066\034\077\035\101\036" +
    "\064\037\072\001\002\000\044\004\uffc3\006\uffc3\010\uffc3" +
    "\011\uffc3\012\uffc3\013\uffc3\014\uffc3\015\uffc3\016\uffc3\017" +
    "\uffc3\025\uffc3\032\076\033\066\034\077\035\101\036\064" +
    "\037\072\001\002\000\044\004\uffbe\006\uffbe\010\065\011" +
    "\067\012\074\013\070\014\100\015\075\016\071\017\uffbe" +
    "\025\uffbe\032\076\033\066\034\077\035\101\036\064\037" +
    "\072\001\002\000\044\004\uffc7\006\uffc7\010\uffc7\011\uffc7" +
    "\012\uffc7\013\uffc7\014\uffc7\015\uffc7\016\uffc7\017\uffc7\025" +
    "\uffc7\032\076\033\066\034\077\035\uffc7\036\064\037\uffc7" +
    "\001\002\000\044\004\uffbf\006\uffbf\010\065\011\067\012" +
    "\074\013\070\014\100\015\075\016\uffbf\017\uffbf\025\uffbf" +
    "\032\076\033\066\034\077\035\101\036\064\037\072\001" +
    "\002\000\044\004\uffc2\006\uffc2\010\uffc2\011\uffc2\012\uffc2" +
    "\013\uffc2\014\uffc2\015\uffc2\016\uffc2\017\uffc2\025\uffc2\032" +
    "\076\033\066\034\077\035\101\036\064\037\072\001\002" +
    "\000\044\004\uffc4\006\uffc4\010\uffc4\011\uffc4\012\uffc4\013" +
    "\uffc4\014\uffc4\015\uffc4\016\uffc4\017\uffc4\025\uffc4\032\076" +
    "\033\066\034\077\035\101\036\064\037\072\001\002\000" +
    "\044\004\uffc6\006\uffc6\010\uffc6\011\uffc6\012\uffc6\013\uffc6" +
    "\014\uffc6\015\uffc6\016\uffc6\017\uffc6\025\uffc6\032\076\033" +
    "\uffc6\034\uffc6\035\uffc6\036\uffc6\037\uffc6\001\002\000\044" +
    "\004\uffc5\006\uffc5\010\uffc5\011\uffc5\012\uffc5\013\uffc5\014" +
    "\uffc5\015\uffc5\016\uffc5\017\uffc5\025\uffc5\032\076\033\066" +
    "\034\077\035\101\036\064\037\072\001\002\000\044\004" +
    "\uffca\006\uffca\010\uffca\011\uffca\012\uffca\013\uffca\014\uffca" +
    "\015\uffca\016\uffca\017\uffca\025\uffca\032\076\033\uffca\034" +
    "\uffca\035\uffca\036\uffca\037\uffca\001\002\000\044\004\uffcc" +
    "\006\uffcc\010\uffcc\011\uffcc\012\uffcc\013\uffcc\014\uffcc\015" +
    "\uffcc\016\uffcc\017\uffcc\025\uffcc\032\076\033\066\034\077" +
    "\035\uffcc\036\064\037\uffcc\001\002\000\044\004\uffbd\006" +
    "\uffbd\010\uffbd\011\uffbd\012\uffbd\013\uffbd\014\uffbd\015\uffbd" +
    "\016\uffbd\017\uffbd\025\uffbd\032\uffbd\033\uffbd\034\uffbd\035" +
    "\uffbd\036\uffbd\037\uffbd\001\002\000\040\010\065\011\067" +
    "\012\074\013\070\014\100\015\075\016\071\017\073\025" +
    "\123\032\076\033\066\034\077\035\101\036\064\037\072" +
    "\001\002\000\044\004\uffbc\006\uffbc\010\uffbc\011\uffbc\012" +
    "\uffbc\013\uffbc\014\uffbc\015\uffbc\016\uffbc\017\uffbc\025\uffbc" +
    "\032\uffbc\033\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc\001" +
    "\002\000\004\004\uffd6\001\002\000\026\020\055\024\053" +
    "\037\057\057\054\060\056\061\062\062\052\063\051\064" +
    "\061\065\050\001\002\000\004\025\127\001\002\000\004" +
    "\030\130\001\002\000\036\040\023\041\016\042\037\045" +
    "\005\046\022\047\032\050\043\051\011\052\033\053\020" +
    "\054\024\055\030\056\015\062\035\001\002\000\040\031" +
    "\132\040\023\041\016\042\037\045\005\046\022\047\032" +
    "\050\043\051\011\052\033\053\020\054\024\055\030\056" +
    "\015\062\035\001\002\000\046\002\uffe9\031\uffe9\040\uffe9" +
    "\041\uffe9\042\uffe9\043\136\044\135\045\uffe9\046\uffe9\047" +
    "\uffe9\050\uffe9\051\uffe9\052\uffe9\053\uffe9\054\uffe9\055\uffe9" +
    "\056\uffe9\062\uffe9\001\002\000\042\002\uffe7\031\uffe7\040" +
    "\uffe7\041\uffe7\042\uffe7\045\uffe7\046\uffe7\047\uffe7\050\uffe7" +
    "\051\uffe7\052\uffe7\053\uffe7\054\uffe7\055\uffe7\056\uffe7\062" +
    "\uffe7\001\002\000\042\002\uffe8\031\uffe8\040\uffe8\041\uffe8" +
    "\042\uffe8\045\uffe8\046\uffe8\047\uffe8\050\uffe8\051\uffe8\052" +
    "\uffe8\053\uffe8\054\uffe8\055\uffe8\056\uffe8\062\uffe8\001\002" +
    "\000\004\030\147\001\002\000\004\024\137\001\002\000" +
    "\026\020\055\024\053\037\057\057\054\060\056\061\062" +
    "\062\052\063\051\064\061\065\050\001\002\000\004\025" +
    "\141\001\002\000\004\030\142\001\002\000\036\040\023" +
    "\041\016\042\037\045\005\046\022\047\032\050\043\051" +
    "\011\052\033\053\020\054\024\055\030\056\015\062\035" +
    "\001\002\000\040\031\144\040\023\041\016\042\037\045" +
    "\005\046\022\047\032\050\043\051\011\052\033\053\020" +
    "\054\024\055\030\056\015\062\035\001\002\000\046\002" +
    "\uffe6\031\uffe6\040\uffe6\041\uffe6\042\uffe6\043\136\044\135" +
    "\045\uffe6\046\uffe6\047\uffe6\050\uffe6\051\uffe6\052\uffe6\053" +
    "\uffe6\054\uffe6\055\uffe6\056\uffe6\062\uffe6\001\002\000\042" +
    "\002\uffe4\031\uffe4\040\uffe4\041\uffe4\042\uffe4\045\uffe4\046" +
    "\uffe4\047\uffe4\050\uffe4\051\uffe4\052\uffe4\053\uffe4\054\uffe4" +
    "\055\uffe4\056\uffe4\062\uffe4\001\002\000\042\002\uffe5\031" +
    "\uffe5\040\uffe5\041\uffe5\042\uffe5\045\uffe5\046\uffe5\047\uffe5" +
    "\050\uffe5\051\uffe5\052\uffe5\053\uffe5\054\uffe5\055\uffe5\056" +
    "\uffe5\062\uffe5\001\002\000\036\040\023\041\016\042\037" +
    "\045\005\046\022\047\032\050\043\051\011\052\033\053" +
    "\020\054\024\055\030\056\015\062\035\001\002\000\040" +
    "\031\151\040\023\041\016\042\037\045\005\046\022\047" +
    "\032\050\043\051\011\052\033\053\020\054\024\055\030" +
    "\056\015\062\035\001\002\000\042\002\uffe3\031\uffe3\040" +
    "\uffe3\041\uffe3\042\uffe3\045\uffe3\046\uffe3\047\uffe3\050\uffe3" +
    "\051\uffe3\052\uffe3\053\uffe3\054\uffe3\055\uffe3\056\uffe3\062" +
    "\uffe3\001\002\000\006\004\ufff6\025\ufff6\001\002\000\026" +
    "\020\055\024\053\037\057\057\054\060\056\061\062\062" +
    "\052\063\051\064\061\065\050\001\002\000\006\004\ufff7" +
    "\025\ufff7\001\002\000\010\004\ufff0\006\ufff0\025\ufff0\001" +
    "\002\000\026\020\055\024\053\037\057\057\054\060\056" +
    "\061\062\062\052\063\051\064\061\065\050\001\002\000" +
    "\006\006\uffee\025\uffee\001\002\000\006\006\161\025\162" +
    "\001\002\000\026\020\055\024\053\037\057\057\054\060" +
    "\056\061\062\062\052\063\051\064\061\065\050\001\002" +
    "\000\004\004\uffd1\001\002\000\006\006\uffef\025\uffef\001" +
    "\002\000\030\020\055\024\053\025\166\037\057\057\054" +
    "\060\056\061\062\062\052\063\051\064\061\065\050\001" +
    "\002\000\004\025\167\001\002\000\004\004\uffd7\001\002" +
    "\000\004\004\uffd8\001\002\000\042\002\ufffd\031\ufffd\040" +
    "\ufffd\041\ufffd\042\ufffd\045\ufffd\046\ufffd\047\ufffd\050\ufffd" +
    "\051\ufffd\052\ufffd\053\ufffd\054\ufffd\055\ufffd\056\ufffd\062" +
    "\ufffd\001\002\000\030\020\055\024\053\025\173\037\057" +
    "\057\054\060\056\061\062\062\052\063\051\064\061\065" +
    "\050\001\002\000\004\025\174\001\002\000\004\004\uffd3" +
    "\001\002\000\004\004\uffd4\001\002\000\042\002\ufffc\031" +
    "\ufffc\040\ufffc\041\ufffc\042\ufffc\045\ufffc\046\ufffc\047\ufffc" +
    "\050\ufffc\051\ufffc\052\ufffc\053\ufffc\054\ufffc\055\ufffc\056" +
    "\ufffc\062\ufffc\001\002\000\026\020\055\024\053\037\057" +
    "\057\054\060\056\061\062\062\052\063\051\064\061\065" +
    "\050\001\002\000\006\006\161\025\200\001\002\000\004" +
    "\004\uffcf\001\002\000\006\004\ufff1\006\ufff1\001\002\000" +
    "\006\004\ufff5\006\204\001\002\000\010\004\ufff2\006\ufff2" +
    "\007\153\001\002\000\004\062\206\001\002\000\006\004" +
    "\ufff3\006\ufff3\001\002\000\010\004\ufff4\006\ufff4\007\153" +
    "\001\002\000\006\040\023\062\035\001\002\000\004\004" +
    "\222\001\002\000\004\004\212\001\002\000\026\020\055" +
    "\024\053\037\057\057\054\060\056\061\062\062\052\063" +
    "\051\064\061\065\050\001\002\000\004\004\214\001\002" +
    "\000\004\062\035\001\002\000\004\025\216\001\002\000" +
    "\004\030\217\001\002\000\036\040\023\041\016\042\037" +
    "\045\005\046\022\047\032\050\043\051\011\052\033\053" +
    "\020\054\024\055\030\056\015\062\035\001\002\000\040" +
    "\031\221\040\023\041\016\042\037\045\005\046\022\047" +
    "\032\050\043\051\011\052\033\053\020\054\024\055\030" +
    "\056\015\062\035\001\002\000\042\002\uffe0\031\uffe0\040" +
    "\uffe0\041\uffe0\042\uffe0\045\uffe0\046\uffe0\047\uffe0\050\uffe0" +
    "\051\uffe0\052\uffe0\053\uffe0\054\uffe0\055\uffe0\056\uffe0\062" +
    "\uffe0\001\002\000\026\020\055\024\053\037\057\057\054" +
    "\060\056\061\062\062\052\063\051\064\061\065\050\001" +
    "\002\000\004\004\224\001\002\000\004\062\035\001\002" +
    "\000\004\025\226\001\002\000\004\030\227\001\002\000" +
    "\036\040\023\041\016\042\037\045\005\046\022\047\032" +
    "\050\043\051\011\052\033\053\020\054\024\055\030\056" +
    "\015\062\035\001\002\000\040\031\231\040\023\041\016" +
    "\042\037\045\005\046\022\047\032\050\043\051\011\052" +
    "\033\053\020\054\024\055\030\056\015\062\035\001\002" +
    "\000\042\002\uffe1\031\uffe1\040\uffe1\041\uffe1\042\uffe1\045" +
    "\uffe1\046\uffe1\047\uffe1\050\uffe1\051\uffe1\052\uffe1\053\uffe1" +
    "\054\uffe1\055\uffe1\056\uffe1\062\uffe1\001\002\000\026\020" +
    "\055\024\053\037\057\057\054\060\056\061\062\062\052" +
    "\063\051\064\061\065\050\001\002\000\006\006\161\025" +
    "\234\001\002\000\004\004\uffd0\001\002\000\042\002\uffea" +
    "\031\uffea\040\uffea\041\uffea\042\uffea\045\uffea\046\uffea\047" +
    "\uffea\050\uffea\051\uffea\052\uffea\053\uffea\054\uffea\055\uffea" +
    "\056\uffea\062\uffea\001\002\000\026\020\055\024\053\037" +
    "\057\057\054\060\056\061\062\062\052\063\051\064\061" +
    "\065\050\001\002\000\006\006\161\025\240\001\002\000" +
    "\004\004\uffce\001\002\000\042\002\ufff9\031\ufff9\040\ufff9" +
    "\041\ufff9\042\ufff9\045\ufff9\046\ufff9\047\ufff9\050\ufff9\051" +
    "\ufff9\052\ufff9\053\ufff9\054\ufff9\055\ufff9\056\ufff9\062\ufff9" +
    "\001\002\000\004\002\001\001\002\000\026\020\055\024" +
    "\053\037\057\057\054\060\056\061\062\062\052\063\051" +
    "\064\061\065\050\001\002\000\006\006\161\025\245\001" +
    "\002\000\004\004\uffd2\001\002\000\026\020\055\024\053" +
    "\037\057\057\054\060\056\061\062\062\052\063\051\064" +
    "\061\065\050\001\002\000\004\025\250\001\002\000\004" +
    "\030\251\001\002\000\036\040\023\041\016\042\037\045" +
    "\005\046\022\047\032\050\043\051\011\052\033\053\020" +
    "\054\024\055\030\056\015\062\035\001\002\000\040\031" +
    "\253\040\023\041\016\042\037\045\005\046\022\047\032" +
    "\050\043\051\011\052\033\053\020\054\024\055\030\056" +
    "\015\062\035\001\002\000\042\002\uffe2\031\uffe2\040\uffe2" +
    "\041\uffe2\042\uffe2\045\uffe2\046\uffe2\047\uffe2\050\uffe2\051" +
    "\uffe2\052\uffe2\053\uffe2\054\uffe2\055\uffe2\056\uffe2\062\uffe2" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\251\000\050\002\011\003\043\004\006\005\024\006" +
    "\030\010\003\012\016\013\005\014\020\020\007\021\040" +
    "\022\013\023\033\024\041\025\012\026\026\027\037\030" +
    "\025\031\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\007\201\010\200\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\004\044\005\024" +
    "\006\030\010\003\012\016\013\005\014\020\020\007\021" +
    "\040\022\013\023\033\024\041\025\012\026\026\027\037" +
    "\030\025\031\035\001\001\000\002\001\001\000\006\032" +
    "\046\033\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\033\121\001" +
    "\001\000\002\001\001\000\004\033\120\001\001\000\002" +
    "\001\001\000\004\033\117\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\033\116\001\001\000\004\033\115\001\001\000\004\033" +
    "\114\001\001\000\004\033\113\001\001\000\004\033\112" +
    "\001\001\000\004\033\111\001\001\000\004\033\110\001" +
    "\001\000\004\033\107\001\001\000\004\033\106\001\001" +
    "\000\004\033\105\001\001\000\004\033\104\001\001\000" +
    "\004\033\103\001\001\000\004\033\102\001\001\000\004" +
    "\033\101\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\032\125\033\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\046\003\130\004\006\005\024" +
    "\006\030\010\003\012\016\013\005\014\020\020\007\021" +
    "\040\022\013\023\033\024\041\025\012\026\026\027\037" +
    "\030\025\031\035\001\001\000\044\004\044\005\024\006" +
    "\030\010\003\012\016\013\005\014\020\020\007\021\040" +
    "\022\013\023\033\024\041\025\012\026\026\027\037\030" +
    "\025\031\035\001\001\000\006\015\133\017\132\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\032\137\033\062\001\001\000\002" +
    "\001\001\000\002\001\001\000\046\003\142\004\006\005" +
    "\024\006\030\010\003\012\016\013\005\014\020\020\007" +
    "\021\040\022\013\023\033\024\041\025\012\026\026\027" +
    "\037\030\025\031\035\001\001\000\044\004\044\005\024" +
    "\006\030\010\003\012\016\013\005\014\020\020\007\021" +
    "\040\022\013\023\033\024\041\025\012\026\026\027\037" +
    "\030\025\031\035\001\001\000\006\015\145\017\144\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\003\147" +
    "\004\006\005\024\006\030\010\003\012\016\013\005\014" +
    "\020\020\007\021\040\022\013\023\033\024\041\025\012" +
    "\026\026\027\037\030\025\031\035\001\001\000\044\004" +
    "\044\005\024\006\030\010\003\012\016\013\005\014\020" +
    "\020\007\021\040\022\013\023\033\024\041\025\012\026" +
    "\026\027\037\030\025\031\035\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\032\154\033\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\011\157\032\156" +
    "\033\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\032\162\033\062\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\032\164\033\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\032\171\033\062\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\011\176\032\156\033\062\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\204\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\005\210\006\207\010\003\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\032\212\033" +
    "\062\001\001\000\002\001\001\000\006\005\214\010\003" +
    "\001\001\000\002\001\001\000\002\001\001\000\046\003" +
    "\217\004\006\005\024\006\030\010\003\012\016\013\005" +
    "\014\020\020\007\021\040\022\013\023\033\024\041\025" +
    "\012\026\026\027\037\030\025\031\035\001\001\000\044" +
    "\004\044\005\024\006\030\010\003\012\016\013\005\014" +
    "\020\020\007\021\040\022\013\023\033\024\041\025\012" +
    "\026\026\027\037\030\025\031\035\001\001\000\002\001" +
    "\001\000\006\032\222\033\062\001\001\000\002\001\001" +
    "\000\006\005\224\010\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\046\003\227\004\006\005\024\006\030" +
    "\010\003\012\016\013\005\014\020\020\007\021\040\022" +
    "\013\023\033\024\041\025\012\026\026\027\037\030\025" +
    "\031\035\001\001\000\044\004\044\005\024\006\030\010" +
    "\003\012\016\013\005\014\020\020\007\021\040\022\013" +
    "\023\033\024\041\025\012\026\026\027\037\030\025\031" +
    "\035\001\001\000\002\001\001\000\010\011\232\032\156" +
    "\033\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\011\236\032\156\033\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\011\243\032\156\033\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\032\246\033" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\046" +
    "\003\251\004\006\005\024\006\030\010\003\012\016\013" +
    "\005\014\020\020\007\021\040\022\013\023\033\024\041" +
    "\025\012\026\026\027\037\030\025\031\035\001\001\000" +
    "\044\004\044\005\024\006\030\010\003\012\016\013\005" +
    "\014\020\020\007\021\040\022\013\023\033\024\041\025" +
    "\012\026\026\027\037\030\025\031\035\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
    /* public AST ast; 
    public tablaDeSimbolos tablaSimbolos; */
    public elementoGlobal simbolo;
    public String nombreArchivo="";
    public nodoModelo raiz;
    public void iniciar(elementoGlobal simbolo, String nombreArchivo){
        this.simbolo=simbolo;
        this.nombreArchivo= nombreArchivo;
    }

    public void syntax_error(Symbol te){
        try{
            
            System.out.println("compiler has detected a syntax error at line:"+te.left+ "  columna:"+te.right+"token:"+te.value.toString());
    
        }catch(Exception p){

        }
        
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // E ::= valChar 
            {
              nodoModelo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                        itemAtributo atrib1=new itemAtributo("E", parser.nombreArchivo, 23); 
                        _E padre =new _E(atrib1, parser.simbolo);
                        
                            itemAtributo at1=new itemAtributo("valChar",d1, d1right, d1left,parser.nombreArchivo); 
                            padre.listaAtributos.insertar(at1);
                            //System.out.println("insertando en el nivel 22");
                        RESULT= padre;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // E ::= valEntero 
            {
              nodoModelo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                        itemAtributo atrib1=new itemAtributo("E", parser.nombreArchivo, 22); 
                        _E padre =new _E(atrib1, parser.simbolo);
                        
                            itemAtributo at1=new itemAtributo("valEntero",d1, d1right, d1left,parser.nombreArchivo); 
                            padre.listaAtributos.insertar(at1);
                            //System.out.println("insertando en el nivel 22");
                        RESULT= padre;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // E ::= valDecimal 
            {
              nodoModelo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                        itemAtributo atrib1=new itemAtributo("E", parser.nombreArchivo, 21); 
                        _E padre =new _E(atrib1, parser.simbolo);
                        
                            itemAtributo at1=new itemAtributo("valCadena",d1, d1right, d1left,parser.nombreArchivo); 
                            padre.listaAtributos.insertar(at1);

                        RESULT= padre;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // E ::= valCadena 
            {
              nodoModelo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                        itemAtributo atrib1=new itemAtributo("E", parser.nombreArchivo, 20); 
                        _E padre =new _E(atrib1, parser.simbolo);
                        
                            itemAtributo at1=new itemAtributo("valCadena",d1, d1right, d1left,parser.nombreArchivo); 
                            padre.listaAtributos.insertar(at1);

                        RESULT= padre;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // E ::= valFalse 
            {
              nodoModelo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                        itemAtributo atrib1=new itemAtributo("E", parser.nombreArchivo, 19); 
                        _E padre =new _E(atrib1, parser.simbolo);
                        
                            itemAtributo at1=new itemAtributo("valFalse",d1, d1right, d1left,parser.nombreArchivo); 
                            padre.listaAtributos.insertar(at1);

                        RESULT= padre;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // E ::= valTrue 
            {
              nodoModelo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                        itemAtributo atrib1=new itemAtributo("E", parser.nombreArchivo, 18); 
                        _E padre =new _E(atrib1, parser.simbolo);
                          
                            itemAtributo at1=new itemAtributo("valTrue",d1, d1right, d1left,parser.nombreArchivo); 
                            padre.listaAtributos.insertar(at1);

                        RESULT= padre;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // E ::= valId 
            {
              nodoModelo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        itemAtributo atrib1=new itemAtributo("E", parser.nombreArchivo, 17); 
                        _E padre =new _E(atrib1, parser.simbolo);
                        
                            itemAtributo at1=new itemAtributo("valId",d1, d1right, d1left,parser.nombreArchivo); 
                            padre.listaAtributos.insertar(at1);

                        RESULT= padre;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // E ::= sAbreParent E sCierraParent 
            {
              nodoModelo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String d1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                        itemAtributo atrib1=new itemAtributo("E", parser.nombreArchivo, 16); 
                        _E padre =new _E(atrib1, parser.simbolo);
                        
                            padre.listaHijos.insertar(h1,h1left, h1right);
                            
                            itemAtributo at1=new itemAtributo("sAbreParent",d1, d1right, d1left,parser.nombreArchivo); 
                            itemAtributo at2=new itemAtributo("sCierraParent",d2, d2right, d2left,parser.nombreArchivo); 

                            padre.listaAtributos.insertar(at1);
                            padre.listaAtributos.insertar(at2);

                        RESULT= padre;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // E ::= sNot E 
            {
              nodoModelo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String d1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                        itemAtributo atrib1=new itemAtributo("E", parser.nombreArchivo, 15); 
                        _E padre =new _E(atrib1, parser.simbolo);
                        
                            padre.listaHijos.insertar(h1,h1left, h1right);
                            
                            itemAtributo at1=new itemAtributo("sNot",d1, d1right, d1left,parser.nombreArchivo); 
                            padre.listaAtributos.insertar(at1);

                        RESULT= padre;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // E ::= E sOr E 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String d1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h2 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                        itemAtributo atrib1=new itemAtributo("E", parser.nombreArchivo, 14); 
                        _E padre =new _E(atrib1, parser.simbolo);
                        
                            padre.listaHijos.insertar(h1,h1left, h1right);
                            padre.listaHijos.insertar(h2,h2left, h2right);

                            itemAtributo at1=new itemAtributo("sOr",d1, d1right, d1left,parser.nombreArchivo); 
                            padre.listaAtributos.insertar(at1);

                        RESULT= padre;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // E ::= E sAnd E 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String d1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h2 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                        itemAtributo atrib1=new itemAtributo("E", parser.nombreArchivo, 13); 
                        _E padre =new _E(atrib1, parser.simbolo);
                        

                            padre.listaHijos.insertar(h1,h1left, h1right);
                            padre.listaHijos.insertar(h2,h2left, h2right);


                            itemAtributo at1=new itemAtributo("sAnd",d1, d1right, d1left,parser.nombreArchivo); 
                            padre.listaAtributos.insertar(at1);

                        RESULT= padre;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // E ::= E sMayorIgual E 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String d1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h2 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                        itemAtributo atrib1=new itemAtributo("E", parser.nombreArchivo, 12); 
                        _E padre =new _E(atrib1, parser.simbolo);
                        
                            padre.listaHijos.insertar(h1,h1left, h1right);
                            padre.listaHijos.insertar(h2,h2left, h2right);

                            itemAtributo at1=new itemAtributo("sMayorIgual",d1, d1right, d1left,parser.nombreArchivo); 
                            padre.listaAtributos.insertar(at1);

                        RESULT= padre;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // E ::= E sMayor E 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String d1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h2 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                        itemAtributo atrib1=new itemAtributo("E", parser.nombreArchivo, 11); 
                        _E padre =new _E(atrib1, parser.simbolo);
                        
                            padre.listaHijos.insertar(h1,h1left, h1right);
                            padre.listaHijos.insertar(h2,h2left, h2right);


                            itemAtributo at1=new itemAtributo("sMayor",d1, d1right, d1left,parser.nombreArchivo); 
                            padre.listaAtributos.insertar(at1);

                        RESULT= padre;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // E ::= E sMenorIgual E 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String d1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h2 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                        itemAtributo atrib1=new itemAtributo("E", parser.nombreArchivo, 10); 
                        _E padre =new _E(atrib1, parser.simbolo);
                        
                            padre.listaHijos.insertar(h1,h1left, h1right);
                            padre.listaHijos.insertar(h2,h2left, h2right);


                            itemAtributo at1=new itemAtributo("sMenorIgual",d1, d1right, d1left,parser.nombreArchivo); 
                            padre.listaAtributos.insertar(at1);

                        RESULT= padre;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // E ::= E sMenor E 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String d1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h2 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                        itemAtributo atrib1=new itemAtributo("E", parser.nombreArchivo, 9); 
                        _E padre =new _E(atrib1, parser.simbolo);
                        
                            padre.listaHijos.insertar(h1,h1left, h1right);
                            padre.listaHijos.insertar(h2,h2left, h2right);


                            itemAtributo at1=new itemAtributo("sMenor",d1, d1right, d1left,parser.nombreArchivo); 
                            padre.listaAtributos.insertar(at1);

                        RESULT= padre;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // E ::= E sDiferenciacion E 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String d1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h2 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                        itemAtributo atrib1=new itemAtributo("E", parser.nombreArchivo, 8); 
                        _E padre =new _E(atrib1, parser.simbolo);
                        

                            padre.listaHijos.insertar(h1,h1left, h1right);
                            padre.listaHijos.insertar(h2,h2left, h2right);

                            itemAtributo at1=new itemAtributo("sDiferenciacion",d1, d1right, d1left,parser.nombreArchivo); 
                            padre.listaAtributos.insertar(at1);


                        RESULT= padre;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // E ::= E sIgualacion E 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String d1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h2 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                        itemAtributo atrib1=new itemAtributo("E", parser.nombreArchivo, 7); 
                        _E padre =new _E(atrib1, parser.simbolo);
                        
                            padre.listaHijos.insertar(h1,h1left, h1right);
                            padre.listaHijos.insertar(h2,h2left, h2right);


                            itemAtributo at1=new itemAtributo("sIgualacion",d1, d1right, d1left,parser.nombreArchivo); 
                            padre.listaAtributos.insertar(at1);

                        RESULT= padre;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // E ::= E sModulo E 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String d1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h2 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                        itemAtributo atrib1=new itemAtributo("E", parser.nombreArchivo, 6); 
                        _E padre =new _E(atrib1, parser.simbolo);
                        
                            padre.listaHijos.insertar(h1,h1left, h1right);
                            padre.listaHijos.insertar(h2,h2left, h2right);


                            itemAtributo at1=new itemAtributo("sModulo",d1, d1right, d1left,parser.nombreArchivo); 
                            padre.listaAtributos.insertar(at1);

                        RESULT= padre;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // E ::= E sMenos E 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String d1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h2 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                        itemAtributo atrib1=new itemAtributo("E", parser.nombreArchivo, 5); 
                        _E padre =new _E(atrib1, parser.simbolo);
                        
                            padre.listaHijos.insertar(h1,h1left, h1right);
                            padre.listaHijos.insertar(h2,h2left, h2right);


                            itemAtributo at1=new itemAtributo("sMenos",d1, d1right, d1left,parser.nombreArchivo); 
                            padre.listaAtributos.insertar(at1);

                        RESULT= padre;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // E ::= E sMas E 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String d1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h2 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
 
                        itemAtributo atrib1=new itemAtributo("E", parser.nombreArchivo, 4); 
                        _E padre =new _E(atrib1, parser.simbolo);
                        
                            padre.listaHijos.insertar(h1,h1left, h1right);
                            padre.listaHijos.insertar(h2,h2left, h2right);


                            itemAtributo at1=new itemAtributo("sMas",d1, d1right, d1left,parser.nombreArchivo); 
                            padre.listaAtributos.insertar(at1);


                        RESULT= padre;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // E ::= E sPor E 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String d1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h2 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                        itemAtributo atrib1=new itemAtributo("E", parser.nombreArchivo, 3); 
                        _E padre =new _E(atrib1, parser.simbolo);
                        
                            padre.listaHijos.insertar(h1,h1left, h1right);
                            padre.listaHijos.insertar(h2,h2left, h2right);


                            itemAtributo at1=new itemAtributo("sPor",d1, d1right, d1left,parser.nombreArchivo); 
                            padre.listaAtributos.insertar(at1);

                        RESULT= padre;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // E ::= E sDiv E 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String d1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h2 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                        itemAtributo atrib1=new itemAtributo("E", parser.nombreArchivo, 2); 
                        _E padre =new _E(atrib1, parser.simbolo);
                        
                            padre.listaHijos.insertar(h1,h1left, h1right);
                            padre.listaHijos.insertar(h2,h2left, h2right);


                            itemAtributo at1=new itemAtributo("sDiv",d1, d1right, d1left,parser.nombreArchivo); 
                            padre.listaAtributos.insertar(at1);

                        RESULT= padre;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // E ::= E sPot E 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String d1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h2 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                        itemAtributo atrib1=new itemAtributo("E", parser.nombreArchivo, 1); 
                        _E padre =new _E(atrib1, parser.simbolo);
                        
                            padre.listaHijos.insertar(h1,h1left, h1right);
                            padre.listaHijos.insertar(h2,h2left, h2right);


                            itemAtributo at1=new itemAtributo("sPot",d1, d1right, d1left,parser.nombreArchivo); 
                            padre.listaAtributos.insertar(at1);

                        RESULT= padre;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // E ::= sMenos E 
            {
              nodoModelo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String d1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                        itemAtributo atrib1=new itemAtributo("E", parser.nombreArchivo, 0); 
                        _E padre =new _E(atrib1, parser.simbolo);
                        
                            padre.listaHijos.insertar(h1,h1left, h1right);


                            itemAtributo at1=new itemAtributo("sMenos",d1, d1right, d1left,parser.nombreArchivo); 
                            padre.listaAtributos.insertar(at1);

                        RESULT= padre;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // VALOR ::= E 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                        itemAtributo atrib1=new itemAtributo("VALOR", parser.nombreArchivo, 0); 
                        _VALOR padre =new _VALOR(atrib1 , parser.simbolo);
                        
                            padre.listaHijos.insertar(h1,h1left, h1right); 

                        RESULT= padre;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // LINE ::= tLine sAbreParent LST_VALOR sCierraParent 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		

                        itemAtributo atrib1=new itemAtributo("LINE", parser.nombreArchivo, 0); 
                        _LINE padre =new _LINE(atrib1 , parser.simbolo);
                        
                            padre.listaHijos.insertar(h1,h1left, h1right);

                        RESULT= padre;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LINE",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // STRING ::= tString sAbreParent LST_VALOR sCierraParent 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		

                        itemAtributo atrib1=new itemAtributo("STRING", parser.nombreArchivo, 0); 
                        _STRING padre =new _STRING(atrib1 , parser.simbolo);
                        
                            padre.listaHijos.insertar(h1,h1left, h1right);

                        RESULT= padre;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STRING",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OVAL ::= tOval sAbreParent LST_VALOR sCierraParent 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		

                        itemAtributo atrib1=new itemAtributo("OVAL", parser.nombreArchivo, 0); 
                        _OVAL padre =new _OVAL(atrib1 , parser.simbolo);
                        
                            padre.listaHijos.insertar(h1,h1left, h1right);

                        RESULT= padre;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OVAL",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // QUADRATE ::= tQuadrate sAbreParent LST_VALOR sCierraParent 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		

                        itemAtributo atrib1=new itemAtributo("QUADRATE", parser.nombreArchivo, 0); 
                        _QUADRATE padre =new _QUADRATE(atrib1 , parser.simbolo);
                        
                            padre.listaHijos.insertar(h1,h1left, h1right);

                        RESULT= padre;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("QUADRATE",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // POINT ::= tPoint sAbreParent LST_VALOR sCierraParent 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		

                        itemAtributo atrib1=new itemAtributo("POINT", parser.nombreArchivo, 0); 
                        _POINT padre =new _POINT(atrib1 , parser.simbolo);
                        
                            padre.listaHijos.insertar(h1,h1left, h1right);

                        RESULT= padre;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POINT",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // RUNMULTDASM ::= tRunDasm sAbreParent sCierraParent 
            {
              nodoModelo RESULT =null;
		

                        itemAtributo atrib1=new itemAtributo("RUNMULTDASM", parser.nombreArchivo, 3); 
                        _RUNMULTDASM padre =new _RUNMULTDASM(atrib1 , parser.simbolo);
                        

                        RESULT= padre;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RUNMULTDASM",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // RUNMULTDASM ::= tRunDasm sAbreParent VALOR sCierraParent 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		

                        itemAtributo atrib1=new itemAtributo("RUNMULTDASM", parser.nombreArchivo, 2); 
                        _RUNMULTDASM padre =new _RUNMULTDASM(atrib1 , parser.simbolo);
                        
                            padre.listaHijos.insertar(h1,h1left, h1right);

                        RESULT= padre;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RUNMULTDASM",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // RUNMULTDASM ::= tRunMultDasm sAbreParent sCierraParent 
            {
              nodoModelo RESULT =null;
		

                        itemAtributo atrib1=new itemAtributo("RUNMULTDASM", parser.nombreArchivo, 1); 
                        _RUNMULTDASM padre =new _RUNMULTDASM(atrib1 , parser.simbolo);
                        

                        RESULT= padre;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RUNMULTDASM",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // RUNMULTDASM ::= tRunMultDasm sAbreParent VALOR sCierraParent 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		

                        itemAtributo atrib1=new itemAtributo("RUNMULTDASM", parser.nombreArchivo, 0); 
                        _RUNMULTDASM padre =new _RUNMULTDASM(atrib1 , parser.simbolo);
                        
                            padre.listaHijos.insertar(h1,h1left, h1right);

                        RESULT= padre;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RUNMULTDASM",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // PRINT ::= tPrint sAbreParent sCierraParent 
            {
              nodoModelo RESULT =null;
		

                        itemAtributo atrib1=new itemAtributo("PRINT", parser.nombreArchivo, 1); 
                        _PRINT padre =new _PRINT(atrib1 , parser.simbolo);
                        

                        RESULT= padre;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINT",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // PRINT ::= tPrint sAbreParent VALOR sCierraParent 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		

                        itemAtributo atrib1=new itemAtributo("PRINT", parser.nombreArchivo, 0); 
                        _PRINT padre =new _PRINT(atrib1 , parser.simbolo);
                        
                            padre.listaHijos.insertar(h1,h1left, h1right);

                        RESULT= padre;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRINT",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // FUNCIONES_NATIVAS ::= LINE 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                        itemAtributo atrib1=new itemAtributo("FUNCIONES_NATIVAS", parser.nombreArchivo, 6); 
                        _FUNCIONES_NATIVAS padre =new _FUNCIONES_NATIVAS(atrib1 , parser.simbolo);
                        
                            padre.listaHijos.insertar(h1,h1left, h1right);

                        RESULT= padre;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES_NATIVAS",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FUNCIONES_NATIVAS ::= STRING 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                        itemAtributo atrib1=new itemAtributo("FUNCIONES_NATIVAS", parser.nombreArchivo, 5); 
                        _FUNCIONES_NATIVAS padre =new _FUNCIONES_NATIVAS(atrib1 , parser.simbolo);
                        
                            padre.listaHijos.insertar(h1,h1left, h1right);

                        RESULT= padre;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES_NATIVAS",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // FUNCIONES_NATIVAS ::= OVAL 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                        itemAtributo atrib1=new itemAtributo("FUNCIONES_NATIVAS", parser.nombreArchivo, 4); 
                        _FUNCIONES_NATIVAS padre =new _FUNCIONES_NATIVAS(atrib1 , parser.simbolo);
                        
                            padre.listaHijos.insertar(h1,h1left, h1right);

                        RESULT= padre;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES_NATIVAS",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // FUNCIONES_NATIVAS ::= QUADRATE 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                        itemAtributo atrib1=new itemAtributo("FUNCIONES_NATIVAS", parser.nombreArchivo, 3); 
                        _FUNCIONES_NATIVAS padre =new _FUNCIONES_NATIVAS(atrib1 , parser.simbolo);
                        
                            padre.listaHijos.insertar(h1,h1left, h1right);

                        RESULT= padre;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES_NATIVAS",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // FUNCIONES_NATIVAS ::= POINT 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                        itemAtributo atrib1=new itemAtributo("FUNCIONES_NATIVAS", parser.nombreArchivo, 2); 
                        _FUNCIONES_NATIVAS padre =new _FUNCIONES_NATIVAS(atrib1 , parser.simbolo);
                        
                            padre.listaHijos.insertar(h1,h1left, h1right);

                        RESULT= padre;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES_NATIVAS",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // FUNCIONES_NATIVAS ::= RUNMULTDASM 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                        itemAtributo atrib1=new itemAtributo("FUNCIONES_NATIVAS", parser.nombreArchivo, 1); 
                        _FUNCIONES_NATIVAS padre =new _FUNCIONES_NATIVAS(atrib1 , parser.simbolo);
                        
                            padre.listaHijos.insertar(h1,h1left, h1right);

                        RESULT= padre;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES_NATIVAS",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // FUNCIONES_NATIVAS ::= PRINT 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                        itemAtributo atrib1=new itemAtributo("FUNCIONES_NATIVAS", parser.nombreArchivo, 0); 
                        _FUNCIONES_NATIVAS padre =new _FUNCIONES_NATIVAS(atrib1 , parser.simbolo);

                            padre.listaHijos.insertar(h1,h1left, h1right);                        

                        RESULT= padre;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCIONES_NATIVAS",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FOR ::= tFor sAbreParent ASIGNAR_VAL sPuntoComa VALOR sPuntoComa ASIGNAR_VAL sCierraParent sAbreLlaves LST_CUERPO sCierraLlaves 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		nodoModelo h2 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		nodoModelo h3 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int h4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodoModelo h4 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		

                        itemAtributo atrib1=new itemAtributo("FOR", parser.nombreArchivo, 1); 
                        _FOR padre =new _FOR(atrib1 , parser.simbolo);
                        
                            padre.listaHijos.insertar(h1,h1left, h1right);
                            padre.listaHijos.insertar(h2,h2left, h2right);
                            padre.listaHijos.insertar(h3,h3left, h3right);
                            padre.listaHijos.insertar(h4,h4left, h4right);     

                        RESULT= padre;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FOR ::= tFor sAbreParent DECLARAR_VAR sPuntoComa VALOR sPuntoComa ASIGNAR_VAL sCierraParent sAbreLlaves LST_CUERPO sCierraLlaves 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		nodoModelo h2 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		nodoModelo h3 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int h4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodoModelo h4 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		

                        itemAtributo atrib1=new itemAtributo("FOR", parser.nombreArchivo, 0); 
                        _FOR padre =new _FOR(atrib1 , parser.simbolo);

                            padre.listaHijos.insertar(h1,h1left, h1right);
                            padre.listaHijos.insertar(h2,h2left, h2right);
                            padre.listaHijos.insertar(h3,h3left, h3right);
                            padre.listaHijos.insertar(h4,h4left, h4right);        

                        RESULT= padre;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FOR",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // WHILE ::= tWhile sAbreParent VALOR sCierraParent sAbreLlaves LST_CUERPO sCierraLlaves 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodoModelo h2 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		

                        itemAtributo atrib1=new itemAtributo("WHILE", parser.nombreArchivo, 0); 
                        _WHILE padre =new _WHILE(atrib1 , parser.simbolo);
                        
                            padre.listaHijos.insertar(h1,h1left, h1right);
                            padre.listaHijos.insertar(h2,h2left, h2right);

                        RESULT= padre;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WHILE",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // IF_NOT ::= tIf2 sAbreLlaves LST_CUERPO sCierraLlaves 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		

                        itemAtributo atrib1=new itemAtributo("IF_NOT", parser.nombreArchivo, 0); 
                        _IF_NOT padre =new _IF_NOT(atrib1 , parser.simbolo);
                        
                            padre.listaHijos.insertar(h1,h1left, h1right);

                        RESULT= padre;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF_NOT",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ELIF ::= tElif sAbreParent VALOR sCierraParent sAbreLlaves LST_CUERPO sCierraLlaves IF_NOT 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodoModelo h2 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h3 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                        itemAtributo atrib1=new itemAtributo("ELIF", parser.nombreArchivo, 2); 
                        _ELIF padre =new _ELIF(atrib1 , parser.simbolo);
                        
                            padre.listaHijos.insertar(h1,h1left, h1right);
                            padre.listaHijos.insertar(h2,h2left, h2right);
                            padre.listaHijos.insertar(h3,h3left, h3right);

                        RESULT= padre;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELIF",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ELIF ::= tElif sAbreParent VALOR sCierraParent sAbreLlaves LST_CUERPO sCierraLlaves ELIF 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodoModelo h2 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h3 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                        itemAtributo atrib1=new itemAtributo("ELIF", parser.nombreArchivo, 1); 
                        _ELIF padre =new _ELIF(atrib1 , parser.simbolo);
                        

                            padre.listaHijos.insertar(h1,h1left, h1right);
                            padre.listaHijos.insertar(h2,h2left, h2right);
                            padre.listaHijos.insertar(h3,h3left, h3right);

                        RESULT= padre;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELIF",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ELIF ::= tElif sAbreParent VALOR sCierraParent sAbreLlaves LST_CUERPO sCierraLlaves 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodoModelo h2 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		

                        itemAtributo atrib1=new itemAtributo("ELIF", parser.nombreArchivo, 0); 
                        _ELIF padre =new _ELIF(atrib1 , parser.simbolo);
                        
                            padre.listaHijos.insertar(h1,h1left, h1right);
                            padre.listaHijos.insertar(h2,h2left, h2right);

                        RESULT= padre;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELIF",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // IF ::= tIf sAbreParent VALOR sCierraParent sAbreLlaves LST_CUERPO sCierraLlaves IF_NOT 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodoModelo h2 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h3 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                        itemAtributo atrib1=new itemAtributo("IF", parser.nombreArchivo, 2); 
                        _IF padre =new _IF(atrib1 , parser.simbolo);
                        
                            padre.listaHijos.insertar(h1,h1left, h1right);
                            padre.listaHijos.insertar(h2,h2left, h2right);
                            padre.listaHijos.insertar(h3,h3left, h3right);

                        RESULT= padre;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // IF ::= tIf sAbreParent VALOR sCierraParent sAbreLlaves LST_CUERPO sCierraLlaves ELIF 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodoModelo h2 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h3 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                        itemAtributo atrib1=new itemAtributo("IF", parser.nombreArchivo, 1); 
                        _IF padre =new _IF(atrib1 , parser.simbolo);
                        
                            padre.listaHijos.insertar(h1,h1left, h1right);
                            padre.listaHijos.insertar(h2,h2left, h2right);
                            padre.listaHijos.insertar(h3,h3left, h3right);

                        RESULT= padre;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // IF ::= tIf sAbreParent VALOR sCierraParent sAbreLlaves LST_CUERPO sCierraLlaves 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodoModelo h2 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		

                        itemAtributo atrib1=new itemAtributo("IF", parser.nombreArchivo, 0); 
                        _IF padre =new _IF(atrib1 , parser.simbolo);
                            padre.listaHijos.insertar(h1,h1left, h1right);
                            padre.listaHijos.insertar(h2,h2left, h2right);



                        RESULT= padre;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ROMPER ::= tSmash sPuntoComa 
            {
              nodoModelo RESULT =null;
		

                        itemAtributo atrib1=new itemAtributo("ROMPER", parser.nombreArchivo, 0); 
                        _ROMPER padre =new _ROMPER(atrib1 , parser.simbolo);
                        

                        RESULT= padre;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ROMPER",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIAS ::= FOR 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                        itemAtributo atrib1=new itemAtributo("SENTENCIAS", parser.nombreArchivo, 2); 
                        _SENTENCIAS padre =new _SENTENCIAS(atrib1 , parser.simbolo);
                            padre.listaHijos.insertar(h1,h1left, h1right);

                        RESULT= padre;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIAS ::= WHILE 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                        itemAtributo atrib1=new itemAtributo("SENTENCIAS", parser.nombreArchivo, 1); 
                        _SENTENCIAS padre =new _SENTENCIAS(atrib1 , parser.simbolo);
                            padre.listaHijos.insertar(h1,h1left, h1right);

                        RESULT= padre;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIAS ::= IF 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                        itemAtributo atrib1=new itemAtributo("SENTENCIAS", parser.nombreArchivo, 0); 
                        _SENTENCIAS padre =new _SENTENCIAS(atrib1 , parser.simbolo);
                            padre.listaHijos.insertar(h1,h1left, h1right); 

                        RESULT= padre;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LST_VALOR ::= VALOR 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                        itemAtributo atrib1=new itemAtributo("LST_VALOR", parser.nombreArchivo, 1); 
                        _LST_VALOR padre =new _LST_VALOR(atrib1 , parser.simbolo);
                            padre.listaHijos.insertar(h1,h1left, h1right);

                        RESULT= padre;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LST_VALOR",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LST_VALOR ::= LST_VALOR sComa VALOR 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h2 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                        itemAtributo atrib1=new itemAtributo("LST_VALOR", parser.nombreArchivo, 0); 
                        _LST_VALOR padre =new _LST_VALOR(atrib1 , parser.simbolo);
                            padre.listaHijos.insertar(h1,h1left, h1right);
                            padre.listaHijos.insertar(h2,h2left, h2right);

                        RESULT= padre;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LST_VALOR",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ASGIN_VAR ::= valId sIgual VALOR 
            {
              nodoModelo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String d1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                        itemAtributo atrib1=new itemAtributo("ASGIN_VAR", parser.nombreArchivo, 0); 
                        _ASGIN_VAR padre =new _ASGIN_VAR(atrib1 , parser.simbolo);
                            padre.listaHijos.insertar(h1,h1left, h1right);
                            
                            itemAtributo at1=new itemAtributo("valId",d1, d1right, d1left,parser.nombreArchivo); 
                            padre.listaAtributos.insertar(at1);  

                        RESULT= padre;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASGIN_VAR",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // LST_DECLARAR_VAR ::= ASGIN_VAR 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                        itemAtributo atrib1=new itemAtributo("LST_DECLARAR_VAR", parser.nombreArchivo, 3); 
                        _LST_DECLARAR_VAR padre =new _LST_DECLARAR_VAR(atrib1 , parser.simbolo);
                            
                            padre.listaHijos.insertar(h1,h1left, h1right);

                        RESULT= padre;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LST_DECLARAR_VAR",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // LST_DECLARAR_VAR ::= valId 
            {
              nodoModelo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                        itemAtributo atrib1=new itemAtributo("LST_DECLARAR_VAR", parser.nombreArchivo, 2); 
                        _LST_DECLARAR_VAR padre =new _LST_DECLARAR_VAR(atrib1 , parser.simbolo);

                           
                        itemAtributo at1=new itemAtributo("valId",d1, d1right, d1left,parser.nombreArchivo); 
                        padre.listaAtributos.insertar(at1);                 

                        RESULT= padre;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LST_DECLARAR_VAR",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // LST_DECLARAR_VAR ::= LST_DECLARAR_VAR sComa ASGIN_VAR 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h2 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                        itemAtributo atrib1=new itemAtributo("LST_DECLARAR_VAR", parser.nombreArchivo, 1); 
                        _LST_DECLARAR_VAR padre =new _LST_DECLARAR_VAR(atrib1 , parser.simbolo);
                            
                            padre.listaHijos.insertar(h1,h1left, h1right);
                            padre.listaHijos.insertar(h2,h2left, h2right);

                        RESULT= padre;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LST_DECLARAR_VAR",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LST_DECLARAR_VAR ::= LST_DECLARAR_VAR sComa valId 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                        itemAtributo atrib1=new itemAtributo("LST_DECLARAR_VAR", parser.nombreArchivo, 0); 
                        _LST_DECLARAR_VAR padre =new _LST_DECLARAR_VAR(atrib1 , parser.simbolo);

                            padre.listaHijos.insertar(h1,h1left, h1right);

                            itemAtributo at1=new itemAtributo("valId",d1, d1right, d1left,parser.nombreArchivo); 
                            padre.listaAtributos.insertar(at1);  

                        RESULT= padre;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LST_DECLARAR_VAR",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DECLARAR_VAR ::= tVar LST_DECLARAR_VAR 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                        itemAtributo atrib1=new itemAtributo("DECLARAR_VAR", parser.nombreArchivo, 0); 
                        _DECLARAR_VAR padre =new _DECLARAR_VAR(atrib1 , parser.simbolo);

                            padre.listaHijos.insertar(h1,h1left, h1right);

                        RESULT= padre;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARAR_VAR",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ASIGNAR_VAL ::= valId sDobleMenos 
            {
              nodoModelo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String d1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		

                        itemAtributo atrib1=new itemAtributo("ASIGNAR_VAL", parser.nombreArchivo, 2); 
                        _ASIGNAR_VAL padre =new _ASIGNAR_VAL(atrib1 , parser.simbolo);
                        
                            itemAtributo at1=new itemAtributo("valId",d1, d1right, d1left,parser.nombreArchivo); 
                            padre.listaAtributos.insertar(at1);

                        RESULT= padre;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNAR_VAL",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ASIGNAR_VAL ::= valId sDobleMas 
            {
              nodoModelo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String d1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		

                        itemAtributo atrib1=new itemAtributo("ASIGNAR_VAL", parser.nombreArchivo, 1); 
                        _ASIGNAR_VAL padre =new _ASIGNAR_VAL(atrib1 , parser.simbolo);
                        
                            itemAtributo at1=new itemAtributo("valId",d1, d1right, d1left,parser.nombreArchivo); 
                            padre.listaAtributos.insertar(at1);


                        RESULT= padre;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNAR_VAL",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ASIGNAR_VAL ::= ASGIN_VAR 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                        itemAtributo atrib1=new itemAtributo("ASIGNAR_VAL", parser.nombreArchivo, 0); 
                        _ASIGNAR_VAL padre =new _ASIGNAR_VAL(atrib1 , parser.simbolo);
                        
                            padre.listaHijos.insertar(h1,h1left, h1right);
                            

                        RESULT= padre;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNAR_VAL",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CUERPO ::= FUNCIONES_NATIVAS sPuntoComa 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		

                        itemAtributo atrib1=new itemAtributo("CUERPO", parser.nombreArchivo, 4); 
                        _CUERPO padre =new _CUERPO(atrib1 , parser.simbolo);
                            padre.listaHijos.insertar(h1,h1left, h1right);

                        RESULT= padre;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CUERPO ::= ROMPER 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                        itemAtributo atrib1=new itemAtributo("CUERPO", parser.nombreArchivo, 3); 
                        _CUERPO padre =new _CUERPO(atrib1 , parser.simbolo);
                            padre.listaHijos.insertar(h1,h1left, h1right);

                        RESULT= padre;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CUERPO ::= SENTENCIAS 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                        itemAtributo atrib1=new itemAtributo("CUERPO", parser.nombreArchivo, 2); 
                        _CUERPO padre =new _CUERPO(atrib1 , parser.simbolo);
                            padre.listaHijos.insertar(h1,h1left, h1right);

                        RESULT= padre;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CUERPO ::= ASIGNAR_VAL sPuntoComa 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        itemAtributo atrib1=new itemAtributo("CUERPO", parser.nombreArchivo, 1); 
                        _CUERPO padre =new _CUERPO(atrib1 , parser.simbolo);;
                            padre.listaHijos.insertar(h1,h1left, h1right);

                        RESULT= padre;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CUERPO ::= DECLARAR_VAR sPuntoComa 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        itemAtributo atrib1=new itemAtributo("CUERPO", parser.nombreArchivo, 0); 
                        _CUERPO padre =new _CUERPO(atrib1 , parser.simbolo);
                            padre.listaHijos.insertar(h1,h1left, h1right);

                        RESULT= padre;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LST_CUERPO ::= CUERPO 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        itemAtributo atrib1=new itemAtributo("LST_CUERPO", parser.nombreArchivo, 1); 
                        _LST_CUERPO padre =new _LST_CUERPO(atrib1 , parser.simbolo);
                        
                            padre.listaHijos.insertar(h1,h1left, h1right);
                        RESULT= padre;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LST_CUERPO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // LST_CUERPO ::= LST_CUERPO CUERPO 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h2 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            itemAtributo atrib1=new itemAtributo("LST_CUERPO", parser.nombreArchivo, 0); 
                            _LST_CUERPO padre =new _LST_CUERPO(atrib1 , parser.simbolo);
                            
                                padre.listaHijos.insertar(h1,h1left, h1right);
                                padre.listaHijos.insertar(h2,h2left, h2right);

                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LST_CUERPO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= LST_CUERPO 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            itemAtributo atrib1=new itemAtributo("S", parser.nombreArchivo, 0); 
                            _S padre =new _S(atrib1 , parser.simbolo);
                            
                                padre.listaHijos.insertar(h1,h1left, h1right); 
                            parser.raiz=padre;
                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodoModelo start_val = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

