package Dasm.Gramatica.Sintactico;

/* import Analizadores.elementoTablaSimbolos;
import Analizadores.tablaDeSimbolos;
import Analizadores.AST;
import Analizadores.nodo;
import Analizadores.listaValores; */



import java.util.List;
import java_cup.runtime.*;
import java.util.ArrayList;


import Gui.Elementos.elementoGlobal;
import Gui.Items.itemAtributo;

import Dasm.Nodos.Inicio.*;
import Dasm.Nodos.*;

 




//var: var++*34


parser code {: 
    /* public AST ast; 
    public tablaDeSimbolos tablaSimbolos; */
    public elementoGlobal simbolo;
    public String nombreArchivo="";
    public nodoModelo raiz;
    public void iniciar(elementoGlobal simbolo, String nombreArchivo){
        this.simbolo=simbolo;
        this.nombreArchivo= nombreArchivo;
    }

    public void syntax_error(Symbol te){
        try{
            
            //System.out.println("compiler has detected a syntax error at line:"+te.left+ "  columna:"+te.right+"token:"+te.value.toString());
            simbolo.tablaErrores.insertErrorSyntax(nombreArchivo,te.left, te.right, "No se esperaba token : "+te.value.toString());
        }catch(Exception p){
            System.out.println("[Sintactico.cup][syntax_error][ERROR]"+p.getMessage());
        }
        
    }
:};


/*
+------------------------------------------------+
|   Definición de terminales
+------------------------------------------------+
*/


 


terminal String tAdd ,
                tDiff,
                tMult,
                tDiv,
                tMod,
                tPot,
                tLt,
                tGt,
                tLte,
                tGte,
                tNot,
                tAnd,
                tOr,
                tBr,
                tBrIf,
                tGet_local,
                tGet_global,
                tSet_local,
                tSet_global,
                tCall, 
                tEqz,
                tFuncion, 
                tEnd,
                tPrint
                ;


terminal  String valId, valEntero , valDecimal,valCadena;


/*
+------------------------------------------------+
|     Definición de No terminales
+------------------------------------------------+
*/

non terminal  nodoModelo          
        S,
        LST_CUERPO,
        CUERPO,
        LST_INSTRUCCIONES,
        INSTRUCCION,
        FUNCION ,
        E
        ;
        
 
/*
+------------------------------------------------+
|   Producciones
+------------------------------------------------+
*/
start with S;


/*
|-------------------------------------------------------------------------------------------------------------------
| INICIO
|-------------------------------------------------------------------------------------------------------------------
*/
 
S               ::= LST_CUERPO :h1
                        {:
                            itemAtributo atrib1=new itemAtributo("S", parser.nombreArchivo, 0); 
                            _S padre =new _S(atrib1 , parser.simbolo);
                            
                                padre.listaHijos.insertar(h1,h1left, h1right); 
                            parser.raiz=padre;
                            RESULT= padre;
                        :}
                    ; 

 


LST_CUERPO          ::=LST_CUERPO:h1 CUERPO :h2
                        {:
                            itemAtributo atrib1=new itemAtributo("LST_CUERPO", parser.nombreArchivo, 0); 
                            _LST_CUERPO padre =new _LST_CUERPO(atrib1 , parser.simbolo);
                            
                                padre.listaHijos.insertar(h1,h1left, h1right);  
                                padre.listaHijos.insertar(h2,h2left, h2right); 
 
                            RESULT= padre;
                        :}
                    |  CUERPO :h1
                        {:
                            itemAtributo atrib1=new itemAtributo("LST_CUERPO", parser.nombreArchivo, 1); 
                            _LST_CUERPO padre =new _LST_CUERPO(atrib1 , parser.simbolo);
                            
                                padre.listaHijos.insertar(h1,h1left, h1right);   
 
                            RESULT= padre;
                        :}
                    ;

CUERPO              ::=INSTRUCCION:h1
                        {:
                            itemAtributo atrib1=new itemAtributo("CUERPO", parser.nombreArchivo, 0); 
                            _CUERPO padre =new _CUERPO(atrib1 , parser.simbolo);
                            
                                padre.listaHijos.insertar(h1,h1left, h1right);   
 
                            RESULT= padre;
                        :}
                    |  FUNCION:h1
                        {:
                            itemAtributo atrib1=new itemAtributo("CUERPO", parser.nombreArchivo, 1); 
                            _CUERPO padre =new _CUERPO(atrib1 , parser.simbolo);
                            
                                padre.listaHijos.insertar(h1,h1left, h1right);   
 
                            RESULT= padre;
                        :}
                    ;
 
LST_INSTRUCCIONES   ::= LST_INSTRUCCIONES:h1 INSTRUCCION:h2
                        {:
                            itemAtributo atrib1=new itemAtributo("LST_INSTRUCCIONES", parser.nombreArchivo, 0); 
                            _LST_INSTRUCCIONES padre =new _LST_INSTRUCCIONES(atrib1 , parser.simbolo);
                            
                                padre.listaHijos.insertar(h1,h1left, h1right);  
                                padre.listaHijos.insertar(h2,h2left, h2right); 
 
                            RESULT= padre;
                        :}
                    |   INSTRUCCION:h1
                        {:
                            itemAtributo atrib1=new itemAtributo("LST_INSTRUCCIONES", parser.nombreArchivo, 1); 
                            _LST_INSTRUCCIONES padre =new _LST_INSTRUCCIONES(atrib1 , parser.simbolo);
                            
                                padre.listaHijos.insertar(h1,h1left, h1right);   
 
                            RESULT= padre;
                        :}
                    ;  

INSTRUCCION         ::=    valId
                        {:
                            itemAtributo atrib1=new itemAtributo("INSTRUCCION", parser.nombreArchivo, 0); 
                            _INSTRUCCION padre =new _INSTRUCCION(atrib1 , parser.simbolo);
                             
 
                            RESULT= padre;
                        :}
                    |   tAdd
                        {:
                            itemAtributo atrib1=new itemAtributo("INSTRUCCION", parser.nombreArchivo, 1); 
                            _INSTRUCCION padre =new _INSTRUCCION(atrib1 , parser.simbolo);
                             
 
                            RESULT= padre;
                        :}
                    |   tDiff
                        {:
                            itemAtributo atrib1=new itemAtributo("INSTRUCCION", parser.nombreArchivo, 2); 
                            _INSTRUCCION padre =new _INSTRUCCION(atrib1 , parser.simbolo);
                             
 
                            RESULT= padre;
                        :}
                    |   tMult
                        {:
                            itemAtributo atrib1=new itemAtributo("INSTRUCCION", parser.nombreArchivo, 3); 
                            _INSTRUCCION padre =new _INSTRUCCION(atrib1 , parser.simbolo);
                             
 
                            RESULT= padre;
                        :}
                    |   tDiv
                        {:
                            itemAtributo atrib1=new itemAtributo("INSTRUCCION", parser.nombreArchivo, 4); 
                            _INSTRUCCION padre =new _INSTRUCCION(atrib1 , parser.simbolo);
                             
 
                            RESULT= padre;
                        :}
                    |   tMod
                        {:
                            itemAtributo atrib1=new itemAtributo("INSTRUCCION", parser.nombreArchivo, 5); 
                            _INSTRUCCION padre =new _INSTRUCCION(atrib1 , parser.simbolo);
                             
 
                            RESULT= padre;
                        :}
                    |   tPot
                        {:
                            itemAtributo atrib1=new itemAtributo("INSTRUCCION", parser.nombreArchivo, 6); 
                            _INSTRUCCION padre =new _INSTRUCCION(atrib1 , parser.simbolo);
                             
 
                            RESULT= padre;
                        :}
                    /* Relacionales */
                    |   tLt
                        {:
                            itemAtributo atrib1=new itemAtributo("INSTRUCCION", parser.nombreArchivo, 7); 
                            _INSTRUCCION padre =new _INSTRUCCION(atrib1 , parser.simbolo);
                             
 
                            RESULT= padre;
                        :}
                    |   tGt
                        {:
                            itemAtributo atrib1=new itemAtributo("INSTRUCCION", parser.nombreArchivo, 8); 
                            _INSTRUCCION padre =new _INSTRUCCION(atrib1 , parser.simbolo);
                             
 
                            RESULT= padre;
                        :}
                    |   tLte
                        {:
                            itemAtributo atrib1=new itemAtributo("INSTRUCCION", parser.nombreArchivo, 9); 
                            _INSTRUCCION padre =new _INSTRUCCION(atrib1 , parser.simbolo);
                             
 
                            RESULT= padre;
                        :}
                    |   tGte
                        {:
                            itemAtributo atrib1=new itemAtributo("INSTRUCCION", parser.nombreArchivo, 10); 
                            _INSTRUCCION padre =new _INSTRUCCION(atrib1 , parser.simbolo);
                             
 
                            RESULT= padre;
                        :}
                    /* Logico */
                    |   tNot
                        {:
                            itemAtributo atrib1=new itemAtributo("INSTRUCCION", parser.nombreArchivo, 11); 
                            _INSTRUCCION padre =new _INSTRUCCION(atrib1 , parser.simbolo);
                             
 
                            RESULT= padre;
                        :}
                    |   tAnd
                        {:
                            itemAtributo atrib1=new itemAtributo("INSTRUCCION", parser.nombreArchivo, 12); 
                            _INSTRUCCION padre =new _INSTRUCCION(atrib1 , parser.simbolo);
                             
 
                            RESULT= padre;
                        :}
                    |   tOr
                        {:
                            itemAtributo atrib1=new itemAtributo("INSTRUCCION", parser.nombreArchivo, 13); 
                            _INSTRUCCION padre =new _INSTRUCCION(atrib1 , parser.simbolo);
                             
 
                            RESULT= padre;
                        :}
                    /* Saltos */
                    |   tBr valId
                        {:
                            itemAtributo atrib1=new itemAtributo("INSTRUCCION", parser.nombreArchivo, 14); 
                            _INSTRUCCION padre =new _INSTRUCCION(atrib1 , parser.simbolo);
                             
 
                            RESULT= padre;
                        :}
                    |   tBrIf valId
                        {:
                            itemAtributo atrib1=new itemAtributo("INSTRUCCION", parser.nombreArchivo, 15); 
                            _INSTRUCCION padre =new _INSTRUCCION(atrib1 , parser.simbolo);
                             
 
                            RESULT= padre;
                        :}

                    /* Instruc */
                    |   tGet_local  E :h1
                        {:
                            itemAtributo atrib1=new itemAtributo("INSTRUCCION", parser.nombreArchivo, 16); 
                            _INSTRUCCION padre =new _INSTRUCCION(atrib1 , parser.simbolo);
                             
                                padre.listaHijos.insertar(h1,h1left, h1right);   
 
                            RESULT= padre;
                        :}
                    |   tGet_local valId
                        {:
                            itemAtributo atrib1=new itemAtributo("INSTRUCCION", parser.nombreArchivo, 17); 
                            _INSTRUCCION padre =new _INSTRUCCION(atrib1 , parser.simbolo);
                             
 
                            RESULT= padre;
                        :}
                    |   tGet_global  E :h1
                        {:
                            itemAtributo atrib1=new itemAtributo("INSTRUCCION", parser.nombreArchivo, 18); 
                            _INSTRUCCION padre =new _INSTRUCCION(atrib1 , parser.simbolo);
                             
                                padre.listaHijos.insertar(h1,h1left, h1right);   
 
                            RESULT= padre;
                        :}
                    |   tGet_global valId
                        {:
                            itemAtributo atrib1=new itemAtributo("INSTRUCCION", parser.nombreArchivo, 19); 
                            _INSTRUCCION padre =new _INSTRUCCION(atrib1 , parser.simbolo);
                             
 
                            RESULT= padre;
                        :}

                    |   tSet_local  E :h1
                        {:
                            itemAtributo atrib1=new itemAtributo("INSTRUCCION", parser.nombreArchivo, 20); 
                            _INSTRUCCION padre =new _INSTRUCCION(atrib1 , parser.simbolo);
                             
                                padre.listaHijos.insertar(h1,h1left, h1right);   
 
                            RESULT= padre;
                        :}
                    |   tSet_local valId
                        {:
                            itemAtributo atrib1=new itemAtributo("INSTRUCCION", parser.nombreArchivo, 21); 
                            _INSTRUCCION padre =new _INSTRUCCION(atrib1 , parser.simbolo);
                             
 
                            RESULT= padre;
                        :}
                    |   tSet_global  E :h1
                        {:
                            itemAtributo atrib1=new itemAtributo("INSTRUCCION", parser.nombreArchivo, 22); 
                            _INSTRUCCION padre =new _INSTRUCCION(atrib1 , parser.simbolo);
                             
                                padre.listaHijos.insertar(h1,h1left, h1right);   
 
                            RESULT= padre;
                        :}
                    |   tSet_global valId
                        {:
                            itemAtributo atrib1=new itemAtributo("INSTRUCCION", parser.nombreArchivo, 23); 
                            _INSTRUCCION padre =new _INSTRUCCION(atrib1 , parser.simbolo);
                             
 
                            RESULT= padre;
                        :}
                    /* Funciones */
                    |   tCall valId
                        {:
                            itemAtributo atrib1=new itemAtributo("INSTRUCCION", parser.nombreArchivo, 24); 
                            _INSTRUCCION padre =new _INSTRUCCION(atrib1 , parser.simbolo);
                             
 
                            RESULT= padre;
                        :}

                    /* EXTRAS */
                    |   tEqz
                        {:
                            itemAtributo atrib1=new itemAtributo("INSTRUCCION", parser.nombreArchivo, 25); 
                            _INSTRUCCION padre =new _INSTRUCCION(atrib1 , parser.simbolo);
                             
 
                            RESULT= padre;
                        :}
                    //Tengo duda de como funciona
                    

                    /* Num */
                    |   valEntero
                        {:
                            itemAtributo atrib1=new itemAtributo("INSTRUCCION", parser.nombreArchivo, 26); 
                            _INSTRUCCION padre =new _INSTRUCCION(atrib1 , parser.simbolo);
                             
 
                            RESULT= padre;
                        :}
                    |   valDecimal
                        {:
                            itemAtributo atrib1=new itemAtributo("INSTRUCCION", parser.nombreArchivo, 27); 
                            _INSTRUCCION padre =new _INSTRUCCION(atrib1 , parser.simbolo);
                             
 
                            RESULT= padre;
                        :}

                    /* PARA IMPRIMIR */

                    |   valCadena
                        {:
                            itemAtributo atrib1=new itemAtributo("INSTRUCCION", parser.nombreArchivo, 28); 
                            _INSTRUCCION padre =new _INSTRUCCION(atrib1 , parser.simbolo);
                             
 
                            RESULT= padre;
                        :}

                    | tPrint
                        {:
                            itemAtributo atrib1=new itemAtributo("INSTRUCCION", parser.nombreArchivo, 29); 
                            _INSTRUCCION padre =new _INSTRUCCION(atrib1 , parser.simbolo);
                             
 
                            RESULT= padre;
                        :}

                    //
                    ;

 FUNCION            ::= tFuncion valId LST_INSTRUCCIONES:h1 tEnd
                        {:
                            itemAtributo atrib1=new itemAtributo("FUNCION", parser.nombreArchivo, 0); 
                            _FUNCION padre =new _FUNCION(atrib1 , parser.simbolo);
                             
                                padre.listaHijos.insertar(h1,h1left, h1right);   
 
                            RESULT= padre;
                        :}
                        ;

 E                  ::=valEntero
                        {:
                            itemAtributo atrib1=new itemAtributo("E", parser.nombreArchivo, 0); 
                            _E padre =new _E(atrib1 , parser.simbolo);
                             
 
                            RESULT= padre;
                        :}
                    |  valDecimal
                        {:
                            itemAtributo atrib1=new itemAtributo("E", parser.nombreArchivo, 1); 
                            _E padre =new _E(atrib1 , parser.simbolo);
                             
 
                            RESULT= padre;
                        :}
                    ;