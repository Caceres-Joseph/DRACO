
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Nov 06 00:09:37 CST 2018
//----------------------------------------------------

package Dasm.Gramatica.Sintactico;

import java.util.List;
import java_cup.runtime.*;
import java.util.ArrayList;
import Gui.Elementos.elementoGlobal;
import Gui.Items.itemAtributo;
import Dasm.Nodos.Inicio.*;
import Dasm.Nodos.Inicio.Casos.*;
import Dasm.Nodos.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Nov 06 00:09:37 CST 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\110\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\005\004\000\002\005\003\000\002\011\003\000" +
    "\002\012\003\000\002\013\003\000\002\014\003\000\002" +
    "\015\003\000\002\016\003\000\002\017\003\000\002\020" +
    "\003\000\002\021\003\000\002\022\003\000\002\023\003" +
    "\000\002\024\003\000\002\025\003\000\002\026\004\000" +
    "\002\027\004\000\002\030\004\000\002\031\004\000\002" +
    "\032\004\000\002\033\004\000\002\034\004\000\002\035" +
    "\004\000\002\036\004\000\002\037\004\000\002\040\004" +
    "\000\002\041\003\000\002\042\003\000\002\044\003\000" +
    "\002\045\003\000\002\046\004\000\002\047\004\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\007\006\000\002\010\003" +
    "\000\002\010\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\126\000\074\004\041\005\064\006\073\007\031\010" +
    "\043\011\102\012\053\013\017\014\100\015\045\016\005" +
    "\017\010\020\057\021\067\022\032\023\040\024\065\025" +
    "\042\026\036\027\006\030\044\031\063\033\046\034\066" +
    "\035\037\036\007\037\025\040\014\041\061\001\002\000" +
    "\004\002\130\001\002\000\100\002\uffef\004\uffef\005\uffef" +
    "\006\uffef\007\uffef\010\uffef\011\uffef\012\uffef\013\uffef\014" +
    "\uffef\015\uffef\016\uffef\017\uffef\020\uffef\021\uffef\022\uffef" +
    "\023\uffef\024\uffef\025\uffef\026\uffef\027\uffef\030\uffef\031" +
    "\uffef\032\uffef\033\uffef\034\uffef\035\uffef\036\uffef\037\uffef" +
    "\040\uffef\041\uffef\001\002\000\004\036\127\001\002\000" +
    "\100\002\uffdb\004\uffdb\005\uffdb\006\uffdb\007\uffdb\010\uffdb" +
    "\011\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb\017" +
    "\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb" +
    "\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034" +
    "\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb\001\002" +
    "\000\100\002\uffee\004\uffee\005\uffee\006\uffee\007\uffee\010" +
    "\uffee\011\uffee\012\uffee\013\uffee\014\uffee\015\uffee\016\uffee" +
    "\017\uffee\020\uffee\021\uffee\022\uffee\023\uffee\024\uffee\025" +
    "\uffee\026\uffee\027\uffee\030\uffee\031\uffee\032\uffee\033\uffee" +
    "\034\uffee\035\uffee\036\uffee\037\uffee\040\uffee\041\uffee\001" +
    "\002\000\076\002\000\004\041\005\064\006\073\007\031" +
    "\010\043\011\102\012\053\013\017\014\100\015\045\016" +
    "\005\017\010\020\057\021\067\022\032\023\040\024\065" +
    "\025\042\026\036\027\006\030\044\031\063\033\046\034" +
    "\066\035\037\036\007\037\025\040\014\041\061\001\002" +
    "\000\076\002\ufffc\004\ufffc\005\ufffc\006\ufffc\007\ufffc\010" +
    "\ufffc\011\ufffc\012\ufffc\013\ufffc\014\ufffc\015\ufffc\016\ufffc" +
    "\017\ufffc\020\ufffc\021\ufffc\022\ufffc\023\ufffc\024\ufffc\025" +
    "\ufffc\026\ufffc\027\ufffc\030\ufffc\031\ufffc\033\ufffc\034\ufffc" +
    "\035\ufffc\036\ufffc\037\ufffc\040\ufffc\041\ufffc\001\002\000" +
    "\100\002\uffd2\004\uffd2\005\uffd2\006\uffd2\007\uffd2\010\uffd2" +
    "\011\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2\016\uffd2\017" +
    "\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2" +
    "\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034" +
    "\uffd2\035\uffd2\036\uffd2\037\uffd2\040\uffd2\041\uffd2\001\002" +
    "\000\100\002\uffba\004\uffba\005\uffba\006\uffba\007\uffba\010" +
    "\uffba\011\uffba\012\uffba\013\uffba\014\uffba\015\uffba\016\uffba" +
    "\017\uffba\020\uffba\021\uffba\022\uffba\023\uffba\024\uffba\025" +
    "\uffba\026\uffba\027\uffba\030\uffba\031\uffba\032\uffba\033\uffba" +
    "\034\uffba\035\uffba\036\uffba\037\uffba\040\uffba\041\uffba\001" +
    "\002\000\100\002\uffd3\004\uffd3\005\uffd3\006\uffd3\007\uffd3" +
    "\010\uffd3\011\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3\016" +
    "\uffd3\017\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3" +
    "\025\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033" +
    "\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3" +
    "\001\002\000\100\002\uffd4\004\uffd4\005\uffd4\006\uffd4\007" +
    "\uffd4\010\uffd4\011\uffd4\012\uffd4\013\uffd4\014\uffd4\015\uffd4" +
    "\016\uffd4\017\uffd4\020\uffd4\021\uffd4\022\uffd4\023\uffd4\024" +
    "\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4" +
    "\033\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4\040\uffd4\041" +
    "\uffd4\001\002\000\100\002\ufff2\004\ufff2\005\ufff2\006\ufff2" +
    "\007\ufff2\010\ufff2\011\ufff2\012\ufff2\013\ufff2\014\ufff2\015" +
    "\ufff2\016\ufff2\017\ufff2\020\ufff2\021\ufff2\022\ufff2\023\ufff2" +
    "\024\ufff2\025\ufff2\026\ufff2\027\ufff2\030\ufff2\031\ufff2\032" +
    "\ufff2\033\ufff2\034\ufff2\035\ufff2\036\ufff2\037\ufff2\040\ufff2" +
    "\041\ufff2\001\002\000\100\002\uffd5\004\uffd5\005\uffd5\006" +
    "\uffd5\007\uffd5\010\uffd5\011\uffd5\012\uffd5\013\uffd5\014\uffd5" +
    "\015\uffd5\016\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5\023" +
    "\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5" +
    "\032\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5\040" +
    "\uffd5\041\uffd5\001\002\000\076\002\ufffe\004\ufffe\005\ufffe" +
    "\006\ufffe\007\ufffe\010\ufffe\011\ufffe\012\ufffe\013\ufffe\014" +
    "\ufffe\015\ufffe\016\ufffe\017\ufffe\020\ufffe\021\ufffe\022\ufffe" +
    "\023\ufffe\024\ufffe\025\ufffe\026\ufffe\027\ufffe\030\ufffe\031" +
    "\ufffe\033\ufffe\034\ufffe\035\ufffe\036\ufffe\037\ufffe\040\ufffe" +
    "\041\ufffe\001\002\000\100\002\uffd6\004\uffd6\005\uffd6\006" +
    "\uffd6\007\uffd6\010\uffd6\011\uffd6\012\uffd6\013\uffd6\014\uffd6" +
    "\015\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6\022\uffd6\023" +
    "\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6" +
    "\032\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6\040" +
    "\uffd6\041\uffd6\001\002\000\076\002\ufffd\004\ufffd\005\ufffd" +
    "\006\ufffd\007\ufffd\010\ufffd\011\ufffd\012\ufffd\013\ufffd\014" +
    "\ufffd\015\ufffd\016\ufffd\017\ufffd\020\ufffd\021\ufffd\022\ufffd" +
    "\023\ufffd\024\ufffd\025\ufffd\026\ufffd\027\ufffd\030\ufffd\031" +
    "\ufffd\033\ufffd\034\ufffd\035\ufffd\036\ufffd\037\ufffd\040\ufffd" +
    "\041\ufffd\001\002\000\100\002\uffd7\004\uffd7\005\uffd7\006" +
    "\uffd7\007\uffd7\010\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7" +
    "\015\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023" +
    "\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7" +
    "\032\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7\037\uffd7\040" +
    "\uffd7\041\uffd7\001\002\000\100\002\uffbb\004\uffbb\005\uffbb" +
    "\006\uffbb\007\uffbb\010\uffbb\011\uffbb\012\uffbb\013\uffbb\014" +
    "\uffbb\015\uffbb\016\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffbb" +
    "\023\uffbb\024\uffbb\025\uffbb\026\uffbb\027\uffbb\030\uffbb\031" +
    "\uffbb\032\uffbb\033\uffbb\034\uffbb\035\uffbb\036\uffbb\037\uffbb" +
    "\040\uffbb\041\uffbb\001\002\000\100\002\uffd8\004\uffd8\005" +
    "\uffd8\006\uffd8\007\uffd8\010\uffd8\011\uffd8\012\uffd8\013\uffd8" +
    "\014\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8\022" +
    "\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8" +
    "\031\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8\037" +
    "\uffd8\040\uffd8\041\uffd8\001\002\000\100\002\uffd9\004\uffd9" +
    "\005\uffd9\006\uffd9\007\uffd9\010\uffd9\011\uffd9\012\uffd9\013" +
    "\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9" +
    "\022\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030" +
    "\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9" +
    "\037\uffd9\040\uffd9\041\uffd9\001\002\000\100\002\uffda\004" +
    "\uffda\005\uffda\006\uffda\007\uffda\010\uffda\011\uffda\012\uffda" +
    "\013\uffda\014\uffda\015\uffda\016\uffda\017\uffda\020\uffda\021" +
    "\uffda\022\uffda\023\uffda\024\uffda\025\uffda\026\uffda\027\uffda" +
    "\030\uffda\031\uffda\032\uffda\033\uffda\034\uffda\035\uffda\036" +
    "\uffda\037\uffda\040\uffda\041\uffda\001\002\000\100\002\ufff6" +
    "\004\ufff6\005\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6\012" +
    "\ufff6\013\ufff6\014\ufff6\015\ufff6\016\ufff6\017\ufff6\020\ufff6" +
    "\021\ufff6\022\ufff6\023\ufff6\024\ufff6\025\ufff6\026\ufff6\027" +
    "\ufff6\030\ufff6\031\ufff6\032\ufff6\033\ufff6\034\ufff6\035\ufff6" +
    "\036\ufff6\037\ufff6\040\ufff6\041\ufff6\001\002\000\004\036" +
    "\125\001\002\000\100\002\uffbd\004\uffbd\005\uffbd\006\uffbd" +
    "\007\uffbd\010\uffbd\011\uffbd\012\uffbd\013\uffbd\014\uffbd\015" +
    "\uffbd\016\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd" +
    "\024\uffbd\025\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd\032" +
    "\uffbd\033\uffbd\034\uffbd\035\uffbd\036\uffbd\037\uffbd\040\uffbd" +
    "\041\uffbd\001\002\000\100\002\uffbe\004\uffbe\005\uffbe\006" +
    "\uffbe\007\uffbe\010\uffbe\011\uffbe\012\uffbe\013\uffbe\014\uffbe" +
    "\015\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe\023" +
    "\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe" +
    "\032\uffbe\033\uffbe\034\uffbe\035\uffbe\036\uffbe\037\uffbe\040" +
    "\uffbe\041\uffbe\001\002\000\100\002\uffe0\004\uffe0\005\uffe0" +
    "\006\uffe0\007\uffe0\010\uffe0\011\uffe0\012\uffe0\013\uffe0\014" +
    "\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0" +
    "\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0\031" +
    "\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0" +
    "\040\uffe0\041\uffe0\001\002\000\010\036\124\037\025\040" +
    "\014\001\002\000\006\037\025\040\014\001\002\000\010" +
    "\036\121\037\025\040\014\001\002\000\100\002\ufff9\004" +
    "\ufff9\005\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9" +
    "\013\ufff9\014\ufff9\015\ufff9\016\ufff9\017\ufff9\020\ufff9\021" +
    "\ufff9\022\ufff9\023\ufff9\024\ufff9\025\ufff9\026\ufff9\027\ufff9" +
    "\030\ufff9\031\ufff9\032\ufff9\033\ufff9\034\ufff9\035\ufff9\036" +
    "\ufff9\037\ufff9\040\ufff9\041\ufff9\001\002\000\010\036\117" +
    "\037\025\040\014\001\002\000\100\002\ufff5\004\ufff5\005" +
    "\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5\012\ufff5\013\ufff5" +
    "\014\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5\021\ufff5\022" +
    "\ufff5\023\ufff5\024\ufff5\025\ufff5\026\ufff5\027\ufff5\030\ufff5" +
    "\031\ufff5\032\ufff5\033\ufff5\034\ufff5\035\ufff5\036\ufff5\037" +
    "\ufff5\040\ufff5\041\ufff5\001\002\000\100\002\uffe1\004\uffe1" +
    "\005\uffe1\006\uffe1\007\uffe1\010\uffe1\011\uffe1\012\uffe1\013" +
    "\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1" +
    "\022\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1\030" +
    "\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1" +
    "\037\uffe1\040\uffe1\041\uffe1\001\002\000\100\002\ufff0\004" +
    "\ufff0\005\ufff0\006\ufff0\007\ufff0\010\ufff0\011\ufff0\012\ufff0" +
    "\013\ufff0\014\ufff0\015\ufff0\016\ufff0\017\ufff0\020\ufff0\021" +
    "\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0\026\ufff0\027\ufff0" +
    "\030\ufff0\031\ufff0\032\ufff0\033\ufff0\034\ufff0\035\ufff0\036" +
    "\ufff0\037\ufff0\040\ufff0\041\ufff0\001\002\000\100\002\uffde" +
    "\004\uffde\005\uffde\006\uffde\007\uffde\010\uffde\011\uffde\012" +
    "\uffde\013\uffde\014\uffde\015\uffde\016\uffde\017\uffde\020\uffde" +
    "\021\uffde\022\uffde\023\uffde\024\uffde\025\uffde\026\uffde\027" +
    "\uffde\030\uffde\031\uffde\032\uffde\033\uffde\034\uffde\035\uffde" +
    "\036\uffde\037\uffde\040\uffde\041\uffde\001\002\000\100\002" +
    "\uffbf\004\uffbf\005\uffbf\006\uffbf\007\uffbf\010\uffbf\011\uffbf" +
    "\012\uffbf\013\uffbf\014\uffbf\015\uffbf\016\uffbf\017\uffbf\020" +
    "\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf\025\uffbf\026\uffbf" +
    "\027\uffbf\030\uffbf\031\uffbf\032\uffbf\033\uffbf\034\uffbf\035" +
    "\uffbf\036\uffbf\037\uffbf\040\uffbf\041\uffbf\001\002\000\100" +
    "\002\uffc0\004\uffc0\005\uffc0\006\uffc0\007\uffc0\010\uffc0\011" +
    "\uffc0\012\uffc0\013\uffc0\014\uffc0\015\uffc0\016\uffc0\017\uffc0" +
    "\020\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0\026" +
    "\uffc0\027\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0\034\uffc0" +
    "\035\uffc0\036\uffc0\037\uffc0\040\uffc0\041\uffc0\001\002\000" +
    "\100\002\uffc1\004\uffc1\005\uffc1\006\uffc1\007\uffc1\010\uffc1" +
    "\011\uffc1\012\uffc1\013\uffc1\014\uffc1\015\uffc1\016\uffc1\017" +
    "\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1" +
    "\026\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1\033\uffc1\034" +
    "\uffc1\035\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1\001\002" +
    "\000\100\002\uffc2\004\uffc2\005\uffc2\006\uffc2\007\uffc2\010" +
    "\uffc2\011\uffc2\012\uffc2\013\uffc2\014\uffc2\015\uffc2\016\uffc2" +
    "\017\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2\025" +
    "\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2\032\uffc2\033\uffc2" +
    "\034\uffc2\035\uffc2\036\uffc2\037\uffc2\040\uffc2\041\uffc2\001" +
    "\002\000\100\002\ufff3\004\ufff3\005\ufff3\006\ufff3\007\ufff3" +
    "\010\ufff3\011\ufff3\012\ufff3\013\ufff3\014\ufff3\015\ufff3\016" +
    "\ufff3\017\ufff3\020\ufff3\021\ufff3\022\ufff3\023\ufff3\024\ufff3" +
    "\025\ufff3\026\ufff3\027\ufff3\030\ufff3\031\ufff3\032\ufff3\033" +
    "\ufff3\034\ufff3\035\ufff3\036\ufff3\037\ufff3\040\ufff3\041\ufff3" +
    "\001\002\000\100\002\uffc3\004\uffc3\005\uffc3\006\uffc3\007" +
    "\uffc3\010\uffc3\011\uffc3\012\uffc3\013\uffc3\014\uffc3\015\uffc3" +
    "\016\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3\024" +
    "\uffc3\025\uffc3\026\uffc3\027\uffc3\030\uffc3\031\uffc3\032\uffc3" +
    "\033\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3\041" +
    "\uffc3\001\002\000\100\002\uffc4\004\uffc4\005\uffc4\006\uffc4" +
    "\007\uffc4\010\uffc4\011\uffc4\012\uffc4\013\uffc4\014\uffc4\015" +
    "\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4\023\uffc4" +
    "\024\uffc4\025\uffc4\026\uffc4\027\uffc4\030\uffc4\031\uffc4\032" +
    "\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4\037\uffc4\040\uffc4" +
    "\041\uffc4\001\002\000\100\002\uffc5\004\uffc5\005\uffc5\006" +
    "\uffc5\007\uffc5\010\uffc5\011\uffc5\012\uffc5\013\uffc5\014\uffc5" +
    "\015\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5\023" +
    "\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5\030\uffc5\031\uffc5" +
    "\032\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5\040" +
    "\uffc5\041\uffc5\001\002\000\100\002\uffed\004\uffed\005\uffed" +
    "\006\uffed\007\uffed\010\uffed\011\uffed\012\uffed\013\uffed\014" +
    "\uffed\015\uffed\016\uffed\017\uffed\020\uffed\021\uffed\022\uffed" +
    "\023\uffed\024\uffed\025\uffed\026\uffed\027\uffed\030\uffed\031" +
    "\uffed\032\uffed\033\uffed\034\uffed\035\uffed\036\uffed\037\uffed" +
    "\040\uffed\041\uffed\001\002\000\100\002\uffc6\004\uffc6\005" +
    "\uffc6\006\uffc6\007\uffc6\010\uffc6\011\uffc6\012\uffc6\013\uffc6" +
    "\014\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6\022" +
    "\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6\030\uffc6" +
    "\031\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6\037" +
    "\uffc6\040\uffc6\041\uffc6\001\002\000\100\002\uffdf\004\uffdf" +
    "\005\uffdf\006\uffdf\007\uffdf\010\uffdf\011\uffdf\012\uffdf\013" +
    "\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf" +
    "\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf\030" +
    "\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf" +
    "\037\uffdf\040\uffdf\041\uffdf\001\002\000\100\002\uffc7\004" +
    "\uffc7\005\uffc7\006\uffc7\007\uffc7\010\uffc7\011\uffc7\012\uffc7" +
    "\013\uffc7\014\uffc7\015\uffc7\016\uffc7\017\uffc7\020\uffc7\021" +
    "\uffc7\022\uffc7\023\uffc7\024\uffc7\025\uffc7\026\uffc7\027\uffc7" +
    "\030\uffc7\031\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7\036" +
    "\uffc7\037\uffc7\040\uffc7\041\uffc7\001\002\000\004\036\111" +
    "\001\002\000\100\002\ufff8\004\ufff8\005\ufff8\006\ufff8\007" +
    "\ufff8\010\ufff8\011\ufff8\012\ufff8\013\ufff8\014\ufff8\015\ufff8" +
    "\016\ufff8\017\ufff8\020\ufff8\021\ufff8\022\ufff8\023\ufff8\024" +
    "\ufff8\025\ufff8\026\ufff8\027\ufff8\030\ufff8\031\ufff8\032\ufff8" +
    "\033\ufff8\034\ufff8\035\ufff8\036\ufff8\037\ufff8\040\ufff8\041" +
    "\ufff8\001\002\000\010\036\110\037\025\040\014\001\002" +
    "\000\006\037\025\040\014\001\002\000\004\036\105\001" +
    "\002\000\100\002\uffc8\004\uffc8\005\uffc8\006\uffc8\007\uffc8" +
    "\010\uffc8\011\uffc8\012\uffc8\013\uffc8\014\uffc8\015\uffc8\016" +
    "\uffc8\017\uffc8\020\uffc8\021\uffc8\022\uffc8\023\uffc8\024\uffc8" +
    "\025\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8\032\uffc8\033" +
    "\uffc8\034\uffc8\035\uffc8\036\uffc8\037\uffc8\040\uffc8\041\uffc8" +
    "\001\002\000\100\002\uffc9\004\uffc9\005\uffc9\006\uffc9\007" +
    "\uffc9\010\uffc9\011\uffc9\012\uffc9\013\uffc9\014\uffc9\015\uffc9" +
    "\016\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9\023\uffc9\024" +
    "\uffc9\025\uffc9\026\uffc9\027\uffc9\030\uffc9\031\uffc9\032\uffc9" +
    "\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9\041" +
    "\uffc9\001\002\000\100\002\uffca\004\uffca\005\uffca\006\uffca" +
    "\007\uffca\010\uffca\011\uffca\012\uffca\013\uffca\014\uffca\015" +
    "\uffca\016\uffca\017\uffca\020\uffca\021\uffca\022\uffca\023\uffca" +
    "\024\uffca\025\uffca\026\uffca\027\uffca\030\uffca\031\uffca\032" +
    "\uffca\033\uffca\034\uffca\035\uffca\036\uffca\037\uffca\040\uffca" +
    "\041\uffca\001\002\000\100\002\ufff7\004\ufff7\005\ufff7\006" +
    "\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7\013\ufff7\014\ufff7" +
    "\015\ufff7\016\ufff7\017\ufff7\020\ufff7\021\ufff7\022\ufff7\023" +
    "\ufff7\024\ufff7\025\ufff7\026\ufff7\027\ufff7\030\ufff7\031\ufff7" +
    "\032\ufff7\033\ufff7\034\ufff7\035\ufff7\036\ufff7\037\ufff7\040" +
    "\ufff7\041\ufff7\001\002\000\100\002\uffcb\004\uffcb\005\uffcb" +
    "\006\uffcb\007\uffcb\010\uffcb\011\uffcb\012\uffcb\013\uffcb\014" +
    "\uffcb\015\uffcb\016\uffcb\017\uffcb\020\uffcb\021\uffcb\022\uffcb" +
    "\023\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb\031" +
    "\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb\036\uffcb\037\uffcb" +
    "\040\uffcb\041\uffcb\001\002\000\100\002\uffcc\004\uffcc\005" +
    "\uffcc\006\uffcc\007\uffcc\010\uffcc\011\uffcc\012\uffcc\013\uffcc" +
    "\014\uffcc\015\uffcc\016\uffcc\017\uffcc\020\uffcc\021\uffcc\022" +
    "\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc" +
    "\031\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc\037" +
    "\uffcc\040\uffcc\041\uffcc\001\002\000\100\002\uffcd\004\uffcd" +
    "\005\uffcd\006\uffcd\007\uffcd\010\uffcd\011\uffcd\012\uffcd\013" +
    "\uffcd\014\uffcd\015\uffcd\016\uffcd\017\uffcd\020\uffcd\021\uffcd" +
    "\022\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd\030" +
    "\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd" +
    "\037\uffcd\040\uffcd\041\uffcd\001\002\000\100\002\uffce\004" +
    "\uffce\005\uffce\006\uffce\007\uffce\010\uffce\011\uffce\012\uffce" +
    "\013\uffce\014\uffce\015\uffce\016\uffce\017\uffce\020\uffce\021" +
    "\uffce\022\uffce\023\uffce\024\uffce\025\uffce\026\uffce\027\uffce" +
    "\030\uffce\031\uffce\032\uffce\033\uffce\034\uffce\035\uffce\036" +
    "\uffce\037\uffce\040\uffce\041\uffce\001\002\000\100\002\ufff1" +
    "\004\ufff1\005\ufff1\006\ufff1\007\ufff1\010\ufff1\011\ufff1\012" +
    "\ufff1\013\ufff1\014\ufff1\015\ufff1\016\ufff1\017\ufff1\020\ufff1" +
    "\021\ufff1\022\ufff1\023\ufff1\024\ufff1\025\ufff1\026\ufff1\027" +
    "\ufff1\030\ufff1\031\ufff1\032\ufff1\033\ufff1\034\ufff1\035\ufff1" +
    "\036\ufff1\037\ufff1\040\ufff1\041\ufff1\001\002\000\100\002" +
    "\uffcf\004\uffcf\005\uffcf\006\uffcf\007\uffcf\010\uffcf\011\uffcf" +
    "\012\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf\020" +
    "\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf" +
    "\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf\035" +
    "\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf\001\002\000\100" +
    "\002\ufff4\004\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4\011" +
    "\ufff4\012\ufff4\013\ufff4\014\ufff4\015\ufff4\016\ufff4\017\ufff4" +
    "\020\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4\026" +
    "\ufff4\027\ufff4\030\ufff4\031\ufff4\032\ufff4\033\ufff4\034\ufff4" +
    "\035\ufff4\036\ufff4\037\ufff4\040\ufff4\041\ufff4\001\002\000" +
    "\100\002\uffd0\004\uffd0\005\uffd0\006\uffd0\007\uffd0\010\uffd0" +
    "\011\uffd0\012\uffd0\013\uffd0\014\uffd0\015\uffd0\016\uffd0\017" +
    "\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0\024\uffd0\025\uffd0" +
    "\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0\034" +
    "\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0\001\002" +
    "\000\100\002\uffd1\004\uffd1\005\uffd1\006\uffd1\007\uffd1\010" +
    "\uffd1\011\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1\016\uffd1" +
    "\017\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025" +
    "\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1" +
    "\034\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1\001" +
    "\002\000\100\002\uffec\004\uffec\005\uffec\006\uffec\007\uffec" +
    "\010\uffec\011\uffec\012\uffec\013\uffec\014\uffec\015\uffec\016" +
    "\uffec\017\uffec\020\uffec\021\uffec\022\uffec\023\uffec\024\uffec" +
    "\025\uffec\026\uffec\027\uffec\030\uffec\031\uffec\032\uffec\033" +
    "\uffec\034\uffec\035\uffec\036\uffec\037\uffec\040\uffec\041\uffec" +
    "\001\002\000\100\002\uffdd\004\uffdd\005\uffdd\006\uffdd\007" +
    "\uffdd\010\uffdd\011\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd" +
    "\016\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd\024" +
    "\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd" +
    "\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd\041" +
    "\uffdd\001\002\000\100\002\uffe8\004\uffe8\005\uffe8\006\uffe8" +
    "\007\uffe8\010\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8\015" +
    "\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8" +
    "\024\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8\032" +
    "\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8\037\uffe8\040\uffe8" +
    "\041\uffe8\001\002\000\100\002\uffe7\004\uffe7\005\uffe7\006" +
    "\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7" +
    "\015\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7\023" +
    "\uffe7\024\uffe7\025\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7" +
    "\032\uffe7\033\uffe7\034\uffe7\035\uffe7\036\uffe7\037\uffe7\040" +
    "\uffe7\041\uffe7\001\002\000\072\004\041\005\064\006\073" +
    "\007\031\010\043\011\102\012\053\013\017\014\100\015" +
    "\045\016\005\017\010\020\057\021\067\022\032\023\040" +
    "\024\065\025\042\026\036\027\006\030\044\033\046\034" +
    "\066\035\037\036\007\037\025\040\014\041\061\001\002" +
    "\000\074\004\ufffa\005\ufffa\006\ufffa\007\ufffa\010\ufffa\011" +
    "\ufffa\012\ufffa\013\ufffa\014\ufffa\015\ufffa\016\ufffa\017\ufffa" +
    "\020\ufffa\021\ufffa\022\ufffa\023\ufffa\024\ufffa\025\ufffa\026" +
    "\ufffa\027\ufffa\030\ufffa\032\ufffa\033\ufffa\034\ufffa\035\ufffa" +
    "\036\ufffa\037\ufffa\040\ufffa\041\ufffa\001\002\000\074\004" +
    "\041\005\064\006\073\007\031\010\043\011\102\012\053" +
    "\013\017\014\100\015\045\016\005\017\010\020\057\021" +
    "\067\022\032\023\040\024\065\025\042\026\036\027\006" +
    "\030\044\032\115\033\046\034\066\035\037\036\007\037" +
    "\025\040\014\041\061\001\002\000\074\004\ufffb\005\ufffb" +
    "\006\ufffb\007\ufffb\010\ufffb\011\ufffb\012\ufffb\013\ufffb\014" +
    "\ufffb\015\ufffb\016\ufffb\017\ufffb\020\ufffb\021\ufffb\022\ufffb" +
    "\023\ufffb\024\ufffb\025\ufffb\026\ufffb\027\ufffb\030\ufffb\032" +
    "\ufffb\033\ufffb\034\ufffb\035\ufffb\036\ufffb\037\ufffb\040\ufffb" +
    "\041\ufffb\001\002\000\076\002\uffbc\004\uffbc\005\uffbc\006" +
    "\uffbc\007\uffbc\010\uffbc\011\uffbc\012\uffbc\013\uffbc\014\uffbc" +
    "\015\uffbc\016\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc\023" +
    "\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc\030\uffbc\031\uffbc" +
    "\033\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\041" +
    "\uffbc\001\002\000\100\002\uffe6\004\uffe6\005\uffe6\006\uffe6" +
    "\007\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6\015" +
    "\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6" +
    "\024\uffe6\025\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6\032" +
    "\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6" +
    "\041\uffe6\001\002\000\100\002\uffe5\004\uffe5\005\uffe5\006" +
    "\uffe5\007\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5" +
    "\015\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\023" +
    "\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5" +
    "\032\uffe5\033\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5\040" +
    "\uffe5\041\uffe5\001\002\000\100\002\uffea\004\uffea\005\uffea" +
    "\006\uffea\007\uffea\010\uffea\011\uffea\012\uffea\013\uffea\014" +
    "\uffea\015\uffea\016\uffea\017\uffea\020\uffea\021\uffea\022\uffea" +
    "\023\uffea\024\uffea\025\uffea\026\uffea\027\uffea\030\uffea\031" +
    "\uffea\032\uffea\033\uffea\034\uffea\035\uffea\036\uffea\037\uffea" +
    "\040\uffea\041\uffea\001\002\000\100\002\uffe9\004\uffe9\005" +
    "\uffe9\006\uffe9\007\uffe9\010\uffe9\011\uffe9\012\uffe9\013\uffe9" +
    "\014\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9\021\uffe9\022" +
    "\uffe9\023\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9" +
    "\031\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9\036\uffe9\037" +
    "\uffe9\040\uffe9\041\uffe9\001\002\000\100\002\uffdc\004\uffdc" +
    "\005\uffdc\006\uffdc\007\uffdc\010\uffdc\011\uffdc\012\uffdc\013" +
    "\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc" +
    "\022\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc\030" +
    "\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc" +
    "\037\uffdc\040\uffdc\041\uffdc\001\002\000\100\002\uffe4\004" +
    "\uffe4\005\uffe4\006\uffe4\007\uffe4\010\uffe4\011\uffe4\012\uffe4" +
    "\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4\021" +
    "\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4" +
    "\030\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\036" +
    "\uffe4\037\uffe4\040\uffe4\041\uffe4\001\002\000\100\002\uffe3" +
    "\004\uffe3\005\uffe3\006\uffe3\007\uffe3\010\uffe3\011\uffe3\012" +
    "\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3" +
    "\021\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3\027" +
    "\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3" +
    "\036\uffe3\037\uffe3\040\uffe3\041\uffe3\001\002\000\100\002" +
    "\uffeb\004\uffeb\005\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb" +
    "\012\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb\020" +
    "\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb" +
    "\027\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb\035" +
    "\uffeb\036\uffeb\037\uffeb\040\uffeb\041\uffeb\001\002\000\076" +
    "\002\uffff\004\uffff\005\uffff\006\uffff\007\uffff\010\uffff\011" +
    "\uffff\012\uffff\013\uffff\014\uffff\015\uffff\016\uffff\017\uffff" +
    "\020\uffff\021\uffff\022\uffff\023\uffff\024\uffff\025\uffff\026" +
    "\uffff\027\uffff\030\uffff\031\uffff\033\uffff\034\uffff\035\uffff" +
    "\036\uffff\037\uffff\040\uffff\041\uffff\001\002\000\100\002" +
    "\uffe2\004\uffe2\005\uffe2\006\uffe2\007\uffe2\010\uffe2\011\uffe2" +
    "\012\uffe2\013\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020" +
    "\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2" +
    "\027\uffe2\030\uffe2\031\uffe2\032\uffe2\033\uffe2\034\uffe2\035" +
    "\uffe2\036\uffe2\037\uffe2\040\uffe2\041\uffe2\001\002\000\004" +
    "\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\126\000\112\002\003\003\010\004\020\006\022\007" +
    "\011\010\034\011\027\012\026\013\025\014\023\015\021" +
    "\016\017\017\015\020\014\021\012\022\103\023\102\024" +
    "\100\025\076\026\075\027\074\030\073\031\071\032\070" +
    "\033\067\034\061\035\057\036\055\037\054\040\053\041" +
    "\051\042\050\044\047\045\046\046\033\047\032\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\106\004\125\006\022" +
    "\007\011\010\034\011\027\012\026\013\025\014\023\015" +
    "\021\016\017\017\015\020\014\021\012\022\103\023\102" +
    "\024\100\025\076\026\075\027\074\030\073\031\071\032" +
    "\070\033\067\034\061\035\057\036\055\037\054\040\053" +
    "\041\051\042\050\044\047\045\046\046\033\047\032\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\122\001\001\000\004\010\121" +
    "\001\001\000\004\010\117\001\001\000\002\001\001\000" +
    "\004\010\115\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\106\001\001\000\004\010\105\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\104\005\112\006\111\010\034" +
    "\011\027\012\026\013\025\014\023\015\021\016\017\017" +
    "\015\020\014\021\012\022\103\023\102\024\100\025\076" +
    "\026\075\027\074\030\073\031\071\032\070\033\067\034" +
    "\061\035\057\036\055\037\054\040\053\041\051\042\050" +
    "\044\047\045\046\046\033\047\032\001\001\000\002\001" +
    "\001\000\102\006\113\010\034\011\027\012\026\013\025" +
    "\014\023\015\021\016\017\017\015\020\014\021\012\022" +
    "\103\023\102\024\100\025\076\026\075\027\074\030\073" +
    "\031\071\032\070\033\067\034\061\035\057\036\055\037" +
    "\054\040\053\041\051\042\050\044\047\045\046\046\033" +
    "\047\032\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
    /* public AST ast; 
    public tablaDeSimbolos tablaSimbolos; */
    public elementoGlobal simbolo;
    public String nombreArchivo="";
    public nodoModelo raiz;
    public void iniciar(elementoGlobal simbolo, String nombreArchivo){
        this.simbolo=simbolo;
        this.nombreArchivo= nombreArchivo;
    }

    public void syntax_error(Symbol te){
        try{
            
            //System.out.println("compiler has detected a syntax error at line:"+te.left+ "  columna:"+te.right+"token:"+te.value.toString());
            simbolo.tablaErrores.insertErrorSyntax(nombreArchivo,te.left, te.right, "No se esperaba token : "+te.value.toString());
        }catch(Exception p){
            System.out.println("[Sintactico.cup][syntax_error][ERROR]"+p.getMessage());
        }
        
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // E ::= valDecimal 
            {
              nodoModelo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            itemAtributo atrib1=new itemAtributo("E", parser.nombreArchivo, 1); 
                            _E padre =new _E(atrib1 , parser.simbolo);
                             
                                itemAtributo at1=new itemAtributo("valDecimal",d1, d1right, d1left,parser.nombreArchivo); 
                                padre.listaAtributos.insertar(at1);

 
                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // E ::= valEntero 
            {
              nodoModelo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            itemAtributo atrib1=new itemAtributo("E", parser.nombreArchivo, 0); 
                            _E padre =new _E(atrib1 , parser.simbolo);
                             
                                itemAtributo at1=new itemAtributo("valDecimal",d1, d1right, d1left,parser.nombreArchivo); 
                                padre.listaAtributos.insertar(at1);
 
                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // FUNCION ::= tFuncion valId LST_INSTRUCCIONES tEnd 
            {
              nodoModelo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String d1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                            itemAtributo atrib1=new itemAtributo("FUNCION", parser.nombreArchivo, 0); 
                            _FUNCION padre =new _FUNCION(atrib1 , parser.simbolo);
                             
                                padre.listaHijos.insertar(h1,h1left, h1right);   

                                itemAtributo at1=new itemAtributo("valId",d1, d1right, d1left,parser.nombreArchivo); 
                                padre.listaAtributos.insertar(at1);
 
                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // INSTRUCCION ::= CASO_31 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT= h1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // INSTRUCCION ::= CASO_30 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT= h1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // INSTRUCCION ::= CASO_29 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT= h1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // INSTRUCCION ::= CASO_28 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT= h1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // INSTRUCCION ::= CASO_26 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT= h1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // INSTRUCCION ::= CASO_25 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT= h1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // INSTRUCCION ::= CASO_24 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT= h1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // INSTRUCCION ::= CASO_23 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT= h1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // INSTRUCCION ::= CASO_22 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT= h1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // INSTRUCCION ::= CASO_21 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT= h1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // INSTRUCCION ::= CASO_20 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT= h1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // INSTRUCCION ::= CASO_19 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT= h1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // INSTRUCCION ::= CASO_18 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT= h1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // INSTRUCCION ::= CASO_17 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT= h1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // INSTRUCCION ::= CASO_16 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT= h1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // INSTRUCCION ::= CASO_15 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT= h1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // INSTRUCCION ::= CASO_14 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT= h1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // INSTRUCCION ::= CASO_13 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT= h1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // INSTRUCCION ::= CASO_12 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT= h1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // INSTRUCCION ::= CASO_11 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT= h1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // INSTRUCCION ::= CASO_10 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT= h1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // INSTRUCCION ::= CASO_09 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT= h1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // INSTRUCCION ::= CASO_08 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT= h1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // INSTRUCCION ::= CASO_07 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT= h1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // INSTRUCCION ::= CASO_06 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT= h1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // INSTRUCCION ::= CASO_05 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT= h1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // INSTRUCCION ::= CASO_04 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT= h1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // INSTRUCCION ::= CASO_03 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT= h1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // INSTRUCCION ::= CASO_02 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT= h1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // INSTRUCCION ::= CASO_01 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT= h1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // INSTRUCCION ::= valId 
            {
              nodoModelo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            itemAtributo atrib1=new itemAtributo("INSTRUCCION", parser.nombreArchivo, 0); 
                            _INSTRUCCION padre =new _INSTRUCCION(atrib1 , parser.simbolo);
                             

                                itemAtributo at1=new itemAtributo("valId",d1, d1right, d1left,parser.nombreArchivo); 
                                padre.listaAtributos.insertar(at1);

                                itemAtributo at2=new itemAtributo("salto",d1, d1right, d1left,parser.nombreArchivo); 
                                padre.listaAtributos.insertar(at2);
                                
 
                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CASO_31 ::= tTee_global E 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            itemAtributo atrib1=new itemAtributo("INSTRUCCION", parser.nombreArchivo, 31); 
                            _CASO_31 padre =new _CASO_31(atrib1 , parser.simbolo);
                             
                                padre.listaHijos.insertar(h1,h1left, h1right);   
 
                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASO_31",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CASO_30 ::= tTee_local E 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            itemAtributo atrib1=new itemAtributo("INSTRUCCION", parser.nombreArchivo, 30); 
                            _CASO_30 padre =new _CASO_30(atrib1 , parser.simbolo);
                             
                                padre.listaHijos.insertar(h1,h1left, h1right);   
 
                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASO_30",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CASO_29 ::= tPrint 
            {
              nodoModelo RESULT =null;
		
                            itemAtributo atrib1=new itemAtributo("INSTRUCCION", parser.nombreArchivo, 29); 
                            _CASO_29 padre =new _CASO_29(atrib1 , parser.simbolo);
                             
 
                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASO_29",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CASO_28 ::= valCadena 
            {
              nodoModelo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            itemAtributo atrib1=new itemAtributo("INSTRUCCION", parser.nombreArchivo, 28); 
                            _CASO_28 padre =new _CASO_28(atrib1 , parser.simbolo);
                             
                              
                                itemAtributo at1=new itemAtributo("valCadena",d1, d1right, d1left,parser.nombreArchivo); 
                                padre.listaAtributos.insertar(at1);
 
                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASO_28",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CASO_26 ::= E 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            itemAtributo atrib1=new itemAtributo("INSTRUCCION", parser.nombreArchivo, 26); 
                            _CASO_26 padre =new _CASO_26(atrib1 , parser.simbolo);
                             
                                padre.listaHijos.insertar(h1,h1left, h1right);   
 
                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASO_26",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CASO_25 ::= tEqz 
            {
              nodoModelo RESULT =null;
		
                            itemAtributo atrib1=new itemAtributo("INSTRUCCION", parser.nombreArchivo, 25); 
                            _CASO_25 padre =new _CASO_25(atrib1 , parser.simbolo);
                             
 
                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASO_25",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CASO_24 ::= tCall valId 
            {
              nodoModelo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            itemAtributo atrib1=new itemAtributo("INSTRUCCION", parser.nombreArchivo, 24); 
                            _CASO_24 padre =new _CASO_24(atrib1 , parser.simbolo);
                             
                             
                                itemAtributo at1=new itemAtributo("valId",d1, d1right, d1left,parser.nombreArchivo); 
                                padre.listaAtributos.insertar(at1);
 
                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASO_24",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CASO_23 ::= tSet_global valId 
            {
              nodoModelo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            itemAtributo atrib1=new itemAtributo("INSTRUCCION", parser.nombreArchivo, 23); 
                            _CASO_23 padre =new _CASO_23(atrib1 , parser.simbolo);
                             
                                itemAtributo at1=new itemAtributo("valId",d1, d1right, d1left,parser.nombreArchivo); 
                                padre.listaAtributos.insertar(at1);
 
                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASO_23",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CASO_22 ::= tSet_global E 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            itemAtributo atrib1=new itemAtributo("INSTRUCCION", parser.nombreArchivo, 22); 
                            _CASO_22 padre =new _CASO_22(atrib1 , parser.simbolo);
                             
                                padre.listaHijos.insertar(h1,h1left, h1right);   
 
                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASO_22",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CASO_21 ::= tSet_local valId 
            {
              nodoModelo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            itemAtributo atrib1=new itemAtributo("INSTRUCCION", parser.nombreArchivo, 21); 
                            _CASO_21 padre =new _CASO_21(atrib1 , parser.simbolo);
                             
                                itemAtributo at1=new itemAtributo("valId",d1, d1right, d1left,parser.nombreArchivo); 
                                padre.listaAtributos.insertar(at1);
 
                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASO_21",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CASO_20 ::= tSet_local E 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            itemAtributo atrib1=new itemAtributo("INSTRUCCION", parser.nombreArchivo, 20); 
                            _CASO_20 padre =new _CASO_20(atrib1 , parser.simbolo);
                             
                                padre.listaHijos.insertar(h1,h1left, h1right);   
 
                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASO_20",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CASO_19 ::= tGet_global valId 
            {
              nodoModelo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            itemAtributo atrib1=new itemAtributo("INSTRUCCION", parser.nombreArchivo, 19); 
                            _CASO_19 padre =new _CASO_19(atrib1 , parser.simbolo);
                             
                                itemAtributo at1=new itemAtributo("valId",d1, d1right, d1left,parser.nombreArchivo); 
                                padre.listaAtributos.insertar(at1);
 
                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASO_19",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CASO_18 ::= tGet_global E 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            itemAtributo atrib1=new itemAtributo("INSTRUCCION", parser.nombreArchivo, 18); 
                            _CASO_18 padre =new _CASO_18(atrib1 , parser.simbolo);
                             
                                padre.listaHijos.insertar(h1,h1left, h1right);   
 
                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASO_18",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CASO_17 ::= tGet_local valId 
            {
              nodoModelo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            itemAtributo atrib1=new itemAtributo("INSTRUCCION", parser.nombreArchivo, 17); 
                            _CASO_17 padre =new _CASO_17(atrib1 , parser.simbolo);
                             
                                itemAtributo at1=new itemAtributo("valId",d1, d1right, d1left,parser.nombreArchivo); 
                                padre.listaAtributos.insertar(at1);
 
                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASO_17",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CASO_16 ::= tGet_local E 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            itemAtributo atrib1=new itemAtributo("INSTRUCCION", parser.nombreArchivo, 16); 
                            _CASO_16 padre =new _CASO_16(atrib1 , parser.simbolo);
                             
                                padre.listaHijos.insertar(h1,h1left, h1right);   
 
                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASO_16",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CASO_15 ::= tBrIf valId 
            {
              nodoModelo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            itemAtributo atrib1=new itemAtributo("INSTRUCCION", parser.nombreArchivo, 15); 
                            _CASO_15 padre =new _CASO_15(atrib1 , parser.simbolo);
                             
                                itemAtributo at1=new itemAtributo("valId",d1, d1right, d1left,parser.nombreArchivo); 
                                padre.listaAtributos.insertar(at1);
 
                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASO_15",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CASO_14 ::= tBr valId 
            {
              nodoModelo RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            itemAtributo atrib1=new itemAtributo("INSTRUCCION", parser.nombreArchivo, 14); 
                            _CASO_14 padre =new _CASO_14(atrib1 , parser.simbolo);
                             
                                itemAtributo at1=new itemAtributo("valId",d1, d1right, d1left,parser.nombreArchivo); 
                                padre.listaAtributos.insertar(at1);
 
                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASO_14",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CASO_13 ::= tOr 
            {
              nodoModelo RESULT =null;
		
                            itemAtributo atrib1=new itemAtributo("INSTRUCCION", parser.nombreArchivo, 13); 
                            _CASO_13 padre =new _CASO_13(atrib1 , parser.simbolo);
                             
 
                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASO_13",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CASO_12 ::= tAnd 
            {
              nodoModelo RESULT =null;
		
                            itemAtributo atrib1=new itemAtributo("INSTRUCCION", parser.nombreArchivo, 12); 
                            _CASO_12 padre =new _CASO_12(atrib1 , parser.simbolo);
                             
 
                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASO_12",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CASO_11 ::= tNot 
            {
              nodoModelo RESULT =null;
		
                            itemAtributo atrib1=new itemAtributo("INSTRUCCION", parser.nombreArchivo, 11); 
                            _CASO_11 padre =new _CASO_11(atrib1 , parser.simbolo);
                             
 
                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASO_11",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CASO_10 ::= tGte 
            {
              nodoModelo RESULT =null;
		
                            itemAtributo atrib1=new itemAtributo("INSTRUCCION", parser.nombreArchivo, 10); 
                            _CASO_10 padre =new _CASO_10(atrib1 , parser.simbolo);
                             
 
                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASO_10",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CASO_09 ::= tLte 
            {
              nodoModelo RESULT =null;
		
                            itemAtributo atrib1=new itemAtributo("INSTRUCCION", parser.nombreArchivo, 9); 
                            _CASO_09 padre =new _CASO_09(atrib1 , parser.simbolo);
                             
 
                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASO_09",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CASO_08 ::= tGt 
            {
              nodoModelo RESULT =null;
		
                            itemAtributo atrib1=new itemAtributo("INSTRUCCION", parser.nombreArchivo, 8); 
                            _CASO_08 padre =new _CASO_08(atrib1 , parser.simbolo);
                             
 
                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASO_08",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CASO_07 ::= tLt 
            {
              nodoModelo RESULT =null;
		
                            itemAtributo atrib1=new itemAtributo("INSTRUCCION", parser.nombreArchivo, 7); 
                            _CASO_07 padre =new _CASO_07(atrib1 , parser.simbolo);
                             
 
                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASO_07",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CASO_06 ::= tPot 
            {
              nodoModelo RESULT =null;
		
                            itemAtributo atrib1=new itemAtributo("INSTRUCCION", parser.nombreArchivo, 6); 
                            _CASO_06 padre =new _CASO_06(atrib1 , parser.simbolo);
                             
 
                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASO_06",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CASO_05 ::= tMod 
            {
              nodoModelo RESULT =null;
		
                            itemAtributo atrib1=new itemAtributo("INSTRUCCION", parser.nombreArchivo, 5); 
                            _CASO_05 padre =new _CASO_05(atrib1 , parser.simbolo);
                             
 
                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASO_05",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CASO_04 ::= tDiv 
            {
              nodoModelo RESULT =null;
		
                            itemAtributo atrib1=new itemAtributo("INSTRUCCION", parser.nombreArchivo, 4); 
                            _CASO_04 padre =new _CASO_04(atrib1 , parser.simbolo);
                             
 
                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASO_04",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CASO_03 ::= tMult 
            {
              nodoModelo RESULT =null;
		
                            itemAtributo atrib1=new itemAtributo("INSTRUCCION", parser.nombreArchivo, 3); 
                            _CASO_03 padre =new _CASO_03(atrib1 , parser.simbolo);
                             
 
                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASO_03",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CASO_02 ::= tDiff 
            {
              nodoModelo RESULT =null;
		
                            itemAtributo atrib1=new itemAtributo("INSTRUCCION", parser.nombreArchivo, 2); 
                            _CASO_02 padre =new _CASO_02(atrib1 , parser.simbolo);
                             
 
                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASO_02",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CASO_01 ::= tAdd 
            {
              nodoModelo RESULT =null;
		
                            itemAtributo atrib1=new itemAtributo("INSTRUCCION", parser.nombreArchivo, 1); 
                            _CASO_01 padre =new _CASO_01(atrib1 , parser.simbolo);
                             
 
                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASO_01",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LST_INSTRUCCIONES ::= INSTRUCCION 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            itemAtributo atrib1=new itemAtributo("LST_INSTRUCCIONES", parser.nombreArchivo, 1); 
                            _LST_INSTRUCCIONES padre =new _LST_INSTRUCCIONES(atrib1 , parser.simbolo);
                            
                                //insertando el padre 
                                h1.insertarPadre(padre);
                                //padre.listaHijos.insertar(h1,h1left, h1right);   
                                padre.listaHijosHash.insertar(h1,h1left, h1right); 
 
                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LST_INSTRUCCIONES",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LST_INSTRUCCIONES ::= LST_INSTRUCCIONES INSTRUCCION 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h2 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

 
                                h2.insertarPadre(h1);
                                //h1.listaHijos.insertar(h2,h2left, h2right); 
                                h1.listaHijosHash.insertar(h2,h2left, h2right);   
                         
                            RESULT= h1;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LST_INSTRUCCIONES",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CUERPO ::= FUNCION 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        
                            RESULT= h1;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CUERPO ::= INSTRUCCION 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        
                            RESULT= h1;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LST_CUERPO ::= CUERPO 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            itemAtributo atrib1=new itemAtributo("LST_CUERPO", parser.nombreArchivo, 1); 
                            _LST_CUERPO padre =new _LST_CUERPO(atrib1 , parser.simbolo);
                            
                                //insertando el padre
                                h1.insertarPadre(padre);
                                //padre.listaHijos.insertar(h1,h1left, h1right);  
                                padre.listaHijosHash.insertar(h1,h1left, h1right);   

 
                            RESULT= padre;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LST_CUERPO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // LST_CUERPO ::= LST_CUERPO CUERPO 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h2 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            
                                h2.insertarPadre(h1);
                                //h1.listaHijos.insertar(h2,h2left, h2right); 
                                h1.listaHijosHash.insertar(h2,h2left, h2right); 
                                
                                

                            RESULT= h1;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LST_CUERPO",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= LST_CUERPO 
            {
              nodoModelo RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodoModelo h1 = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        
                            parser.raiz=h1;
                            RESULT= h1;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodoModelo start_val = (nodoModelo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

