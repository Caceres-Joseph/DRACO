package DracoScript.Gramatica.Sintactico;

/* import Analizadores.elementoTablaSimbolos;
import Analizadores.tablaDeSimbolos;
import Analizadores.AST;
import Analizadores.nodo;
import Analizadores.listaValores; */



import java.util.List;
import java_cup.runtime.*;
import java.util.ArrayList;


import DracoScript.Estructuras.Elementos.elementoGlobal;

import DracoScript.Nodos.AsignarValor.*;
import DracoScript.Nodos.Inicio.*;
import DracoScript.Nodos.Nativas.*;
import DracoScript.Nodos.SentenciaControl.*;
import DracoScript.Nodos.Sentencias.*;
import DracoScript.Nodos.Sentencias.For.*; 
import DracoScript.Nodos.Sentencias.If.*; 
import DracoScript.Nodos.Sentencias.While.*;
import DracoScript.Nodos.Valor.*;
import DracoScript.Nodos.*;


import DracoScript.Estructuras.Items.itemAtributo;
//var: var++*34


parser code {: 
    /* public AST ast; 
    public tablaDeSimbolos tablaSimbolos; */
    public elementoGlobal simbolo;
    public String nombreArchivo="";
    public nodoModelo raiz;
    public void iniciar(elementoGlobal simbolo, String nombreArchivo){
        this.simbolo=simbolo;
        this.nombreArchivo= nombreArchivo;
    }

    public void syntax_error(Symbol te){
        try{
            
            //System.out.println("compiler has detected a syntax error at line:"+te.left+ "  columna:"+te.right+"token:"+te.value.toString());
            simbolo.tablaErrores.insertErrorSyntax(nombreArchivo,te.left, te.right, "No se esperaba token : "+te.value.toString());
        }catch(Exception p){
            System.out.println("[Sintactico.cup][syntax_error][ERROR]"+p.getMessage());
        }
        
    }
:};


/*
+------------------------------------------------+
|   Definición de terminales
+------------------------------------------------+
*/


terminal String sPuntoComa      , sDosPuntos,
                sComa           , sIgual,
                sIgualacion     , sDiferenciacion,
                sMenor          , sMenorIgual,
                sMayor          , sMayorIgual,
                sAnd            , sOr,
                sNot            , sPunto,

                sDobleMenos     , sDobleMas,
                
                sAbreParent     ,       sCierraParent,
                sAbreCorchete   ,       sCierraCorchete,
                sAbreLlaves     ,       sCierraLlaves,
                sPot            ,       sModulo,
                sPor            ,       sMas,
                sDiv            ,       sMenos;


terminal String tVar            , tSmash,
                tIf             , tElif,
                tIf2            , tWhile,
                //tNot            ,
                tFor            , tPrint,
                tRunMultDasm    , tPoint,
                tQuadrate       , tOval,
                tString         , tRunDasm,
                tLine      ;


terminal  String  valTrue         , valFalse, valChar,
                valId           , valEntero , valCadena , valDecimal;


/*
+------------------------------------------------+
|   Definición de No terminales
+------------------------------------------------+
*/

non terminal nodoModelo            
        S;
non terminal nodoModelo      
        LST_CUERPO;
non terminal nodoModelo          
        CUERPO;


 


non terminal nodoModelo   ASIGNAR_VAL     ,
                    DECLARAR_VAR    ,
                    LST_DECLARAR_VAR,
                    ASGIN_VAR       ,
                    LST_VALOR
                                    ;

non terminal nodoModelo   SENTENCIAS    ,
                    ROMPER,
                    IF,
                    ELIF,
                    IFP,
                    IF_NOT,
                    WHILE,
                    FOR;
 

non terminal nodoModelo   FUNCIONES_NATIVAS,
                    PRINT,
                    RUNMULTDASM,
                    POINT,
                    QUADRATE,
                    OVAL,
                    STRING,
                    LINE
                     ;

non terminal nodoModelo VALOR      ;

 
                    
non terminal nodoModelo E    ; 
/*
+------------------------------------------------+
|   Producciones
+------------------------------------------------+
*/

precedence left sOr;
precedence left sAnd;


precedence left sIgualacion     ,
                sDiferenciacion ,
                sMenor          ,
                sMayor          ,
                sMenorIgual     ,
                sMayorIgual     ;

precedence left sMas, sMenos;
precedence left sPor, sDiv, sModulo;
precedence right sPot;


precedence right sDobleMas, sDobleMenos;
precedence left sNot;
/*
+------------------------------------------------+
|   Producciones
+------------------------------------------------+
*/
start with S;


/*
|-------------------------------------------------------------------------------------------------------------------
| CUP
|-------------------------------------------------------------------------------------------------------------------
*/
 
S               ::= LST_CUERPO;
 